{
    "texts": [
        "{\n    \"type\": \"Variable\",\n    \"name\": \"sb\",\n    \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes found\",\n    \"relation\": \"None\"\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"replaceSpace\",\n    \"summary\": \"Implements string space replacement functionality\",\n    \"children\": []\n}",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"replaceSpace\",\n    \"summary\": \"Implements string space replacement functionality\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"sb\",\n            \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n            \"relation_to_parent\": \"No child nodes found\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"i\",\n            \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n            \"relation_to_parent\": \"No child nodes found\",\n            \"relation\": \"None\"\n        }\n    ]\n}",
        "{\n  \"type\": \"Class\",\n  \"name\": \"No_01_001\",\n  \"summary\": \"Implements string space replacement functionality\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"sb\",\n      \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n      \"relation_to_parent\": \"None\",\n      \"relation\": \"No child nodes found\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n      \"relation_to_parent\": \"None\",\n      \"relation\": \"No child nodes found\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"File\",\n    \"name\": \"No_01_001.java\",\n    \"summary\": \"Implements string space replacement functionality for Java code.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode.val\",\n    \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n    \"children\": [],\n    \"relation\": \"No child nodes available\",\n    \"additionalBin\": {\n        \"binNum\": 1,\n        \"binPath\": \"B:/leetcode/algorithm\"\n    }\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"loop\",\n            \"summary\": \"Reference to the parent loop node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"Storing the value of 'x' (int) as a field in the ListNode class, used to initialize new ListNode instances.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"No child nodes available\",\n            \"relation\": \"No child nodes available\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"No child nodes available\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"len\",\n    \"summary\": \"A variable that holds the length of an array being referenced\",\n    \"children\": []\n}",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_002.ListNode\",\n  \"summary\": \"A method that initializes a new instance of the ListNode class by setting a field 'val' to a given integer 'x'.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_002.ListNode.val\",\n      \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n      \"relation_to_parent\": \"No child nodes available\",\n      \"relation\": \"No child nodes available\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_002.ListNode.next\",\n      \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n      \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"a\",\n    \"summary\": \"A variable declared as an int[] array in the 'No_01_002.java' file. It holds the initial value of an integer array with 'len' set.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node.\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"algorithm.No_01_002.ListNode.reversePrint\",\n    \"summary\": \"Reverses the elements of a linked list by iterating through the list and constructing an integer array from the values.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node.\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"algorithm.No_01_002\",\n    \"summary\": \"A class representing linked list operations, with a public method reversePrint that initializes nodes via setting 'val' field.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"algorithm.No_01_002\",\n    \"summary\": \"A class representing linked list operations, with a public method reversePrint that initializes nodes via setting 'val' field.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"A\",\n    \"summary\": \"A Stack<Integer> variable with type definition.\",\n    \"children\": []\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"B\",\n  \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class\",\n  \"children\": [],\n  \"relation_to_parent\": \"None\",\n  \"relation\": \"None\"\n}",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A public method that initializes two stacks for storing integers\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<Integer> variable storing integer values\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> storing integers\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"value\",\n    \"summary\": \"Stores the value of an int type variable.\",\n    \"children\": [],\n    \"relation_to_parent\": \"None\",\n    \"relation\": \"None\"\n}",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"appendTail\",\n    \"summary\": \"Add an int to a list using A.push() to store the value contextually.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"value\",\n            \"summary\": \"Stores the value of an int type variable.\",\n            \"relation_to_parent\": \"Direct parameter definition to the method appendTail\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"result\",\n    \"summary\": \"Stores the final value returned by processing operations on 'B', which handles delete head operations.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Method node\",\n    \"name\": \"deleteHead\",\n    \"summary\": \"Handles delete head operations on a queue by popping elements and storing the result after processing remaining elements via a temporary container 'B'.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"result\",\n            \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n            \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n            \"relation\": \"Property / containment\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<Integer> variable storing integer values with type definition.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"deleteHead\",\n            \"summary\": \"Handles delete head operations on a queue by popping elements from A and storing the result after processing remaining elements via a temporary container 'B'.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"result\",\n                    \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n                    \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n                    \"relation\": \"Property / containment\"\n                }\n            ]\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<java.lang.Integer> variable storing integer values with type definition.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"deleteHead\",\n            \"summary\": \"Handles delete head operations on a queue by popping elements from A and storing the result after processing remaining elements via a temporary container 'B'.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"result\",\n                    \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n                    \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n                    \"relation\": \"Property / containment\"\n                }\n            ]\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode.val\",\n    \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"looping reference\",\n            \"summary\": \"References the parent node algorithm.No_01_005.ListNode\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"x\",\n  \"summary\": \"A reference to a ListNode instance variable that holds an integer value in the algorithm component.\",\n  \"children\": [],\n  \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm component.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        }\n    ]\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_005.ListNode\",\n  \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm component.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.val\",\n      \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n      \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.next\",\n      \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    }\n  ]\n}\n```",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_005.ListNode\",\n  \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.val\",\n      \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.next\",\n      \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    }\n  ]\n}",
        "{\n    \"type\": \"Variable type\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"reverseList\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"algorithm.No_01_005\",\n    \"summary\": \"A class defining a linked list node storing an integer value in the algorithm component, serving as a foundational structure for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005\",\n    \"summary\": \"A class defining a linked list node storing an integer value in the algorithm component, serving as a foundational structure for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"A\",\n    \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A is an alias or reference to the stack variable used for storing integers in the global environment.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n            \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n            \"relation\": \"Used within the stack context\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"B\",\n    \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing a stack container for integers.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing the parent stack container.\",\n            \"relation_to_parent\": \"Dependency: A is the parent variable storing B's context.\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"No_01_006\",\n    \"summary\": \"Initialize a data structure to store integers in the global scope.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing a stack container for integers.\",\n            \"relation_to_parent\": \"Dependency: A is the parent variable storing B's context.\",\n            \"relation\": \"Used within the stack context\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"A parameter used in the 'push' method to store data. The variable 'x' is an int and is part of the algorithm's logic.\",\n    \"children\": []\n}",
        "{\n    \"type\": \"Method\",\n    \"name\": \"push\",\n    \"summary\": \"Stores elements in the list A and performs validation on elements with B to prevent exceeding bounds.\",\n    \"children\": [\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"x\",\n            \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n            \"relation\": \"Variable parameter in the 'push' method\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"pop\",\n    \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"B.pop\",\n            \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop operation.\",\n            \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"top\",\n    \"summary\": \"Returns the value from A.peek() with public method signature.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"The method returns the minimum value with the rawType of int.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"The method references B.peek() with no further specified dependencies or invocations.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        }\n    ]\n}",
        "{\n  \"type\": \"Class node\",\n  \"name\": \"No_01_006\",\n  \"summary\": \"A class that initializes a stack to store integers in the global scope.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"A\",\n      \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n      \"relation_to_parent\": \"Composition of the stack storage interface\",\n      \"relation\": \"Invoked by A (as a method or instance)\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"B\",\n      \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n      \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n      \"relation\": \"Used within the stack context\"\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"push\",\n      \"summary\": \"Stores elements in A and validates against B to prevent bounds.\",\n      \"children\": [\n        {\n          \"type\": \"Parameter node\",\n          \"name\": \"x\",\n          \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n          \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n          \"relation\": \"Variable parameter in the 'push' method\"\n        }\n      ]\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"pop\",\n      \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n      \"children\": [\n        {\n          \"type\": \"Child node type\",\n          \"name\": \"B.pop\",\n          \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n          \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n        }\n      ]\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"top\",\n      \"summary\": \"Returns the value from A.peek() with public method signature.\",\n      \"children\": []\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"min\",\n      \"summary\": \"References B.peek() with no further specified dependencies or invocations.\",\n      \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n    }\n  ]\n}",
        "{\n    \"type\": \"Class node\",\n    \"name\": \"No_01_006\",\n    \"summary\": \"A class that initializes a stack to store integers in the global scope as a variable.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"A\",\n            \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"B\",\n            \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n            \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n            \"relation\": \"Used within the stack context\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"push\",\n            \"summary\": \"Stores elements in A and validates against B to prevent bounds.\",\n            \"children\": [\n                {\n                    \"type\": \"Parameter node\",\n                    \"name\": \"x\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"pop\",\n            \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"B.pop\",\n                    \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n                    \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"top\",\n            \"summary\": \"Returns the value from A.peek() with public method signature.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"min\",\n            \"summary\": \"References B.peek() with no further specified dependencies or invocations.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"val\",\n    \"summary\": \"A declaration of a variable of type int, used for storing numerical values in the program.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"Defined in the 'No_01_007.java' file and used as a variable in the logic of the program.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Represents a field of type algorithm.No_01_007.Node that references the parent structure (node 52) for algorithmic operations.\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"Defines a dependency relation to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure (node 52) for logical cycles and data dependencies.\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"random\",\n    \"summary\": \"Represents a reference to a Node instance, acting as a dependency in an algorithm context.\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"循环引用节点 52\",\n            \"summary\": \"Used as a dependency or invocation context in the Node class to reference internal components.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Node\",\n    \"name\": \"val\",\n    \"summary\": \"A variable of type int storing the input value for the Node class constructor.\",\n    \"children\": []\n}\n```",
        "{\n  \"type\": \"Method\",\n  \"name\": \"Node\",\n  \"summary\": \"A constructor method in the Node class that initializes a Node object by taking an int argument 'val'.\",\n  \"children\": [\n    {\n      \"type\": \"Node\",\n      \"name\": \"val\",\n      \"summary\": \"A variable of type int storing the input value for the Node class constructor.\",\n      \"relation_to_parent\": \"This node is a child of the constructor method and represents the 'val' parameter.\",\n      \"relation\": \"Dependency or invocation between child and parent node\"\n    }\n  ]\n}",
        "{\n    \"type\": \"Class\",\n    \"name\": \"Node\",\n    \"summary\": \"A class representing an algorithmic object that stores numerical values and references other data structures (cycle structure, random pointers) for computational logic and data dependencies.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"A declaration of a variable of type int, used as a direct dependency in the parent node's logic flow\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency relation to node 52, indicating that it is a child of the algorithm node representing the cycle structure\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure (node 52) for logical cycles and data dependencies.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"Represents a reference to a Node instance, acting as a dependency in an algorithm context\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"cur\",\n  \"summary\": \"A variable holding a direct dependency in the algorithm logic, initialized from the 'head' node for computation.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"val\",\n      \"summary\": \"A local variable of type int representing the algorithmic value being computed\",\n      \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n    },\n    {\n      \"type\": \"Typed\",\n      \"name\": \"cycle\",\n      \"summary\": \"A dependency to node 52, representing the cycle structure in the algorithm's computational model\",\n      \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"random\",\n      \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"map\",\n    \"summary\": \"A Java Map that stores references to specific nodes of type Node.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Node\",\n            \"summary\": \"A Node object representing a specific entity in the algorithm.\",\n            \"relation_to_parent\": \"Dependency or invocation between child and parent node.\",\n            \"relation\": \"Part of the Map structuring two types of nodes\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"copyRandomList\",\n    \"summary\": \"A method that copies a linked list as a composition of data dependencies, storing 'val', 'cycle', and 'random' for algorithmic logic.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent structure\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency relation to node 52, indicating a child of the algorithm node representing cycle structure\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles and data dependencies.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"Represents a reference to a Node instance, acting as a dependency for algorithm execution\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"copyRandomList\",\n    \"summary\": \"A method that copies a linked list as a composition of data dependencies, storing 'val', 'cycle', and 'random' for algorithmic logic.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"cur\",\n            \"summary\": \"A variable holding a direct dependency in the algorithm logic, initialized from the 'head' node for computation.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency to node 52, representing the cycle structure in the algorithm's computational model\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent structure\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_007\",\n    \"summary\": \"A class representing an algorithmic object containing numerical values and references to other nodes (cycle and random pointers) for computational logic and dependencies.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Node\",\n            \"summary\": \"A class storing numerical values and random pointers (cycle and random), forming a linked list structure for algorithmic dependencies.\",\n            \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n            \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"random\",\n            \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_01_007.java\",\n  \"summary\": \"A class representing an algorithmic object containing numerical values and random pointers (cycle and random) for computational logic and dependencies.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Node\",\n      \"summary\": \"A class storing numerical values and random pointers (cycle and random), forming a linked list structure for algorithmic dependencies.\",\n      \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"val\",\n      \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n      \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"cycle\",\n      \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n      \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"random\",\n      \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"sb\",\n    \"summary\": \"Defined a variable used to construct a StringBuffer by concatenating parts of the string s.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes provided.\"\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"A String variable storing the input string for reverseLeftWords functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"s\",\n            \"summary\": \"The input string passed to the method.\",\n            \"relation_to_parent\": \"invocation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"n\",\n            \"summary\": \"The number of elements to reverse in the string.\",\n            \"relation_to_parent\": \"invocation\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"Used to reverse the left part of a string in the method\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Method node\",\n  \"name\": \"reverseLeftWords\",\n  \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"sb\",\n      \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n      \"relation_to_parent\": \"No child nodes provided.\",\n      \"relation\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"Used to reverse the left part of a string in the method\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"No_01_008\",\n    \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"reverseLeftWords\",\n            \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"invocation\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"sb\",\n            \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n            \"relation_to_parent\": \"No child nodes provided.\",\n            \"relation\": \"No child nodes provided.\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"n\",\n            \"summary\": \"Used to reverse the left part of a string in the method\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"invocation\"\n        }\n    ]\n}\n```",
        "{\n  \"type\": \"File\",\n  \"name\": \"No_01_008.java\",\n  \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n  \"children\": [\n    {\n      \"type\": \"Method node\",\n      \"name\": \"reverseLeftWords\",\n      \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"sb\",\n      \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n      \"relation_to_parent\": \"No child nodes provided.\",\n      \"relation\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"Used to reverse the left part of a string in the method\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"nums\",\n    \"summary\": \"Stores a single integer array initialized with values 7, 2, and 4\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"Serves as a parameter for the main() method in the algorithm file, indicating the list of argument values passed to the program.\",\n    \"children\": []\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"deque\",\n    \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"variable res\",\n    \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n    \"children\": []\n}",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_009.maxSlidingWindow.i\",\n  \"summary\": \"Initialize the sliding window loop variable 'i' in the method.\",\n  \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n    \"children\": [],\n    \"relation_to_parent\": \"The variable is part of a for-loop iteration context, representing a dependency on the loop variables\"\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality: Maintains the maximum of a subarray using sliding window optimization.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"k\",\n    \"summary\": \"A variable used in the maxSlidingWindow method to store sliding window parameters.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable deque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm processing step (storage of integers during iteration).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable res\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable i\",\n            \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009.main\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n            \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration)\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableDeque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableResult\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableIndex\",\n            \"summary\": \"A variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_009\",\n  \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n      \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n      \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableDeque\",\n      \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n      \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableResult\",\n      \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n      \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableIndex\",\n      \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n      \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n            \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableDeque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableResult\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableIndex\",\n            \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"queue\",\n    \"summary\": \"A Queue<Integer> container used to store integers in the program.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"queue\",\n            \"summary\": \"The variable to store the Queue data.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"deque\",\n  \"summary\": \"A Deque data structure storing collections of Integer values for operations like insert and remove in O(1) time complexity.\",\n  \"children\": []\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"No_01_010\",\n    \"summary\": \"A method within the algorithm package to encapsulate queue storage functionality, defining a container used to store integers in O(1) time complexity.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"queue\",\n            \"summary\": \"A Queue<Integer> container used to store integers in the program.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"deque\",\n            \"summary\": \"A Deque data structure storing collections of Integer values for operations like insert and remove in O(1) time complexity.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_010.max_value\",\n    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"value\",\n    \"summary\": \"Storing an integer value in the algorithm framework\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"push_back\",\n  \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"value\",\n      \"summary\": \"Stores an integer value in the algorithm framework\",\n      \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"pop_front\",\n    \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_010\",\n    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_010.max_value\",\n            \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"push_back\",\n            \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n            \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"pop_front\",\n            \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n            \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}",
        "{\n  \"type\": \"File\",\n  \"name\": \"algorithm.No_01_010\",\n  \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_010.max_value\",\n      \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n      \"relation_to_parent\": \"Composition\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"push_back\",\n      \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"Parameter\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"pop_front\",\n      \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"Parameter\"\n    }\n  ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"res\",\n    \"summary\": \"Stores an integer value.\",\n    \"children\": [\n        {\n            \"type\": \"Function\",\n            \"name\": \"Integer.MAX_VALUE / 10\",\n            \"summary\": \"Calculates the result of the division expression\",\n            \"relation_to_parent\": \"Invokes a method on the variable 'res'\"\n        }\n    ]\n}",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"bndry\",\n  \"summary\": \"Stores a value of type int that is used in the computation of the `res` variable.\",\n  \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Initialization of a variable 'i' of type 'int' in No_01_011.java, representing a numeric value in the code.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"sign\",\n    \"summary\": \"Computes the sign of the value 1 and associates with the variable 'i'.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"strToInt\",\n            \"summary\": \"Converts a string to an int by invoking a method. Requires the value of 'i' as input.\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' is executed.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"length\",\n            \"summary\": \"Calculates the length of a string by taking the result of 'strToInt'.\",\n            \"relation_to_parent\": \"Invocation: 'length' is invoked on the result of the 'strToInt' method.\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"length\",\n    \"summary\": \"Calculates the length of a string in the context of a method call (str.length())\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"length\",\n            \"summary\": \"A property used to store the result of a string length calculation\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A loop variable that stores an integer value, initially set to 'i' and iterated through to calculate length.\",\n    \"children\": [],\n    \"relation_to_parent\": \"The node represents a loop variable in a Java method, where it stores the value during iteration.\",\n    \"global\": false\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"str\",\n    \"summary\": \"Stores the value of the string input parameter for the strToInt method.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"strToInt\",\n    \"summary\": \"Converts a string to an integer, used for string-to-number parsing in leetcode solutions\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"res\",\n            \"summary\": \"Stores an integer value from the division operation on the input string (strToInt)\",\n            \"relation_to_parent\": \"Invokes a method on the variable 'res'\",\n            \"relation\": \"Invokes\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"bndry\",\n            \"summary\": \"Stores a value of type int derived from the 'res' variable\",\n            \"relation_to_parent\": \"Dependency: 'res' must be initialized before 'bndry' computation\",\n            \"relation\": \"Invokes\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"i\",\n            \"summary\": \"Initialization of a variable 'i' used to determine the sign of the result\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' execution\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"sign\",\n            \"summary\": \"Computes the sign of the value 1 and uses the result from 'i'\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' is executed\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"j\",\n            \"summary\": \"A loop variable used to iterate through characters in the string length calculation\",\n            \"relation_to_parent\": \"Composition: 'j' iterates to compute the length of the string\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"str\",\n            \"summary\": \"Stores the value of the string input parameter for 'strToInt'\",\n            \"relation_to_parent\": \"Dependency on the method's parameter\",\n            \"relation\": \"Use\"\n        },\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_011\",\n    \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\"\n}\n```",
        "{\n  \"type\": \"File\",\n  \"name\": \"No_01_011.java\",\n  \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n  \"children\": [\n    {\n      \"type\": \"Class\",\n      \"name\": \"No_01_011\",\n      \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n      \"relation_to_parent\": \"Direct child of root 'algorithm' class\",\n      \"relation\": \"Composition\"\n    }\n  ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"a\",\n    \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java' (B:/leetcode/algorithm).\",\n    \"children\": []\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"Storing a long value for program execution purposes\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores a long integer value initialized to 1.\",\n    \"children\": []\n}\n```",
        "{  \n    \"type\": \"Variable\",  \n    \"name\": \"i\",  \n    \"summary\": \"Variable holding the loop index from 2 to n\",  \n    \"children\": []  \n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Variable 'n' holds intermediate values of a function 'fib' in the 'algorithm' package, used to compute Fibonacci numbers.\",\n    \"children\": [],\n    \"relation\": \"no children\"\n}\n```",
        "{\n  \"type\": \"Method\",\n  \"name\": \"fib\",\n  \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n  children: [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n      \"relation_to_parent\": \"Part of the algorithm implementation\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Storing a long value for program execution purposes.\",\n      \"relation_to_parent\": \"Part of the algorithm computation logic\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores a long integer value initialized to 1.\",\n      \"relation_to_parent\": \"Intermediate value in Fibonacci computation\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Variable holding the loop index from 2 to n.\",\n      \"relation_to_parent\": \"Loop index for iterative calculation\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_001\",\n    \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"fib\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Inheritance\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n            \"relation_to_parent\": \"Part of the algorithm implementation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Storing a long value for program execution purposes.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores a long integer value initialized to 1.\",\n            \"relation_to_parent\": \"Intermediate value in Fibonacci computation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Variable holding the loop index from 2 to n.\",\n            \"relation_to_parent\": \"Loop index for iterative calculation\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"File\",\n    \"name\": \"No_02_001.java\",\n    \"summary\": \"Computes the nth Fibonacci number using a loop. Uses variables a, b, ans, and i to store intermediate results.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"fib\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop. Dependencies: a, b, ans, and i.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Storing a long value for program execution purposes.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores a long integer value initialized to 1.\",\n            \"relation_to_parent\": \"Intermediate value in Fibonacci computation. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Variable holding the loop index from 2 to n.\",\n            \"relation_to_parent\": \"Loop index for iterative calculation. Dependency: fib method.\"\n        }\n    ]\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"a\",\n  \"summary\": \"Stores the value of 1 or 2 according to computation.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Stores the value of 2.\",\n      \"relation_to_parent\": \"Usage within the computation (computation result)\",\n      \"relation\": \"Dependency (result of computation)\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Computational result of the expression 2\",\n      \"relation_to_parent\": \"Computation result\",\n      \"relation\": \"Composition (result of logical operation)\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"Stores the value of an integer.\",\n    \"children\": []\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"ans\",\n  \"summary\": \"Storing the result of integer calculations from a and b.\",\n  \"children\": []\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A variable of type `int` used to track the loop condition in the nested loop iteration for calculating the number of ways to reach a certain value in the algorithm.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable holding an integer value, used in the function `numWays()` for computation purposes.\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"numWays\",\n  \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores the initialization value of 1\",\n      \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n      \"relation\": \"Composition\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Stores the initial value of 2\",\n      \"relation_to_parent\": \"Dependency (result of initial computation)\",\n      \"relation\": \"Composition\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores the final computation result\",\n      \"relation_to_parent\": \"Composition (result of logical operation)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Tracks the loop iteration index\",\n      \"relation_to_parent\": \"Dependency (loop condition)\",\n      \"relation\": \"Usage\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_002\",\n    \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"numWays\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the initialization value of 1\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the initial value of 2\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the final computation result\",\n            \"relation_to_parent\": \"Composition (result of logical operation)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Tracks the loop iteration index\",\n            \"relation_to_parent\": \"Dependency (loop condition)\",\n            \"relation\": \"Usage\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"File\",\n    \"name\": \"No_02_002.java\",\n    \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n    \"children\": [\n        {\n            \"type\": \"Class\",\n            \"name\": \"No_02_002\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"numWays\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value of 1)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the initialization value of 1\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the initial value of 2\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the final computation result\",\n            \"relation_to_parent\": \"Composition (result of logical operation)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Tracks the loop iteration index\",\n            \"relation_to_parent\": \"Dependency (loop condition)\",\n            \"relation\": \"Usage\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"m\",\n    \"summary\": \"Stores an integer value derived from the length of a string parameter $s$\",\n    \"children\": []\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"n\",\n  \"summary\": \"Stores the value of `p.length()` in the current context.\",\n  \"children\": []\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"f\",\n    \"summary\": \"A boolean array used to store the logical conditions for matching operations.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"m\",\n            \"summary\": \"The size of the rows in the boolean array\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"The size of the columns in the boolean array\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Used as the loop index variable in the algorithm, iterates over the value of 'm' in the given code snippet.\",\n    \"children\": [],\n    \"relation_to_parent\": \"None\",\n    \"relation\": \"Dependency\"\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"Defines an integer variable in the loop context of a for loop, used to iterate through values between 1 and n.\",\n    \"children\": [],\n    \"relation\": {}\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"A string variable that holds the input parameter to the isMatch method in algorithm implementation.\",\n    \"children\": []\n}",
        "```json\n{\n  \"type\": \"Parameter\",\n  \"name\": \"p\",\n  \"summary\": \"a string or parameter used to match the input in the algorithm\",\n  \"children\": [\n    {\n      \"type\": \"Method Parameter\",\n      \"name\": \"isMatch\",\n      \"summary\": \"the method responsible for matching input strings\",\n      \"relation_to_parent\": \"invocation of the isMatch method in the algorithm\"\n    }\n  ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n    \"children\": []\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"p\",\n    \"summary\": \"A variable storing a string pattern for matching functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"s\",\n            \"summary\": \"A string parameter representing a pattern to compare against\",\n            \"relation_to_parent\": \"Dependency: String parameter required by the method\"\n        },\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"p\",\n            \"summary\": \"The pattern string passed to the method for matching\",\n            \"relation_to_parent\": \"Dependency: Pattern variable used to validate input strings\"\n        },\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"i\",\n            \"summary\": \"Index parameter for comparing character positions in the string\",\n            \"relation_to_parent\": \"Dependency: Parameter for character position comparison\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A variable of type int that stores numerical value within the method\",\n    \"children\": []\n}",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"The current node (variable j) is used to store the value of an integer. It is part of the method 'matches' in the 'algorithm' package.\",\n  \"children\": []\n}",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"A string parameter representing a pattern to compare against\",\n            \"relation_to_parent\": \"Dependency: String parameter required by the method\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"The pattern string passed to the method for matching\",\n            \"relation_to_parent\": \"Dependency: Pattern variable used to validate input strings\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"A variable of type int that stores numerical value within the method\",\n            \"relation_to_parent\": \"Dependency: Parameter for character position comparison\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"isMatch\",\n    \"summary\": \"Determines if a string matches a pattern by comparing characters with a loop-based array of boolean values\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"m\",\n            \"summary\": \"Stores the length of the input string $s$\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"Stores the length of the pattern $p$\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"f\",\n            \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        }\n    ]\n}\n```",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the input string $s$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the pattern $p$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    }\n  ]\n}",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the input string $s$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the pattern $p$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality: stores an array of integers in Java (algorithm.No_02_004.java).\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"No child nodes provided.\",\n            \"relation_to_parent\": \"\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"Holds the array of arguments passed to the main method of the algorithm.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"args\",\n            \"summary\": \"Functionality of the main method's parameters. The main method uses 'args' as an array to receive command-line arguments.\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n    \"children\": [\n        {\n            \"type\": \"Parent node type\",\n            \"name\": \"Parent node name\",\n            \"summary\": \"Functionality: stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"children\": [\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"args\",\n                    \"summary\": \"Holds the array of arguments passed to the main method of the algorithm.\",\n                    \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n                    \"relation\": \"Invocation\"\n                }\n            ]\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores an integer value from the array 'nums'.\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"i\",\n  \"summary\": \"Stores integer values in the range from 1 to the array length within a for loop context.\",\n  \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"nums\",\n    \"summary\": \"A Java integer array that stores the input elements for subarray calculations\",\n    \"children\": []\n}",
        "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"maxSubArray\",\n  \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores an integer value derived from the array 'nums' using a nested loop context\",\n      \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n      \"relation_to_parent\": \"Dependency: 'i' is used as the index in the nested loop to process the array elements\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"nums\",\n      \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n      \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\"\n    }\n  ]\n}\n```",
        "{\n    \"type\": \"Class node\",\n    \"name\": \"No_02_004\",\n    \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"main\",\n            \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"maxSubArray\",\n            \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"ans\",\n                    \"summary\": \"Stores an integer value derived from the array 'nums' using a nested loop context\",\n                    \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"i\",\n                    \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                    \"relation_to_parent\": \"Dependency: 'i' is used as the index in the nested loop to process the array elements\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"nums\",\n                    \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n                    \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\"\n                }\n            ]\n        }\n    ]\n}",
        "{\n    \"type\": \"File\",\n    \"name\": \"No_02_004.java\",\n    \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"main\",\n            \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"maxSubArray\",\n            \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"ans\",\n                    \"summary\": \"Stores an integer value derived from the array 'nums' by traversing the array elements\",\n                    \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\",\n                    \"relation\": \"Direct computation\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"i\",\n                    \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                    \"relation_to_parent\": \"Dependency: 'i' is used as the index to iterate through array elements\",\n                    \"relation\": \"Invocation\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"nums\",\n                    \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n                    \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\",\n                    \"relation\": \"Composition\"\n                }\n            ]\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality of the parent node: storing the array of arguments into the method.\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"a\",\n  \"summary\": \"Assigns an integer value to a variable 'a' in Java.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Assigns an integer value to variable 'b' in the same scope.\",\n      \"relation_to_parent\": \"Definition of 'a' in the same method context.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"x\",\n      \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n      \"relation_to_parent\": \"Defined within the same method body as 'a'.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"y\",\n      \"summary\": \"Used to temporarily store numeric values as part of the method processing logic.\",\n      \"relation_to_parent\": \"Defined and used within the method's calculation phase.\"\n    },\n    {\n      \"type\": \"Function\",\n      \"name\": \"translateNum\",\n      \"summary\": \"Translates a number into a string in the method's internal logic.\",\n      \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number.\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"a local int variable used within the loop for calculation purposes.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the integer value of the input variable 'b'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation.\"\n        }\n    ]\n}\n```",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"y\",\n  \"summary\": \"Variables used in the code snippet for calculation (y = num % 10), representing an integer value.\",\n  \"children\": []\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"tmp\",\n  \"summary\": \"Stores a number (int) for translation purposes.\",\n  \"children\": []\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"c\",\n    \"summary\": \"Declared as an integer in the algorithm function, used in an arithmetic operation based on a boolean condition.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"num\",\n    \"summary\": \"Stores a number value.\",\n    \"children\": []\n}",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"translateNum\",\n    \"summary\": \"Translates a number into a string in the method's internal logic\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation.\"\n        },\n        {\n            \"type\": \"Function\",\n            \"name\": \"translateNum\",\n            \"summary\": \"Translates a number into a string in the method's internal logic\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"Storing the array of arguments into the method's internal functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter\",\n            \"summary\": \"Stores the array of arguments in the method's internal logic\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'\",\n            \"relation_to_parent\": \"Dependencies or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable x\",\n            \"summary\": \"Stores the value of 'num' modulo 10\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable y\",\n            \"summary\": \"Stores the integer value returned after modulus operation\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Function translateNum\",\n            \"summary\": \"Translates a number into a string\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_005\",\n    \"summary\": \"Translates a number into a string in the given class.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"translateNum\",\n            \"summary\": \"Translates a number into a string in the method's internal logic\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n        }\n    ]\n}\n```",
        "{\n  \"type\": \"Class\",\n  \"name\": \"No_02_005\",\n  \"summary\": \"Translates a number into a string in the given class.\",\n  \"children\": [\n    {\n      \"type\": \"Method\",\n      \"name\": \"translateNum\",\n      \"summary\": \"Translates a number into a string in the method's internal logic\",\n      \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores the integer value of the input variable 'a'.\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n      \"relation_to_parent\": \"\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"x\",\n      \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n      \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"y\",\n      \"summary\": \"Stores the integer value returned after modulus operation.\",\n      \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"len1\",\n    \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"len2\",\n    \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes provided.\"\n}\n```",
        "{  \n  \"type\": \"Variable\",  \n  \"name\": \"dp\",  \n  \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",  \n  \"children\": []  \n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n    \"children\": [],\n    \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Functionally represents the maximum value in an array loop context, storing integer values during processing.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n    \"children\": [],\n    \"relation\": \"Parent node is referenced as a loop variable in the Java code snippet.\"\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"grid\",\n    \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n    \"children\": []\n}",
        "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"maxValue\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Parent node is referenced as a loop variable in the Java code snippet.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}\n```",
        "{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_02_006\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_02_006.java\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"A String[] array representing the input arguments passed to the main method.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Declares an integer variable storing the length of the longest substring of a given string\",\n    \"children\": []\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n    \"summary\": \"Declares a Set<java.lang.Character> with the functionality of storing characters\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used in the code to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"left\",\n  \"summary\": \"This variable holds the left part of a length of the longest substring algorithm.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"right\",\n      \"summary\": \"This variable holds the right part of a length of the longest substring algorithm.\",\n      \"relation_to_parent\": \"Dependency: Right variable is part of the length of the longest substring algorithm, calculated by left.\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"right\",\n    \"summary\": \"Function or purpose of the variable: Calculation of the length of the longest substring in an input string.\",\n    \"children\": []\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"s\",\n  \"summary\": \"Storing the value of a String parameter passed to the method lengthOfLongestSubstring.\",\n  \"children\": []\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n    \"summary\": \"Declares a Set<java.lang.Character> used to store characters during the longest substring calculation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.main\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node's method and used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node's method and used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Function or purpose of the parent node\",\n    \"children\": [],\n    \"relation\": []\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"a is a variable holding the nth Ugly Number\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"Child node summary (not provided in the input)\",\n      \"relation_to_parent\": \"No children\"\n    }\n  ]\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Variable b is defined as part of the algorithm function, potentially holding a value to be used as a parameter.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"Variable a is initialized from 0, and b is initialized from 0, potentially holding values for a computation function.\",\n            \"relation_to_parent\": \"A dependency (initialization) relationship to the parent node's definition in the Java class.\"\n        }\n    ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"c\",\n    \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n1\",\n    \"summary\": \"Stores the nested integer value computed from the DP array of indices a, b, c.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n2\",\n            \"summary\": \"Derived from dp[b] multiplied by 3, representing a scaled integer value.\",\n            \"relation_to_parent\": \"Dependency: n2 is a child of the parent node and is generated from dp[b] operation.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n3\",\n            \"summary\": \"Derived from dp[c] multiplied by 5, representing a scaled integer value.\",\n            \"relation_to_parent\": \"Dependency: n3 is a child of the parent node and is generated from dp[c] operation.\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n2\",\n    \"summary\": \"Calculates the value of n2 based on dp arrays using multiplication by 2 and 3 respectively.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n3\",\n    \"summary\": \"Calculates the value of dp[c] multiplied by 5, representing a mathematical operation performed in the algorithm.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n1\",\n            \"summary\": \"Derived from dp[a], used in the calculation of the first value in the sequence.\",\n            \"relation_to_parent\": \"Dependency: n1 is used to compute the first value in the sequence.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n2\",\n            \"summary\": \"Derived from dp[b], used to compute the second value in the sequence.\",\n            \"relation_to_parent\": \"Dependency: n2 is used to compute the second value in the sequence.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n3\",\n            \"summary\": \"Derived from dp[c], used in the calculation of the final value of the sequence.\",\n            \"relation_to_parent\": \"Composition: n3 is part of the sequence and depends on dp[c]\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n    \"children\": []\n}",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_008.nthUglyNumber\",\n    \"summary\": \"Calculates the nth Ugly Number using an optimized dynamic programming approach with a nested integer array.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"c\",\n            \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n            \"relation_to_parent\": \"Dependency\"\n        }\n    ]\n}\n```",
        "{\n  \"type\": \"Class node\",\n  \"name\": \"algorithm.No_02_008\",\n  \"summary\": \"Defined as a class containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"c\",\n      \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"a\",\n      \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"b\",\n      \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"i\",\n      \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n      \"relation_to_parent\": \"Dependency\"\n    }\n  ]\n}",
        "```json\n{\n  \"type\": \"File node\",\n  \"name\": \"algorithm.No_02_008.java\",\n  \"summary\": \"A class file containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Class node\",\n      \"name\": \"algorithm.No_02_008\",\n      \"summary\": \"Defined as a class containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n      \"children\": [\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"c\",\n          \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"a\",\n          \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"b\",\n          \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"n\",\n          \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"i\",\n          \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n          \"relation_to_parent\": \"Dependency\"\n        }\n      ]\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable storing the integer value 3\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"method\",\n    \"name\": \"main\",\n    \"summary\": \"Storing method arguments as Java array\",\n    \"children\": [],\n    \"relation_to_parent\": \"Child variable holding method arguments\",\n    \"relation\": \"Usage as parameter to the main method\"\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"temp1\",\n    \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp1\",\n            \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        }\n    ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"temp2\",\n    \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n    \"children\": []\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"flag\",\n    \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"flag\",\n            \"summary\": \"Functionality of the flag variable in the algorithm, used to track a boolean state or condition\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\"\n        }\n    ]\n}",
        "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\",\n    \"relation\": \"\"\n}",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"i\",\n  \"summary\": \"Used to iterate through a sequence or array, with initial value 2 and incrementing to n.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"n\",\n      \"summary\": \"The upper limit of the loop range, representing the final value in the iteration sequence.\",\n      \"relation_to_parent\": \"Dependency: 'i' is the loop variable, defining the range from 2 to n.\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A local integer variable that holds the loop index 'i - 1' in the nested loop 'for (int j = i - 1; j <= 6 * (i - 1); j')'.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"k\",\n    \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable used to calculate dice probability in the function dicesProbability(int n).\",\n    \"children\": [],\n    \"relation\": \"No children provided.\"\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"dicesProbability\",\n    \"summary\": \"Calculates dice probability using a double[] array for numeric processing.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp1\",\n            \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp2\",\n            \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n            \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"flag\",\n            \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n            \"relation_to_parent\": \"Dependency: This is a local variable used in conditional logic\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n            \"relation_to_parent\": \"Dependency: This is used in nested loops to define the range of iteration\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"The upper limit of the loop range for the dice probability calculation.\",\n            \"relation_to_parent\": \"Dependency: Defined through the 'i' loop variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"j\",\n            \"summary\": \"A local integer variable holding the loop index 'i - 1' in the nested loop\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"k\",\n            \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"A method storing the Java array of arguments for the dice probability calculation, serving as a placeholder for the main method's parameter usage.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"A variable storing the integer value 3 as the upper limit in the loop for the dice probability calculation.\",\n            \"relation_to_parent\": \"Child variable holding method arguments\",\n            \"relation\": \"Usage as parameter to the main method\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_009\",\n    \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for a given upper limit n.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"main\",\n            \"summary\": \"A method storing the Java array of arguments for the dice probability calculation, serving as a placeholder for the main method's parameter usage.\",\n            \"relation_to_parent\": \"Child variable holding method arguments\",\n            \"relation\": \"Usage as parameter to the main method\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"dicesProbability\",\n            \"summary\": \"Calculates dice probability using a double[] array for numeric processing.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"temp1\",\n                    \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n                    \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"temp2\",\n                    \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n                    \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"flag\",\n                    \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n                    \"relation_to_parent\": \"Dependency: This is a local variable used in conditional logic\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"i\",\n                    \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n                    \"relation_to_parent\": \"Dependency: This is used in nested loops to define the range of iteration\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"n\",\n                    \"summary\": \"The upper limit of the loop range for the dice probability calculation.\",\n                    \"relation_to_parent\": \"Dependency: Defined through the 'i' loop variable\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"j\",\n                    \"summary\": \"A local integer variable holding the loop index 'i - 1' in the nested loop\",\n                    \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"k\",\n                    \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n                    \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n                    \"relation\": \"None\"\n                }\n            ]\n        }\n    ]\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm\",\n  \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for a given upper limit n.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"No_02_009\",\n      \"summary\": \"A class representing an algorithm for calculating dice probabilities, specific to the No_02_009 implementation.\",\n      \"relation_to_parent\": \"Definition of the core algorithm\",\n      \"relation\": \"Explicit class definition\"\n    },\n    {\n      \"type\": \"Method\",\n      \"name\": \"main\",\n      \"summary\": \"Storing the Java array of arguments used for the dice probability calculation as a placeholder for the main method parameter usage.\",\n      \"relation_to_parent\": \"Dependency: This method holds the function signature parameters passed to the main method\",\n      \"relation\": \"Parameter reference\"\n    },\n    {\n      \"type\": \"Method\",\n      \"name\": \"dicesProbability\",\n      \"summary\": \"Calculates the dice probability by iterating through the range of possible outcomes and computing their probabilities.\",\n      \"children\": [\n        {\n          \"type\": \"Variable\",\n          \"name\": \"temp1\",\n          \"summary\": \"Stores a double array representing numeric data used during the probability computation.\",\n          \"relation_to_parent\": \"Dependency: This array is used as a numerical accumulator during the dice probability calculation\",\n          \"relation\": \"None\"\n        },\n        {\n          \"type\": \"Variable\",\n          \"name\": \"temp2\",\n          \"summary\": \"Stores data for computation in a double array format used during leetcode algorithm processing.\",\n          \"relation_to_parent\": \"Dependency: This double array is used to store intermediate results for probability calculations\",\n          \"relation\": \"None\"\n        },\n        {\n          \"type\": \"Variable\",\n          \"name\": \"flag\",\n          \"summary\": \"A boolean value used as a flag in conditional logic to determine the outcome of dice probability calculations.\",\n          \"relation_to_parent\": \"Dependency: This variable is defined within the dice probability method\",\n          \"relation\": \"None\"\n        }\n      ]\n    }\n  ]\n}\n```",
        "{\n  \"type\": \"Variable\",\n  \"name\": \"min\",\n  \"summary\": \"Sets the minimum value in an algorithm context, initialized as Integer.MAX_VALUE\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"Integer.MAX_VALUE\",\n      \"summary\": \"The maximum integer value used to represent bounds in algorithmic logic\",\n      \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n    }\n  ]\n}",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"max\",\n    \"summary\": \"Stores the maximum value in the algorithm context.\",\n    \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm.\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"a loop variable used to iterate over an array of prices\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"no child nodes present\",\n      \"relation_to_parent\": \"no child relationships\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"prices\",\n    \"summary\": \"A variable used to store an array of prices for the maxProfit method in algorithmic programming.\",\n    \"children\": []\n}\n```",
        "{\n    \"type\": \"Method\",\n    \"name\": \"maxProfit\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the minimum value in an algorithm context, initialized as Integer.MAX_VALUE\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context.\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm.\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}",
        "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"No_02_010\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the initialization value for the min variable in an algorithm context\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"File node\",\n    \"name\": \"No_02_010.java\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the initialization value for the min variable in an algorithm context\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}",
        "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"board\",\n  \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board in the provided code snippet.\",\n  \"children\": []\n}\n```",
        "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"word\",\n    \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n    \"children\": []\n}\n```",
        "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"exist\",\n  \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"board\",\n      \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n      \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n      \"relation\": \"Storage & inference\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"word\",\n      \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n      \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n      \"relation\": \"Input & computation\"\n    }\n  ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"No_03_001\",\n    \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"board\",\n            \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n            \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n            \"relation\": \"Storage & inference\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"word\",\n            \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n            \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n            \"relation\": \"Input & computation\"\n        }\n    ]\n}\n```",
        "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"No_03_001\",\n    \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"board\",\n            \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n            \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n            \"relation\": \"Storage & inference\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"word\",\n            \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n            \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n            \"relation\": \"Input & computation\"\n        }\n    ]\n}\n```",
        "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm\",\n    \"summary\": \"A class representing an algorithm for algorithmic logic, defining fundamental components for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_001.java\",\n            \"summary\": \"Implements string space replacement functionality for Java code.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_003\",\n            \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_003.ListNode.val\",\n                    \"summary\": \"Stores an integer value representing the content of a linked list node\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_003.ListNode.next\",\n                    \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n                    \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n                    \"relation\": \"Dependency\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005\",\n            \"summary\": \"A class defining a linked list node storing an integer value in the algorithm logic, serving as a foundational structure for linked list operations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_005.ListNode.val\",\n                    \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor\",\n                    \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_005.ListNode.next\",\n                    \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n                    \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_006\",\n            \"summary\": \"A class that initializes a stack to store integers in the global scope as a variable.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n                    \"relation_to_parent\": \"Composition of the stack storage interface\",\n                    \"relation\": \"Invoked by A (as a method or instance)\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n                    \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n                    \"relation\": \"Used within the stack context\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"A variable storing the result of a stack operation (pop, push, or validation).\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"A variable storing the result of a stack operation (pop, push, or validation).\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_007.java\",\n            \"summary\": \"A class representing an algorithmic object containing numerical values and random pointers (cycle and random) for computational logic and dependencies.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.Node\",\n                    \"summary\": \"A class storing numerical values and random pointers (cycle and random) for algorithmic dependencies.\",\n                    \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.val\",\n                    \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n                    \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.cycle\",\n                    \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n                    \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.random\",\n                    \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_001.java\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_001.Fibonacci\",\n                    \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_001.FibonacciVariable\",\n                    \"summary\": \"Stores the value of the algorithm's Fibonacci computation.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_002.java\",\n            \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.strToInt\",\n                    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n                    \"relation_to_parent\": \"Composition\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.push_back\",\n                    \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Parameter\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.pop_front\",\n                    \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Parameter\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_003.java\",\n            \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.maxSubArray\",\n                    \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.ans\",\n                            \"summary\": \"Stores the integer value derived from the array 'nums' by traversing the array elements\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Direct computation\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.i\",\n                            \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Invocation\"\n                        }\n                     ]\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.ans\",\n                    \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n                    \"relation_to_parent\": \"Composition\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.pop\",\n                    \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.B.pop\",\n                            \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n                            \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_004.java\",\n            \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_004.maxSubArray\",\n                    \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_004.ans\",\n                            \"summary\": \"Stores the integer value derived from the array 'nums' by traversing the array elements\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Direct computation\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_004.i\",\n                            \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Invocation\"\n                        }\n                    ]\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_004.variables\",\n                    \"summary\": \"Variables stored in the algorithm context for computation purposes (used to traverse or store intermediate results).\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.\",\n            \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for the No_02_009 implementation.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"No_02_009.main\",\n                    \"summary\": \"Storing the Java array of arguments used for the dice probability calculation as a placeholder for the main method parameter usage.\",\n                    \"relation_to_parent\": \"Dependency: This method holds the function signature parameters passed to the main method\",\n                    \"relation\": \"Parameter reference\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"No_02_009.dicesProbability\",\n                    \"summary\": \"Calculates the dice probability by iterating through the range of possible outcomes and computing their probabilities.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.i\",\n                            \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n                            \"relation_to_parent\": \"Dependency: This variable is used as the value for looping in the algorithm\",\n                            \"relation\": \"None\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.temp1\",\n                            \"summary\": \"Stores a double array representing numeric data used during the probability computation.\",\n                            \"relation_to_parent\": \"Dependency: This double array is used as a numerical accumulator during the dice probability calculation\",\n                            \"relation\": \"None\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.temp2\",\n                            \"summary\": \"Stores data for computation in a double array format used for leetcode algorithm processing.\",\n                            \"relation_to_parent\": \"Dependency: This double array is used for storing intermediate results in a leetcode algorithm context\",\n                            \"relation\": \"None\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"No_02_007.java\",\n            \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n                    \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n                    \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                }\n            ]\n        }\n    ]\n}"
    ],
    "ids": [
        "5",
        "6",
        "4",
        "3",
        "2",
        "1",
        "10",
        "11",
        "13",
        "12",
        "9",
        "16",
        "17",
        "18",
        "15",
        "14",
        "8",
        "7",
        "21",
        "22",
        "23",
        "25",
        "24",
        "27",
        "26",
        "20",
        "19",
        "31",
        "32",
        "34",
        "33",
        "30",
        "37",
        "38",
        "39",
        "36",
        "35",
        "29",
        "28",
        "42",
        "43",
        "44",
        "46",
        "45",
        "47",
        "48",
        "49",
        "41",
        "40",
        "53",
        "54",
        "55",
        "57",
        "56",
        "52",
        "60",
        "61",
        "59",
        "58",
        "51",
        "50",
        "67",
        "65",
        "66",
        "64",
        "63",
        "62",
        "72",
        "71",
        "76",
        "77",
        "78",
        "79",
        "74",
        "75",
        "73",
        "70",
        "69",
        "68",
        "82",
        "83",
        "84",
        "85",
        "87",
        "86",
        "88",
        "81",
        "80",
        "93",
        "94",
        "95",
        "96",
        "97",
        "98",
        "92",
        "91",
        "90",
        "89",
        "103",
        "104",
        "105",
        "106",
        "102",
        "101",
        "100",
        "99",
        "111",
        "112",
        "113",
        "114",
        "110",
        "109",
        "108",
        "107",
        "120",
        "121",
        "122",
        "123",
        "124",
        "118",
        "119",
        "126",
        "127",
        "128",
        "129",
        "125",
        "117",
        "116",
        "115",
        "134",
        "133",
        "132",
        "137",
        "138",
        "136",
        "135",
        "131",
        "130",
        "142",
        "145",
        "146",
        "147",
        "148",
        "149",
        "150",
        "144",
        "143",
        "141",
        "140",
        "139",
        "155",
        "156",
        "157",
        "158",
        "159",
        "160",
        "154",
        "153",
        "152",
        "151",
        "164",
        "167",
        "168",
        "169",
        "170",
        "166",
        "165",
        "163",
        "162",
        "161",
        "175",
        "176",
        "177",
        "178",
        "179",
        "180",
        "181",
        "182",
        "174",
        "173",
        "172",
        "171",
        "187",
        "186",
        "190",
        "191",
        "192",
        "193",
        "194",
        "195",
        "196",
        "189",
        "188",
        "185",
        "184",
        "183",
        "201",
        "202",
        "203",
        "204",
        "200",
        "199",
        "198",
        "197",
        "208",
        "209",
        "207",
        "206",
        "205",
        "0"
    ],
    "metadatas": [
        {
            "node_id": 5,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001.replaceSpace.sb",
                "name": "sb",
                "parentId": 3,
                "File": "No_01_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 22,
                    "endColumn": 45
                },
                "rawType": "java.lang.StringBuilder"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"sb\",\n    \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes found\",\n    \"relation\": \"None\"\n}"
        },
        {
            "node_id": 6,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001.replaceSpace.i",
                "name": "i",
                "parentId": 3,
                "File": "No_01_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 16,
                    "endColumn": 20
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```"
        },
        {
            "node_id": 4,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001.replaceSpace.s",
                "name": "s",
                "parentId": 3,
                "File": "No_01_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 31,
                    "endColumn": 38
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"replaceSpace\",\n    \"summary\": \"Implements string space replacement functionality\",\n    \"children\": []\n}"
        },
        {
            "node_id": 3,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001.replaceSpace",
                "name": "replaceSpace",
                "parentId": 2,
                "File": "No_01_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 16,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "java.lang.String",
                    "names": "s"
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"replaceSpace\",\n    \"summary\": \"Implements string space replacement functionality\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"sb\",\n            \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n            \"relation_to_parent\": \"No child nodes found\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"i\",\n            \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n            \"relation_to_parent\": \"No child nodes found\",\n            \"relation\": \"None\"\n        }\n    ]\n}"
        },
        {
            "node_id": 2,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001",
                "name": "No_01_001",
                "parentId": 1,
                "rawType": "algorithm.No_01_001",
                "location": {
                    "startLine": 5,
                    "endLine": 17,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Class\",\n  \"name\": \"No_01_001\",\n  \"summary\": \"Implements string space replacement functionality\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"sb\",\n      \"summary\": \"A variable that holds a reference to a StringBuilder instance in Java, used to initialize a new string buffer.\",\n      \"relation_to_parent\": \"None\",\n      \"relation\": \"No child nodes found\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Loops through elements in 's' by iterating over an integer variable.\",\n      \"relation_to_parent\": \"None\",\n      \"relation\": \"No child nodes found\"\n    }\n  ]\n}"
        },
        {
            "node_id": 1,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_001.java",
                "name": "No_01_001.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"File\",\n    \"name\": \"No_01_001.java\",\n    \"summary\": \"Implements string space replacement functionality for Java code.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 10,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.ListNode.val",
                "name": "val",
                "parentId": 9,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 20,
                    "endLine": 20,
                    "startColumn": 12,
                    "endColumn": 14
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode.val\",\n    \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n    \"children\": [],\n    \"relation\": \"No child nodes available\",\n    \"additionalBin\": {\n        \"binNum\": 1,\n        \"binPath\": \"B:/leetcode/algorithm\"\n    }\n}\n```"
        },
        {
            "node_id": 11,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.ListNode.next",
                "name": "next",
                "parentId": 9,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 21,
                    "endLine": 21,
                    "startColumn": 17,
                    "endColumn": 20
                },
                "rawType": "algorithm.No_01_002.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"loop\",\n            \"summary\": \"Reference to the parent loop node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 13,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.ListNode.ListNode.x",
                "name": "x",
                "parentId": 12,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 22,
                    "endLine": 22,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"Storing the value of 'x' (int) as a field in the ListNode class, used to initialize new ListNode instances.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 12,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.ListNode.ListNode",
                "name": "ListNode",
                "parentId": 9,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 22,
                    "endLine": 22,
                    "startColumn": 8,
                    "endColumn": 35
                },
                "parameter": {
                    "types": "int",
                    "names": "x"
                },
                "rawType": "algorithm.No_01_002.ListNode.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"No child nodes available\",\n            \"relation\": \"No child nodes available\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 9,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.ListNode",
                "name": "ListNode",
                "parentId": 8,
                "rawType": "algorithm.No_01_002.ListNode",
                "location": {
                    "startLine": 19,
                    "endLine": 23,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"No child nodes available\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}"
        },
        {
            "node_id": 16,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.reversePrint.len",
                "name": "len",
                "parentId": 14,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 26,
                    "endLine": 26,
                    "startColumn": 12,
                    "endColumn": 18
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"len\",\n    \"summary\": \"A variable that holds the length of an array being referenced\",\n    \"children\": []\n}"
        },
        {
            "node_id": 17,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.reversePrint.now",
                "name": "now",
                "parentId": 14,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 27,
                    "endLine": 27,
                    "startColumn": 17,
                    "endColumn": 26
                },
                "rawType": "algorithm.No_01_002.ListNode"
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_002.ListNode\",\n  \"summary\": \"A method that initializes a new instance of the ListNode class by setting a field 'val' to a given integer 'x'.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_002.ListNode.val\",\n      \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n      \"relation_to_parent\": \"No child nodes available\",\n      \"relation\": \"No child nodes available\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_002.ListNode.next\",\n      \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n      \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}"
        },
        {
            "node_id": 18,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.reversePrint.a",
                "name": "a",
                "parentId": 14,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 32,
                    "endLine": 32,
                    "startColumn": 14,
                    "endColumn": 29
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"a\",\n    \"summary\": \"A variable declared as an int[] array in the 'No_01_002.java' file. It holds the initial value of an integer array with 'len' set.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 15,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.reversePrint.head",
                "name": "head",
                "parentId": 14,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 25,
                    "endLine": 25,
                    "startColumn": 30,
                    "endColumn": 42
                },
                "rawType": "algorithm.No_01_002.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_002.ListNode\",\n    \"summary\": \"A method in the ListNode class that initializes a new instance by setting a field 'val' to a given integer 'x'.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node.\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 14,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.reversePrint",
                "name": "reversePrint",
                "parentId": 8,
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 25,
                    "endLine": 39,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "algorithm.No_01_002.ListNode",
                    "names": "head"
                },
                "rawType": "int[]"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"algorithm.No_01_002.ListNode.reversePrint\",\n    \"summary\": \"Reverses the elements of a linked list by iterating through the list and constructing an integer array from the values.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node.\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}"
        },
        {
            "node_id": 8,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002",
                "name": "No_01_002",
                "parentId": 7,
                "rawType": "algorithm.No_01_002",
                "location": {
                    "startLine": 5,
                    "endLine": 41,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "innerType": [
                    9
                ]
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"algorithm.No_01_002\",\n    \"summary\": \"A class representing linked list operations, with a public method reversePrint that initializes nodes via setting 'val' field.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 7,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_002.java",
                "name": "No_01_002.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"algorithm.No_01_002\",\n    \"summary\": \"A class representing linked list operations, with a public method reversePrint that initializes nodes via setting 'val' field.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"No child nodes available\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 21,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.A",
                "name": "A",
                "parentId": 20,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 19,
                    "endColumn": 19
                },
                "rawType": "java.util.Stack<java.lang.Integer>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"A\",\n    \"summary\": \"A Stack<Integer> variable with type definition.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 22,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.B",
                "name": "B",
                "parentId": 20,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 16,
                    "endLine": 16,
                    "startColumn": 19,
                    "endColumn": 19
                },
                "rawType": "java.util.Stack<java.lang.Integer>"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"B\",\n  \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class\",\n  \"children\": [],\n  \"relation_to_parent\": \"None\",\n  \"relation\": \"None\"\n}"
        },
        {
            "node_id": 23,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.No_01_003",
                "name": "No_01_003",
                "parentId": 20,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 18,
                    "endLine": 21,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "algorithm.No_01_003.No_01_003"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A public method that initializes two stacks for storing integers\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<Integer> variable storing integer values\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> storing integers\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 25,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.appendTail.value",
                "name": "value",
                "parentId": 24,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 23,
                    "endLine": 23,
                    "startColumn": 27,
                    "endColumn": 35
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"value\",\n    \"summary\": \"Stores the value of an int type variable.\",\n    \"children\": [],\n    \"relation_to_parent\": \"None\",\n    \"relation\": \"None\"\n}"
        },
        {
            "node_id": 24,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.appendTail",
                "name": "appendTail",
                "parentId": 20,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 23,
                    "endLine": 25,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "value"
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"appendTail\",\n    \"summary\": \"Add an int to a list using A.push() to store the value contextually.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"value\",\n            \"summary\": \"Stores the value of an int type variable.\",\n            \"relation_to_parent\": \"Direct parameter definition to the method appendTail\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 27,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.deleteHead.result",
                "name": "result",
                "parentId": 26,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 31,
                    "endLine": 31,
                    "startColumn": 12,
                    "endColumn": 44
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"result\",\n    \"summary\": \"Stores the final value returned by processing operations on 'B', which handles delete head operations.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 26,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.deleteHead",
                "name": "deleteHead",
                "parentId": 20,
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 27,
                    "endLine": 36,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method node\",\n    \"name\": \"deleteHead\",\n    \"summary\": \"Handles delete head operations on a queue by popping elements and storing the result after processing remaining elements via a temporary container 'B'.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"result\",\n            \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n            \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n            \"relation\": \"Property / containment\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 20,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003",
                "name": "No_01_003",
                "parentId": 19,
                "rawType": "algorithm.No_01_003",
                "location": {
                    "startLine": 7,
                    "endLine": 37,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "File": "No_01_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<Integer> variable storing integer values with type definition.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"deleteHead\",\n            \"summary\": \"Handles delete head operations on a queue by popping elements from A and storing the result after processing remaining elements via a temporary container 'B'.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"result\",\n                    \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n                    \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n                    \"relation\": \"Property / containment\"\n                }\n            ]\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 19,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_003.java",
                "name": "No_01_003.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_003\",\n    \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A Stack<java.lang.Integer> variable storing integer values with type definition.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A Stack<java.lang.Integer> that stores integers in the Java class.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"deleteHead\",\n            \"summary\": \"Handles delete head operations on a queue by popping elements from A and storing the result after processing remaining elements via a temporary container 'B'.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"result\",\n                    \"summary\": \"Stores the final value returned by processing 'B' (a queue) during delete head operations, which is the destination of the operations.\",\n                    \"relation_to_parent\": \"Dependency / invocation: result is a local variable holding the final output of the delete-head operation on 'B'.\",\n                    \"relation\": \"Property / containment\"\n                }\n            ]\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 31,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.ListNode.val",
                "name": "val",
                "parentId": 30,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 10,
                    "endColumn": 12
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode.val\",\n    \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 32,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.ListNode.next",
                "name": "next",
                "parentId": 30,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 18,
                    "endLine": 18,
                    "startColumn": 15,
                    "endColumn": 18
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"looping reference\",\n            \"summary\": \"References the parent node algorithm.No_01_005.ListNode\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}"
        },
        {
            "node_id": 34,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.ListNode.ListNode.x",
                "name": "x",
                "parentId": 33,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 19,
                    "endLine": 19,
                    "startColumn": 15,
                    "endColumn": 19
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"x\",\n  \"summary\": \"A reference to a ListNode instance variable that holds an integer value in the algorithm component.\",\n  \"children\": [],\n  \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n}"
        },
        {
            "node_id": 33,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.ListNode.ListNode",
                "name": "ListNode",
                "parentId": 30,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 19,
                    "endLine": 19,
                    "startColumn": 6,
                    "endColumn": 33
                },
                "parameter": {
                    "types": "int",
                    "names": "x"
                },
                "rawType": "algorithm.No_01_005.ListNode.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm component.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 30,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.ListNode",
                "name": "ListNode",
                "parentId": 29,
                "rawType": "algorithm.No_01_005.ListNode",
                "location": {
                    "startLine": 16,
                    "endLine": 20,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_005.ListNode\",\n  \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm component.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.val\",\n      \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n      \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.next\",\n      \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 37,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.reverseList.prev",
                "name": "prev",
                "parentId": 35,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 23,
                    "endLine": 23,
                    "startColumn": 17,
                    "endColumn": 27
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_005.ListNode\",\n  \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.val\",\n      \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_005.ListNode.next\",\n      \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n      \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n    }\n  ]\n}"
        },
        {
            "node_id": 38,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.reverseList.curr",
                "name": "curr",
                "parentId": 35,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 24,
                    "endLine": 24,
                    "startColumn": 17,
                    "endColumn": 27
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "{\n    \"type\": \"Variable type\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 39,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.reverseList.temp",
                "name": "temp",
                "parentId": 35,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 25,
                    "endLine": 25,
                    "startColumn": 17,
                    "endColumn": 27
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 36,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.reverseList.head",
                "name": "head",
                "parentId": 35,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 22,
                    "endLine": 22,
                    "startColumn": 32,
                    "endColumn": 44
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005.ListNode\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute.\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 35,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.reverseList",
                "name": "reverseList",
                "parentId": 29,
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 22,
                    "endLine": 33,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "algorithm.No_01_005.ListNode",
                    "names": "head"
                },
                "rawType": "algorithm.No_01_005.ListNode"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"reverseList\",\n    \"summary\": \"A constructor method for initializing a linked list node storing an integer value in the algorithm logic\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}"
        },
        {
            "node_id": 29,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005",
                "name": "No_01_005",
                "parentId": 28,
                "rawType": "algorithm.No_01_005",
                "location": {
                    "startLine": 5,
                    "endLine": 34,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "innerType": [
                    30
                ]
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"algorithm.No_01_005\",\n    \"summary\": \"A class defining a linked list node storing an integer value in the algorithm component, serving as a foundational structure for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 28,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_005.java",
                "name": "No_01_005.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_005\",\n    \"summary\": \"A class defining a linked list node storing an integer value in the algorithm component, serving as a foundational structure for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.val\",\n            \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor.\",\n            \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005.ListNode.next\",\n            \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n            \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 42,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.A",
                "name": "A",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 19,
                    "endColumn": 19
                },
                "rawType": "java.util.Stack<java.lang.Integer>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"A\",\n    \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A is an alias or reference to the stack variable used for storing integers in the global environment.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n            \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n            \"relation\": \"Used within the stack context\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 43,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.B",
                "name": "B",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 21,
                    "endColumn": 21
                },
                "rawType": "java.util.Stack<java.lang.Integer>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"B\",\n    \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing a stack container for integers.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing the parent stack container.\",\n            \"relation_to_parent\": \"Dependency: A is the parent variable storing B's context.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 44,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.No_01_006",
                "name": "No_01_006",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": true,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 10,
                    "endLine": 14,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "algorithm.No_01_006.No_01_006"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"No_01_006\",\n    \"summary\": \"Initialize a data structure to store integers in the global scope.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"A\",\n            \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"B\",\n            \"summary\": \"A variable of type java.util.Stack<java.lang.Integer> representing a stack container for integers.\",\n            \"relation_to_parent\": \"Dependency: A is the parent variable storing B's context.\",\n            \"relation\": \"Used within the stack context\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 46,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.push.x",
                "name": "x",
                "parentId": 45,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 16,
                    "endLine": 16,
                    "startColumn": 21,
                    "endColumn": 25
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"A parameter used in the 'push' method to store data. The variable 'x' is an int and is part of the algorithm's logic.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 45,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.push",
                "name": "push",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": true,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 16,
                    "endLine": 21,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "x"
                },
                "rawType": "void"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"push\",\n    \"summary\": \"Stores elements in the list A and performs validation on elements with B to prevent exceeding bounds.\",\n    \"children\": [\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"x\",\n            \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n            \"relation\": \"Variable parameter in the 'push' method\"\n        }\n    ]\n}"
        },
        {
            "node_id": 47,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.pop",
                "name": "pop",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": true,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 23,
                    "endLine": 27,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"pop\",\n    \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"B.pop\",\n            \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop operation.\",\n            \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 48,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.top",
                "name": "top",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": true,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 29,
                    "endLine": 31,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"top\",\n    \"summary\": \"Returns the value from A.peek() with public method signature.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 49,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.min",
                "name": "min",
                "parentId": 41,
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": true,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 33,
                    "endLine": 35,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"The method returns the minimum value with the rawType of int.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"The method references B.peek() with no further specified dependencies or invocations.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 41,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006",
                "name": "No_01_006",
                "parentId": 40,
                "rawType": "algorithm.No_01_006",
                "location": {
                    "startLine": 7,
                    "endLine": 36,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Class node\",\n  \"name\": \"No_01_006\",\n  \"summary\": \"A class that initializes a stack to store integers in the global scope.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"A\",\n      \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n      \"relation_to_parent\": \"Composition of the stack storage interface\",\n      \"relation\": \"Invoked by A (as a method or instance)\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"B\",\n      \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n      \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n      \"relation\": \"Used within the stack context\"\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"push\",\n      \"summary\": \"Stores elements in A and validates against B to prevent bounds.\",\n      \"children\": [\n        {\n          \"type\": \"Parameter node\",\n          \"name\": \"x\",\n          \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n          \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n          \"relation\": \"Variable parameter in the 'push' method\"\n        }\n      ]\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"pop\",\n      \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n      \"children\": [\n        {\n          \"type\": \"Child node type\",\n          \"name\": \"B.pop\",\n          \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n          \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n        }\n      ]\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"top\",\n      \"summary\": \"Returns the value from A.peek() with public method signature.\",\n      \"children\": []\n    },\n    {\n      \"type\": \"Method node\",\n      \"name\": \"min\",\n      \"summary\": \"References B.peek() with no further specified dependencies or invocations.\",\n      \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n    }\n  ]\n}"
        },
        {
            "node_id": 40,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_006.java",
                "name": "No_01_006.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Class node\",\n    \"name\": \"No_01_006\",\n    \"summary\": \"A class that initializes a stack to store integers in the global scope as a variable.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"A\",\n            \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n            \"relation_to_parent\": \"Composition of the stack storage interface\",\n            \"relation\": \"Invoked by A (as a method or instance)\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"B\",\n            \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n            \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n            \"relation\": \"Used within the stack context\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"push\",\n            \"summary\": \"Stores elements in A and validates against B to prevent bounds.\",\n            \"children\": [\n                {\n                    \"type\": \"Parameter node\",\n                    \"name\": \"x\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"pop\",\n            \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"B.pop\",\n                    \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n                    \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"top\",\n            \"summary\": \"Returns the value from A.peek() with public method signature.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"min\",\n            \"summary\": \"References B.peek() with no further specified dependencies or invocations.\",\n            \"relation_to_parent\": \"No explicit dependency or invocation relationship to the parent node.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 53,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node.val",
                "name": "val",
                "parentId": 52,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 26,
                    "endLine": 26,
                    "startColumn": 12,
                    "endColumn": 14
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"val\",\n    \"summary\": \"A declaration of a variable of type int, used for storing numerical values in the program.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"Defined in the 'No_01_007.java' file and used as a variable in the logic of the program.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 54,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node.next",
                "name": "next",
                "parentId": 52,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 27,
                    "endLine": 27,
                    "startColumn": 13,
                    "endColumn": 16
                },
                "rawType": "algorithm.No_01_007.Node"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"next\",\n    \"summary\": \"Represents a field of type algorithm.No_01_007.Node that references the parent structure (node 52) for algorithmic operations.\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"Defines a dependency relation to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure (node 52) for logical cycles and data dependencies.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 55,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node.random",
                "name": "random",
                "parentId": 52,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 28,
                    "endLine": 28,
                    "startColumn": 13,
                    "endColumn": 18
                },
                "rawType": "algorithm.No_01_007.Node"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"random\",\n    \"summary\": \"Represents a reference to a Node instance, acting as a dependency in an algorithm context.\",\n    \"children\": [\n        {\n            \"type\": \"Typed\",\n            \"name\": \"循环引用节点 52\",\n            \"summary\": \"Used as a dependency or invocation context in the Node class to reference internal components.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 57,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node.Node.val",
                "name": "val",
                "parentId": 56,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 30,
                    "endLine": 30,
                    "startColumn": 20,
                    "endColumn": 26
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Node\",\n    \"name\": \"val\",\n    \"summary\": \"A variable of type int storing the input value for the Node class constructor.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 56,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node.Node",
                "name": "Node",
                "parentId": 52,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 30,
                    "endLine": 34,
                    "startColumn": 8,
                    "endColumn": 8
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "val"
                },
                "rawType": "algorithm.No_01_007.Node.Node"
            },
            "semantic_description": "{\n  \"type\": \"Method\",\n  \"name\": \"Node\",\n  \"summary\": \"A constructor method in the Node class that initializes a Node object by taking an int argument 'val'.\",\n  \"children\": [\n    {\n      \"type\": \"Node\",\n      \"name\": \"val\",\n      \"summary\": \"A variable of type int storing the input value for the Node class constructor.\",\n      \"relation_to_parent\": \"This node is a child of the constructor method and represents the 'val' parameter.\",\n      \"relation\": \"Dependency or invocation between child and parent node\"\n    }\n  ]\n}"
        },
        {
            "node_id": 52,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.Node",
                "name": "Node",
                "parentId": 51,
                "rawType": "algorithm.No_01_007.Node",
                "location": {
                    "startLine": 25,
                    "endLine": 35,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Class\",\n    \"name\": \"Node\",\n    \"summary\": \"A class representing an algorithmic object that stores numerical values and references other data structures (cycle structure, random pointers) for computational logic and data dependencies.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"A declaration of a variable of type int, used as a direct dependency in the parent node's logic flow\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency relation to node 52, indicating that it is a child of the algorithm node representing the cycle structure\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure (node 52) for logical cycles and data dependencies.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"Represents a reference to a Node instance, acting as a dependency in an algorithm context\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}"
        },
        {
            "node_id": 60,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.copyRandomList.cur",
                "name": "cur",
                "parentId": 58,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 41,
                    "endLine": 41,
                    "startColumn": 14,
                    "endColumn": 23
                },
                "rawType": "algorithm.No_01_007.Node"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"cur\",\n  \"summary\": \"A variable holding a direct dependency in the algorithm logic, initialized from the 'head' node for computation.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"val\",\n      \"summary\": \"A local variable of type int representing the algorithmic value being computed\",\n      \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n    },\n    {\n      \"type\": \"Typed\",\n      \"name\": \"cycle\",\n      \"summary\": \"A dependency to node 52, representing the cycle structure in the algorithm's computational model\",\n      \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"random\",\n      \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 61,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.copyRandomList.map",
                "name": "map",
                "parentId": 58,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 42,
                    "endLine": 42,
                    "startColumn": 23,
                    "endColumn": 43
                },
                "rawType": "java.util.Map<algorithm.No_01_007.Node,algorithm.No_01_007.Node>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"map\",\n    \"summary\": \"A Java Map that stores references to specific nodes of type Node.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Node\",\n            \"summary\": \"A Node object representing a specific entity in the algorithm.\",\n            \"relation_to_parent\": \"Dependency or invocation between child and parent node.\",\n            \"relation\": \"Part of the Map structuring two types of nodes\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 59,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.copyRandomList.head",
                "name": "head",
                "parentId": 58,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 37,
                    "endLine": 37,
                    "startColumn": 31,
                    "endColumn": 39
                },
                "rawType": "algorithm.No_01_007.Node"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"copyRandomList\",\n    \"summary\": \"A method that copies a linked list as a composition of data dependencies, storing 'val', 'cycle', and 'random' for algorithmic logic.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent structure\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency relation to node 52, indicating a child of the algorithm node representing cycle structure\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles and data dependencies.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"Represents a reference to a Node instance, acting as a dependency for algorithm execution\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 58,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.copyRandomList",
                "name": "copyRandomList",
                "parentId": 51,
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 37,
                    "endLine": 54,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "algorithm.No_01_007.Node",
                    "names": "head"
                },
                "rawType": "algorithm.No_01_007.Node"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"copyRandomList\",\n    \"summary\": \"A method that copies a linked list as a composition of data dependencies, storing 'val', 'cycle', and 'random' for algorithmic logic.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"cur\",\n            \"summary\": \"A variable holding a direct dependency in the algorithm logic, initialized from the 'head' node for computation.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency to node 52, representing the cycle structure in the algorithm's computational model\",\n            \"relation_to_parent\": \"Dependencies: The cycle node is a composition of the parent structure for logical cycles\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"random\",\n            \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Typed\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent structure\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 51,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007",
                "name": "No_01_007",
                "parentId": 50,
                "rawType": "algorithm.No_01_007",
                "location": {
                    "startLine": 23,
                    "endLine": 55,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "innerType": [
                    52
                ]
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_007\",\n    \"summary\": \"A class representing an algorithmic object containing numerical values and references to other nodes (cycle and random pointers) for computational logic and dependencies.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Node\",\n            \"summary\": \"A class storing numerical values and random pointers (cycle and random), forming a linked list structure for algorithmic dependencies.\",\n            \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"val\",\n            \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n            \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"cycle\",\n            \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n            \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"random\",\n            \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 50,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_007.java",
                "name": "No_01_007.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_01_007.java\",\n  \"summary\": \"A class representing an algorithmic object containing numerical values and random pointers (cycle and random) for computational logic and dependencies.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Node\",\n      \"summary\": \"A class storing numerical values and random pointers (cycle and random), forming a linked list structure for algorithmic dependencies.\",\n      \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"val\",\n      \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n      \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"cycle\",\n      \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n      \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"random\",\n      \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 67,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008.reverseLeftWords.sb",
                "name": "sb",
                "parentId": 64,
                "File": "No_01_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 22,
                    "endColumn": 70
                },
                "rawType": "java.lang.StringBuilder"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"sb\",\n    \"summary\": \"Defined a variable used to construct a StringBuffer by concatenating parts of the string s.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes provided.\"\n}\n```"
        },
        {
            "node_id": 65,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008.reverseLeftWords.s",
                "name": "s",
                "parentId": 64,
                "File": "No_01_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 35,
                    "endColumn": 42
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"A String variable storing the input string for reverseLeftWords functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"s\",\n            \"summary\": \"The input string passed to the method.\",\n            \"relation_to_parent\": \"invocation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Parameter\",\n            \"name\": \"n\",\n            \"summary\": \"The number of elements to reverse in the string.\",\n            \"relation_to_parent\": \"invocation\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}"
        },
        {
            "node_id": 66,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008.reverseLeftWords.n",
                "name": "n",
                "parentId": 64,
                "File": "No_01_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 45,
                    "endColumn": 49
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"Used to reverse the left part of a string in the method\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 64,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008.reverseLeftWords",
                "name": "reverseLeftWords",
                "parentId": 63,
                "File": "No_01_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 10,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "java.lang.String int",
                    "names": "s n"
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Method node\",\n  \"name\": \"reverseLeftWords\",\n  \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"sb\",\n      \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n      \"relation_to_parent\": \"No child nodes provided.\",\n      \"relation\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"Used to reverse the left part of a string in the method\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 63,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008",
                "name": "No_01_008",
                "parentId": 62,
                "rawType": "algorithm.No_01_008",
                "location": {
                    "startLine": 5,
                    "endLine": 11,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"No_01_008\",\n    \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"reverseLeftWords\",\n            \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"invocation\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"sb\",\n            \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n            \"relation_to_parent\": \"No child nodes provided.\",\n            \"relation\": \"No child nodes provided.\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"n\",\n            \"summary\": \"Used to reverse the left part of a string in the method\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"invocation\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 62,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_008.java",
                "name": "No_01_008.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"File\",\n  \"name\": \"No_01_008.java\",\n  \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n  \"children\": [\n    {\n      \"type\": \"Method node\",\n      \"name\": \"reverseLeftWords\",\n      \"summary\": \"Define a method to reverse the left part of a string by concatenating reversed substrings.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"sb\",\n      \"summary\": \"Defined a variable to store the constructed StringBuffer by concatenating parts of the string s.\",\n      \"relation_to_parent\": \"No child nodes provided.\",\n      \"relation\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"Used to reverse the left part of a string in the method\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"invocation\"\n    }\n  ]\n}"
        },
        {
            "node_id": 72,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.main.nums",
                "name": "nums",
                "parentId": 70,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 14,
                    "endColumn": 36
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"nums\",\n    \"summary\": \"Stores a single integer array initialized with values 7, 2, and 4\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 71,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.main.args",
                "name": "args",
                "parentId": 70,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 28,
                    "endColumn": 40
                },
                "rawType": "java.lang.String[]"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"Serves as a parameter for the main() method in the algorithm file, indicating the list of argument values passed to the program.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 76,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.deque",
                "name": "deque",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 23,
                    "endColumn": 48
                },
                "rawType": "java.util.Deque<java.lang.Integer>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"deque\",\n    \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 77,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.res",
                "name": "res",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 18,
                    "endLine": 18,
                    "startColumn": 14,
                    "endColumn": 47
                },
                "rawType": "int[]"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"variable res\",\n    \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 78,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.i",
                "name": "i",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 20,
                    "endLine": 20,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_009.maxSlidingWindow.i\",\n  \"summary\": \"Initialize the sliding window loop variable 'i' in the method.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 79,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.i",
                "name": "i",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 28,
                    "endLine": 28,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n    \"children\": [],\n    \"relation_to_parent\": \"The variable is part of a for-loop iteration context, representing a dependency on the loop variables\"\n}"
        },
        {
            "node_id": 74,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.nums",
                "name": "nums",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 41,
                    "endColumn": 50
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality: Maintains the maximum of a subarray using sliding window optimization.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 75,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow.k",
                "name": "k",
                "parentId": 73,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 53,
                    "endColumn": 57
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"k\",\n    \"summary\": \"A variable used in the maxSlidingWindow method to store sliding window parameters.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 73,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.maxSlidingWindow",
                "name": "maxSlidingWindow",
                "parentId": 69,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 13,
                    "endLine": 39,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "int[] int",
                    "names": "nums k"
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable deque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm processing step (storage of integers during iteration).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable res\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"variable i\",\n            \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 70,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.main",
                "name": "main",
                "parentId": 69,
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 9,
                    "endLine": 12,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String[]",
                    "names": "args"
                },
                "rawType": "void"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009.main\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n            \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration)\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableDeque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableResult\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableIndex\",\n            \"summary\": \"A variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 69,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009",
                "name": "No_01_009",
                "parentId": 68,
                "rawType": "algorithm.No_01_009",
                "location": {
                    "startLine": 8,
                    "endLine": 40,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm.No_01_009\",\n  \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n      \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n      \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableDeque\",\n      \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n      \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableResult\",\n      \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n      \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_009.variableIndex\",\n      \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n      \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n    }\n  ]\n}"
        },
        {
            "node_id": 68,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_009.java",
                "name": "No_01_009.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_009\",\n    \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.maxSlidingWindow\",\n            \"summary\": \"Initialize and implement the max sliding window algorithm to find the maximum of a subarray in an array of integers.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (storage and processing of integers during iteration).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableDeque\",\n            \"summary\": \"A variable storing a Deque<Integer> data structure for storing integers during iteration.\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableResult\",\n            \"summary\": \"Initializes an array of integers for a sliding window problem in the algorithm.\",\n            \"relation_to_parent\": \"A dependent part of the algorithm logic (result array initialized during the iteration phase).\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_009.variableIndex\",\n            \"summary\": \"A local variable used in a loop to iterate over an array, with type int\",\n            \"relation_to_parent\": \"A dependency in the for-loop iteration context, representing a dependency on the array iteration variables.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 82,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.queue",
                "name": "queue",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "java.util.Queue<java.lang.Integer>"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"queue\",\n    \"summary\": \"A Queue<Integer> container used to store integers in the program.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"queue\",\n            \"summary\": \"The variable to store the Queue data.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}"
        },
        {
            "node_id": 83,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.deque",
                "name": "deque",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": true,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "java.util.Deque<java.lang.Integer>"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"deque\",\n  \"summary\": \"A Deque data structure storing collections of Integer values for operations like insert and remove in O(1) time complexity.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 84,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.No_01_010",
                "name": "No_01_010",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": true,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 10,
                    "endLine": 13,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "algorithm.No_01_010.No_01_010"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"No_01_010\",\n    \"summary\": \"A method within the algorithm package to encapsulate queue storage functionality, defining a container used to store integers in O(1) time complexity.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"queue\",\n            \"summary\": \"A Queue<Integer> container used to store integers in the program.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"deque\",\n            \"summary\": \"A Deque data structure storing collections of Integer values for operations like insert and remove in O(1) time complexity.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}"
        },
        {
            "node_id": 85,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.max_value",
                "name": "max_value",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 15,
                    "endLine": 17,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_010.max_value\",\n    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 87,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.push_back.value",
                "name": "value",
                "parentId": 86,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 19,
                    "endLine": 19,
                    "startColumn": 26,
                    "endColumn": 34
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"value\",\n    \"summary\": \"Storing an integer value in the algorithm framework\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```"
        },
        {
            "node_id": 86,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.push_back",
                "name": "push_back",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 19,
                    "endLine": 25,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "value"
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"push_back\",\n  \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"value\",\n      \"summary\": \"Stores an integer value in the algorithm framework\",\n      \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 88,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.pop_front",
                "name": "pop_front",
                "parentId": 81,
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 27,
                    "endLine": 35,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "",
                    "names": ""
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"pop_front\",\n    \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 81,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010",
                "name": "No_01_010",
                "parentId": 80,
                "rawType": "algorithm.No_01_010",
                "location": {
                    "startLine": 7,
                    "endLine": 36,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_01_010\",\n    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_010.max_value\",\n            \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"push_back\",\n            \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n            \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"pop_front\",\n            \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n            \"relation_to_parent\": \"The parameter 'value' references a variable holding the integer to be pushed.\",\n            \"relation\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}"
        },
        {
            "node_id": 80,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_010.java",
                "name": "No_01_010.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"File\",\n  \"name\": \"algorithm.No_01_010\",\n  \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"algorithm.No_01_010.max_value\",\n      \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n      \"relation_to_parent\": \"Composition\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"push_back\",\n      \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"Parameter\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"pop_front\",\n      \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n      \"relation_to_parent\": \"Dependency\",\n      \"relation\": \"Parameter\"\n    }\n  ]\n}"
        },
        {
            "node_id": 93,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.res",
                "name": "res",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 12,
                    "endColumn": 18
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"res\",\n    \"summary\": \"Stores an integer value.\",\n    \"children\": [\n        {\n            \"type\": \"Function\",\n            \"name\": \"Integer.MAX_VALUE / 10\",\n            \"summary\": \"Calculates the result of the division expression\",\n            \"relation_to_parent\": \"Invokes a method on the variable 'res'\"\n        }\n    ]\n}"
        },
        {
            "node_id": 94,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.bndry",
                "name": "bndry",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 21,
                    "endColumn": 50
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"bndry\",\n  \"summary\": \"Stores a value of type int that is used in the computation of the `res` variable.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 95,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.i",
                "name": "i",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 12,
                    "endColumn": 16
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Initialization of a variable 'i' of type 'int' in No_01_011.java, representing a numeric value in the code.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 96,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.sign",
                "name": "sign",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 19,
                    "endColumn": 26
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"sign\",\n    \"summary\": \"Computes the sign of the value 1 and associates with the variable 'i'.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"strToInt\",\n            \"summary\": \"Converts a string to an int by invoking a method. Requires the value of 'i' as input.\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' is executed.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"length\",\n            \"summary\": \"Calculates the length of a string by taking the result of 'strToInt'.\",\n            \"relation_to_parent\": \"Invocation: 'length' is invoked on the result of the 'strToInt' method.\",\n            \"relation\": \"Composition\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 97,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.length",
                "name": "length",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 29,
                    "endColumn": 49
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"length\",\n    \"summary\": \"Calculates the length of a string in the context of a method call (str.length())\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"length\",\n            \"summary\": \"A property used to store the result of a string length calculation\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 98,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.j",
                "name": "j",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 23,
                    "endLine": 23,
                    "startColumn": 16,
                    "endColumn": 20
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A loop variable that stores an integer value, initially set to 'i' and iterated through to calculate length.\",\n    \"children\": [],\n    \"relation_to_parent\": \"The node represents a loop variable in a Java method, where it stores the value during iteration.\",\n    \"global\": false\n}\n```"
        },
        {
            "node_id": 92,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt.str",
                "name": "str",
                "parentId": 91,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 24,
                    "endColumn": 33
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"str\",\n    \"summary\": \"Stores the value of the string input parameter for the strToInt method.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 91,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.strToInt",
                "name": "strToInt",
                "parentId": 90,
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 33,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "java.lang.String",
                    "names": "str"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"strToInt\",\n    \"summary\": \"Converts a string to an integer, used for string-to-number parsing in leetcode solutions\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"res\",\n            \"summary\": \"Stores an integer value from the division operation on the input string (strToInt)\",\n            \"relation_to_parent\": \"Invokes a method on the variable 'res'\",\n            \"relation\": \"Invokes\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"bndry\",\n            \"summary\": \"Stores a value of type int derived from the 'res' variable\",\n            \"relation_to_parent\": \"Dependency: 'res' must be initialized before 'bndry' computation\",\n            \"relation\": \"Invokes\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"i\",\n            \"summary\": \"Initialization of a variable 'i' used to determine the sign of the result\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' execution\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"sign\",\n            \"summary\": \"Computes the sign of the value 1 and uses the result from 'i'\",\n            \"relation_to_parent\": \"Dependency: 'i' must be initialized before 'strToInt' is executed\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"j\",\n            \"summary\": \"A loop variable used to iterate through characters in the string length calculation\",\n            \"relation_to_parent\": \"Composition: 'j' iterates to compute the length of the string\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"str\",\n            \"summary\": \"Stores the value of the string input parameter for 'strToInt'\",\n            \"relation_to_parent\": \"Dependency on the method's parameter\",\n            \"relation\": \"Use\"\n        },\n    ]\n}\n```"
        },
        {
            "node_id": 90,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011",
                "name": "No_01_011",
                "parentId": 89,
                "rawType": "algorithm.No_01_011",
                "location": {
                    "startLine": 5,
                    "endLine": 34,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_01_011.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_01_011\",\n    \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\"\n}\n```"
        },
        {
            "node_id": 89,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_01_011.java",
                "name": "No_01_011.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"File\",\n  \"name\": \"No_01_011.java\",\n  \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n  \"children\": [\n    {\n      \"type\": \"Class\",\n      \"name\": \"No_01_011\",\n      \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n      \"relation_to_parent\": \"Direct child of root 'algorithm' class\",\n      \"relation\": \"Composition\"\n    }\n  ]\n}"
        },
        {
            "node_id": 103,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib.a",
                "name": "a",
                "parentId": 101,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 13,
                    "endColumn": 17
                },
                "rawType": "long"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"a\",\n    \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java' (B:/leetcode/algorithm).\",\n    \"children\": []\n}"
        },
        {
            "node_id": 104,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib.b",
                "name": "b",
                "parentId": 101,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 20,
                    "endColumn": 24
                },
                "rawType": "long"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"Storing a long value for program execution purposes\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}"
        },
        {
            "node_id": 105,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib.ans",
                "name": "ans",
                "parentId": 101,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 13,
                    "endColumn": 19
                },
                "rawType": "long"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores a long integer value initialized to 1.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 106,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib.i",
                "name": "i",
                "parentId": 101,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "{  \n    \"type\": \"Variable\",  \n    \"name\": \"i\",  \n    \"summary\": \"Variable holding the loop index from 2 to n\",  \n    \"children\": []  \n}"
        },
        {
            "node_id": 102,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib.n",
                "name": "n",
                "parentId": 101,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Variable 'n' holds intermediate values of a function 'fib' in the 'algorithm' package, used to compute Fibonacci numbers.\",\n    \"children\": [],\n    \"relation\": \"no children\"\n}\n```"
        },
        {
            "node_id": 101,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.fib",
                "name": "fib",
                "parentId": 100,
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 22,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "n"
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Method\",\n  \"name\": \"fib\",\n  \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n  children: [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n      \"relation_to_parent\": \"Part of the algorithm implementation\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Storing a long value for program execution purposes.\",\n      \"relation_to_parent\": \"Part of the algorithm computation logic\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores a long integer value initialized to 1.\",\n      \"relation_to_parent\": \"Intermediate value in Fibonacci computation\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Variable holding the loop index from 2 to n.\",\n      \"relation_to_parent\": \"Loop index for iterative calculation\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}"
        },
        {
            "node_id": 100,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001",
                "name": "No_02_001",
                "parentId": 99,
                "rawType": "algorithm.No_02_001",
                "location": {
                    "startLine": 5,
                    "endLine": 23,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_001\",\n    \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"fib\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"Inheritance\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n            \"relation_to_parent\": \"Part of the algorithm implementation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Storing a long value for program execution purposes.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores a long integer value initialized to 1.\",\n            \"relation_to_parent\": \"Intermediate value in Fibonacci computation\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Variable holding the loop index from 2 to n.\",\n            \"relation_to_parent\": \"Loop index for iterative calculation\",\n            \"relation\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 99,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_001.java",
                "name": "No_02_001.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"File\",\n    \"name\": \"No_02_001.java\",\n    \"summary\": \"Computes the nth Fibonacci number using a loop. Uses variables a, b, ans, and i to store intermediate results.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"fib\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop. Dependencies: a, b, ans, and i.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores a value of type long. Defined in 'No_02_001.java'.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Storing a long value for program execution purposes.\",\n            \"relation_to_parent\": \"Part of the algorithm computation logic. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores a long integer value initialized to 1.\",\n            \"relation_to_parent\": \"Intermediate value in Fibonacci computation. Dependency: fib method.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Variable holding the loop index from 2 to n.\",\n            \"relation_to_parent\": \"Loop index for iterative calculation. Dependency: fib method.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 111,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays.a",
                "name": "a",
                "parentId": 109,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 12,
                    "endColumn": 16
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"a\",\n  \"summary\": \"Stores the value of 1 or 2 according to computation.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Stores the value of 2.\",\n      \"relation_to_parent\": \"Usage within the computation (computation result)\",\n      \"relation\": \"Dependency (result of computation)\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Computational result of the expression 2\",\n      \"relation_to_parent\": \"Computation result\",\n      \"relation\": \"Composition (result of logical operation)\"\n    }\n  ]\n}"
        },
        {
            "node_id": 112,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays.b",
                "name": "b",
                "parentId": 109,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"Stores the value of an integer.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 113,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays.ans",
                "name": "ans",
                "parentId": 109,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 26,
                    "endColumn": 32
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"ans\",\n  \"summary\": \"Storing the result of integer calculations from a and b.\",\n  \"children\": []\n}"
        },
        {
            "node_id": 114,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays.i",
                "name": "i",
                "parentId": 109,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 14,
                    "endLine": 14,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A variable of type `int` used to track the loop condition in the nested loop iteration for calculating the number of ways to reach a certain value in the algorithm.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 110,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays.n",
                "name": "n",
                "parentId": 109,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 23,
                    "endColumn": 27
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable holding an integer value, used in the function `numWays()` for computation purposes.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 109,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.numWays",
                "name": "numWays",
                "parentId": 108,
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 20,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "n"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"numWays\",\n  \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores the initialization value of 1\",\n      \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n      \"relation\": \"Composition\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Stores the initial value of 2\",\n      \"relation_to_parent\": \"Dependency (result of initial computation)\",\n      \"relation\": \"Composition\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores the final computation result\",\n      \"relation_to_parent\": \"Composition (result of logical operation)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Tracks the loop iteration index\",\n      \"relation_to_parent\": \"Dependency (loop condition)\",\n      \"relation\": \"Usage\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 108,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002",
                "name": "No_02_002",
                "parentId": 107,
                "rawType": "algorithm.No_02_002",
                "location": {
                    "startLine": 5,
                    "endLine": 21,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_002.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_002\",\n    \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"numWays\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the initialization value of 1\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the initial value of 2\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the final computation result\",\n            \"relation_to_parent\": \"Composition (result of logical operation)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Tracks the loop iteration index\",\n            \"relation_to_parent\": \"Dependency (loop condition)\",\n            \"relation\": \"Usage\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 107,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_002.java",
                "name": "No_02_002.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"File\",\n    \"name\": \"No_02_002.java\",\n    \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n    \"children\": [\n        {\n            \"type\": \"Class\",\n            \"name\": \"No_02_002\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value for computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"numWays\",\n            \"summary\": \"Calculates the number of ways to reach a certain value using dynamic programming principles.\",\n            \"relation_to_parent\": \"Dependency (initialization value of 1)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the initialization value of 1\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the initial value of 2\",\n            \"relation_to_parent\": \"Dependency (result of initial computation)\",\n            \"relation\": \"Composition\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the final computation result\",\n            \"relation_to_parent\": \"Composition (result of logical operation)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"Tracks the loop iteration index\",\n            \"relation_to_parent\": \"Dependency (loop condition)\",\n            \"relation\": \"Usage\"\n        }\n    ]\n}"
        },
        {
            "node_id": 120,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.m",
                "name": "m",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 12,
                    "endColumn": 25
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"m\",\n    \"summary\": \"Stores an integer value derived from the length of a string parameter $s$\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 121,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.n",
                "name": "n",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 12,
                    "endColumn": 25
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"n\",\n  \"summary\": \"Stores the value of `p.length()` in the current context.\",\n  \"children\": []\n}"
        },
        {
            "node_id": 122,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.f",
                "name": "f",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 20,
                    "endColumn": 48
                },
                "rawType": "boolean[][]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"f\",\n    \"summary\": \"A boolean array used to store the logical conditions for matching operations.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"m\",\n            \"summary\": \"The size of the rows in the boolean array\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"The size of the columns in the boolean array\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 123,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.i",
                "name": "i",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 12,
                    "endLine": 12,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Used as the loop index variable in the algorithm, iterates over the value of 'm' in the given code snippet.\",\n    \"children\": [],\n    \"relation_to_parent\": \"None\",\n    \"relation\": \"Dependency\"\n}\n```"
        },
        {
            "node_id": 124,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.j",
                "name": "j",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 21,
                    "endColumn": 25
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"Defines an integer variable in the loop context of a for loop, used to iterate through values between 1 and n.\",\n    \"children\": [],\n    \"relation\": {}\n}\n```"
        },
        {
            "node_id": 118,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.s",
                "name": "s",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 27,
                    "endColumn": 34
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"A string variable that holds the input parameter to the isMatch method in algorithm implementation.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 119,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch.p",
                "name": "p",
                "parentId": 117,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 37,
                    "endColumn": 44
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parameter\",\n  \"name\": \"p\",\n  \"summary\": \"a string or parameter used to match the input in the algorithm\",\n  \"children\": [\n    {\n      \"type\": \"Method Parameter\",\n      \"name\": \"isMatch\",\n      \"summary\": \"the method responsible for matching input strings\",\n      \"relation_to_parent\": \"invocation of the isMatch method in the algorithm\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 126,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.matches.s",
                "name": "s",
                "parentId": 125,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 29,
                    "endLine": 29,
                    "startColumn": 27,
                    "endColumn": 34
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"s\",\n    \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 127,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.matches.p",
                "name": "p",
                "parentId": 125,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 29,
                    "endLine": 29,
                    "startColumn": 37,
                    "endColumn": 44
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"p\",\n    \"summary\": \"A variable storing a string pattern for matching functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"s\",\n            \"summary\": \"A string parameter representing a pattern to compare against\",\n            \"relation_to_parent\": \"Dependency: String parameter required by the method\"\n        },\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"p\",\n            \"summary\": \"The pattern string passed to the method for matching\",\n            \"relation_to_parent\": \"Dependency: Pattern variable used to validate input strings\"\n        },\n        {\n            \"type\": \"Method parameter\",\n            \"name\": \"i\",\n            \"summary\": \"Index parameter for comparing character positions in the string\",\n            \"relation_to_parent\": \"Dependency: Parameter for character position comparison\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 128,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.matches.i",
                "name": "i",
                "parentId": 125,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 29,
                    "endLine": 29,
                    "startColumn": 47,
                    "endColumn": 51
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A variable of type int that stores numerical value within the method\",\n    \"children\": []\n}"
        },
        {
            "node_id": 129,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.matches.j",
                "name": "j",
                "parentId": 125,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 29,
                    "endLine": 29,
                    "startColumn": 54,
                    "endColumn": 58
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"The current node (variable j) is used to store the value of an integer. It is part of the method 'matches' in the 'algorithm' package.\",\n  \"children\": []\n}"
        },
        {
            "node_id": 125,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.matches",
                "name": "matches",
                "parentId": 116,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 29,
                    "endLine": 37,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "java.lang.String java.lang.String int int",
                    "names": "s p i j"
                },
                "rawType": "boolean"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"A string parameter representing a pattern to compare against\",\n            \"relation_to_parent\": \"Dependency: String parameter required by the method\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"The pattern string passed to the method for matching\",\n            \"relation_to_parent\": \"Dependency: Pattern variable used to validate input strings\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter name\",\n            \"summary\": \"A variable of type int that stores numerical value within the method\",\n            \"relation_to_parent\": \"Dependency: Parameter for character position comparison\"\n        }\n    ]\n}"
        },
        {
            "node_id": 117,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.isMatch",
                "name": "isMatch",
                "parentId": 116,
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 27,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "java.lang.String java.lang.String",
                    "names": "s p"
                },
                "rawType": "boolean"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"isMatch\",\n    \"summary\": \"Determines if a string matches a pattern by comparing characters with a loop-based array of boolean values\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"m\",\n            \"summary\": \"Stores the length of the input string $s$\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"Stores the length of the pattern $p$\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"f\",\n            \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n            \"relation_to_parent\": \"Dependency (used to determine array size)\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 116,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003",
                "name": "No_02_003",
                "parentId": 115,
                "rawType": "algorithm.No_02_003",
                "location": {
                    "startLine": 5,
                    "endLine": 38,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_003.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the input string $s$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the pattern $p$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\"\n    }\n  ]\n}"
        },
        {
            "node_id": 115,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_003.java",
                "name": "No_02_003.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"Functionality to determine if a string matches a pattern using the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A boolean array used to store the logical conditions for matching operations\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the input string $s$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"A variable storing the length of the pattern $p$\",\n      \"relation_to_parent\": \"Dependency (used to determine array size)\",\n      \"relation\": \"Dependency\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 134,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.main.nums",
                "name": "nums",
                "parentId": 132,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 14,
                    "endColumn": 47
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality: stores an array of integers in Java (algorithm.No_02_004.java).\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"No child nodes provided.\",\n            \"relation_to_parent\": \"\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 133,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.main.args",
                "name": "args",
                "parentId": 132,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 28,
                    "endColumn": 40
                },
                "rawType": "java.lang.String[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"Holds the array of arguments passed to the main method of the algorithm.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"args\",\n            \"summary\": \"Functionality of the main method's parameters. The main method uses 'args' as an array to receive command-line arguments.\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 132,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.main",
                "name": "main",
                "parentId": 131,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 8,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String[]",
                    "names": "args"
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n    \"children\": [\n        {\n            \"type\": \"Parent node type\",\n            \"name\": \"Parent node name\",\n            \"summary\": \"Functionality: stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"children\": [\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"args\",\n                    \"summary\": \"Holds the array of arguments passed to the main method of the algorithm.\",\n                    \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n                    \"relation\": \"Invocation\"\n                }\n            ]\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 137,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.maxSubArray.ans",
                "name": "ans",
                "parentId": 135,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 12,
                    "endColumn": 24
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores an integer value from the array 'nums'.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 138,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.maxSubArray.i",
                "name": "i",
                "parentId": 135,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"i\",\n  \"summary\": \"Stores integer values in the range from 1 to the array length within a for loop context.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 136,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.maxSubArray.nums",
                "name": "nums",
                "parentId": 135,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 27,
                    "endColumn": 36
                },
                "rawType": "int[]"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"nums\",\n    \"summary\": \"A Java integer array that stores the input elements for subarray calculations\",\n    \"children\": []\n}"
        },
        {
            "node_id": 135,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.maxSubArray",
                "name": "maxSubArray",
                "parentId": 131,
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 9,
                    "endLine": 16,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int[]",
                    "names": "nums"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"maxSubArray\",\n  \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"ans\",\n      \"summary\": \"Stores an integer value derived from the array 'nums' using a nested loop context\",\n      \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n      \"relation_to_parent\": \"Dependency: 'i' is used as the index in the nested loop to process the array elements\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"nums\",\n      \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n      \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 131,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004",
                "name": "No_02_004",
                "parentId": 130,
                "rawType": "algorithm.No_02_004",
                "location": {
                    "startLine": 5,
                    "endLine": 17,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_004.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Class node\",\n    \"name\": \"No_02_004\",\n    \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"main\",\n            \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"maxSubArray\",\n            \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"ans\",\n                    \"summary\": \"Stores an integer value derived from the array 'nums' using a nested loop context\",\n                    \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"i\",\n                    \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                    \"relation_to_parent\": \"Dependency: 'i' is used as the index in the nested loop to process the array elements\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"nums\",\n                    \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n                    \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\"\n                }\n            ]\n        }\n    ]\n}"
        },
        {
            "node_id": 130,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_004.java",
                "name": "No_02_004.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"File\",\n    \"name\": \"No_02_004.java\",\n    \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Method node\",\n            \"name\": \"main\",\n            \"summary\": \"Stores an array of integers in Java (algorithm.No_02_004.java).\",\n            \"relation_to_parent\": \"Dependency: 'args' is a child of the main method's parameters, representing the array argument input to the algorithm.\",\n            \"relation\": \"Invocation\"\n        },\n        {\n            \"type\": \"Method node\",\n            \"name\": \"maxSubArray\",\n            \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n            \"children\": [\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"ans\",\n                    \"summary\": \"Stores an integer value derived from the array 'nums' by traversing the array elements\",\n                    \"relation_to_parent\": \"Dependency: ans is directly computed from 'nums' by traversing the array\",\n                    \"relation\": \"Direct computation\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"i\",\n                    \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                    \"relation_to_parent\": \"Dependency: 'i' is used as the index to iterate through array elements\",\n                    \"relation\": \"Invocation\"\n                },\n                {\n                    \"type\": \"Variable node\",\n                    \"name\": \"nums\",\n                    \"summary\": \"A Java integer array storing input elements for subarray calculations\",\n                    \"relation_to_parent\": \"Composition: 'nums' serves as the input array for the algorithm\",\n                    \"relation\": \"Composition\"\n                }\n            ]\n        }\n    ]\n}"
        },
        {
            "node_id": 142,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.main.args",
                "name": "args",
                "parentId": 141,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 28,
                    "endColumn": 40
                },
                "rawType": "java.lang.String[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Functionality of the parent node: storing the array of arguments into the method.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 145,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.a",
                "name": "a",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 12,
                    "endColumn": 16
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"a\",\n  \"summary\": \"Assigns an integer value to a variable 'a' in Java.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Assigns an integer value to variable 'b' in the same scope.\",\n      \"relation_to_parent\": \"Definition of 'a' in the same method context.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"x\",\n      \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n      \"relation_to_parent\": \"Defined within the same method body as 'a'.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"y\",\n      \"summary\": \"Used to temporarily store numeric values as part of the method processing logic.\",\n      \"relation_to_parent\": \"Defined and used within the method's calculation phase.\"\n    },\n    {\n      \"type\": \"Function\",\n      \"name\": \"translateNum\",\n      \"summary\": \"Translates a number into a string in the method's internal logic.\",\n      \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number.\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 146,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.b",
                "name": "b",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"b\",\n    \"summary\": \"a local int variable used within the loop for calculation purposes.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```"
        },
        {
            "node_id": 147,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.x",
                "name": "x",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 26,
                    "endColumn": 26
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"x\",\n    \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Stores the integer value of the input variable 'b'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 148,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.y",
                "name": "y",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 29,
                    "endColumn": 40
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"y\",\n  \"summary\": \"Variables used in the code snippet for calculation (y = num % 10), representing an integer value.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 149,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.tmp",
                "name": "tmp",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 14,
                    "endLine": 14,
                    "startColumn": 16,
                    "endColumn": 31
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"tmp\",\n  \"summary\": \"Stores a number (int) for translation purposes.\",\n  \"children\": []\n}"
        },
        {
            "node_id": 150,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.c",
                "name": "c",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 16,
                    "endColumn": 55
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"c\",\n    \"summary\": \"Declared as an integer in the algorithm function, used in an arithmetic operation based on a boolean condition.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 144,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum.num",
                "name": "num",
                "parentId": 143,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 35,
                    "endColumn": 41
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"num\",\n    \"summary\": \"Stores a number value.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 143,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.translateNum",
                "name": "translateNum",
                "parentId": 140,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 9,
                    "endLine": 21,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "int",
                    "names": "num"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"translateNum\",\n    \"summary\": \"Translates a number into a string in the method's internal logic\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation.\"\n        },\n        {\n            \"type\": \"Function\",\n            \"name\": \"translateNum\",\n            \"summary\": \"Translates a number into a string in the method's internal logic\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 141,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.main",
                "name": "main",
                "parentId": 140,
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 8,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String[]",
                    "names": "args"
                },
                "rawType": "void"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"Storing the array of arguments into the method's internal functionality.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Parameter\",\n            \"summary\": \"Stores the array of arguments in the method's internal logic\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'\",\n            \"relation_to_parent\": \"Dependencies or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable x\",\n            \"summary\": \"Stores the value of 'num' modulo 10\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Variable y\",\n            \"summary\": \"Stores the integer value returned after modulus operation\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Function translateNum\",\n            \"summary\": \"Translates a number into a string\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        }\n    ]\n}"
        },
        {
            "node_id": 140,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005",
                "name": "No_02_005",
                "parentId": 139,
                "rawType": "algorithm.No_02_005",
                "location": {
                    "startLine": 5,
                    "endLine": 22,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_005.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_005\",\n    \"summary\": \"Translates a number into a string in the given class.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"translateNum\",\n            \"summary\": \"Translates a number into a string in the method's internal logic\",\n            \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Stores the integer value of the input variable 'a'.\",\n            \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n            \"relation_to_parent\": \"\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"x\",\n            \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"y\",\n            \"summary\": \"Stores the integer value returned after modulus operation.\",\n            \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 139,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_005.java",
                "name": "No_02_005.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Class\",\n  \"name\": \"No_02_005\",\n  \"summary\": \"Translates a number into a string in the given class.\",\n  \"children\": [\n    {\n      \"type\": \"Method\",\n      \"name\": \"translateNum\",\n      \"summary\": \"Translates a number into a string in the method's internal logic\",\n      \"relation_to_parent\": \"Invoked by variables 'x' and 'y' when processing the number\",\n      \"relation\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"a\",\n      \"summary\": \"Stores the integer value of the input variable 'a'.\",\n      \"relation_to_parent\": \"Dependency or invocation type between child and parent node\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"b\",\n      \"summary\": \"Used as a variable to store numeric values in the method execution context.\",\n      \"relation_to_parent\": \"\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"x\",\n      \"summary\": \"Stores the value of 'num' modulo 10 and is a value in the method.\",\n      \"relation_to_parent\": \"Invokes method 'translateNum' to compute the modulo result\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"y\",\n      \"summary\": \"Stores the integer value returned after modulus operation.\",\n      \"relation_to_parent\": \"Invokes method 'translateNum' to perform the operation\"\n    }\n  ]\n}"
        },
        {
            "node_id": 155,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.len1",
                "name": "len1",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 12,
                    "endColumn": 29
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"len1\",\n    \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 156,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.len2",
                "name": "len2",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 12,
                    "endColumn": 32
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"len2\",\n    \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n    \"children\": [],\n    \"relation_to_parent\": \"No child nodes provided.\"\n}\n```"
        },
        {
            "node_id": 157,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.dp",
                "name": "dp",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 16,
                    "endColumn": 39
                },
                "rawType": "int[][]"
            },
            "semantic_description": "{  \n  \"type\": \"Variable\",  \n  \"name\": \"dp\",  \n  \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",  \n  \"children\": []  \n}"
        },
        {
            "node_id": 158,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.i",
                "name": "i",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n    \"children\": [],\n    \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n}\n```"
        },
        {
            "node_id": 159,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.i",
                "name": "i",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 14,
                    "endLine": 14,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"Functionally represents the maximum value in an array loop context, storing integer values during processing.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\"\n}\n```"
        },
        {
            "node_id": 160,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.j",
                "name": "j",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 21,
                    "endColumn": 25
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n    \"children\": [],\n    \"relation\": \"Parent node is referenced as a loop variable in the Java code snippet.\"\n}"
        },
        {
            "node_id": 154,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue.grid",
                "name": "grid",
                "parentId": 153,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 24,
                    "endColumn": 35
                },
                "rawType": "int[][]"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"grid\",\n    \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n    \"children\": []\n}"
        },
        {
            "node_id": 153,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.maxValue",
                "name": "maxValue",
                "parentId": 152,
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 25,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int[][]",
                    "names": "grid"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"maxValue\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Parent node is referenced as a loop variable in the Java code snippet.\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 152,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006",
                "name": "No_02_006",
                "parentId": 151,
                "rawType": "algorithm.No_02_006",
                "location": {
                    "startLine": 5,
                    "endLine": 26,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_006.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_02_006\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}"
        },
        {
            "node_id": 151,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_006.java",
                "name": "No_02_006.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"No_02_006.java\",\n  \"summary\": \"Defines the function to calculate the maximum value in an array using a dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len1\",\n      \"summary\": \"Stores the length of the grid variable, representing a primitive int value.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"len2\",\n      \"summary\": \"Stores the length of grid[0] in an integer type, representing a length-value measurement.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"dp\",\n      \"summary\": \"Initializes an array of integers (int[][]) for maxValue functionality.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"i\",\n      \"summary\": \"Integer variable used as the loop counter in the algorithm.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"j\",\n      \"summary\": \"A loop variable initialized to 0, iterating through the length of len2 to collect values.\",\n      \"relation_to_parent\": \"Dependency: Parented to variable 153 in 'No_02_006.java' (file path: B:/leetcode/algorithm).\"\n    },\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"grid\",\n      \"summary\": \"Variable to store an array of integers for grid processing in the method\",\n      \"relation_to_parent\": \"No child nodes provided.\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 164,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.main.args",
                "name": "args",
                "parentId": 163,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 28,
                    "endColumn": 40
                },
                "rawType": "java.lang.String[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"args\",\n    \"summary\": \"A String[] array representing the input arguments passed to the main method.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 167,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring.ans",
                "name": "ans",
                "parentId": 165,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 12,
                    "endColumn": 18
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Declares an integer variable storing the length of the longest substring of a given string\",\n    \"children\": []\n}"
        },
        {
            "node_id": 168,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring.set",
                "name": "set",
                "parentId": 165,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 14,
                    "endLine": 14,
                    "startColumn": 23,
                    "endColumn": 43
                },
                "rawType": "java.util.Set<java.lang.Character>"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n    \"summary\": \"Declares a Set<java.lang.Character> with the functionality of storing characters\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used in the code to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 169,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring.left",
                "name": "left",
                "parentId": 165,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 12,
                    "endColumn": 19
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"left\",\n  \"summary\": \"This variable holds the left part of a length of the longest substring algorithm.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"right\",\n      \"summary\": \"This variable holds the right part of a length of the longest substring algorithm.\",\n      \"relation_to_parent\": \"Dependency: Right variable is part of the length of the longest substring algorithm, calculated by left.\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 170,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring.right",
                "name": "right",
                "parentId": 165,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 22,
                    "endColumn": 30
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"right\",\n    \"summary\": \"Function or purpose of the variable: Calculation of the length of the longest substring in an input string.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 166,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring.s",
                "name": "s",
                "parentId": 165,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 12,
                    "endLine": 12,
                    "startColumn": 47,
                    "endColumn": 54
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"s\",\n  \"summary\": \"Storing the value of a String parameter passed to the method lengthOfLongestSubstring.\",\n  \"children\": []\n}"
        },
        {
            "node_id": 165,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.lengthOfLongestSubstring",
                "name": "lengthOfLongestSubstring",
                "parentId": 162,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 12,
                    "endLine": 26,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String",
                    "names": "s"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n    \"summary\": \"Declares a Set<java.lang.Character> used to store characters during the longest substring calculation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 163,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.main",
                "name": "main",
                "parentId": 162,
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 9,
                    "endLine": 11,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String[]",
                    "names": "args"
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007.main\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node's method and used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 162,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007",
                "name": "No_02_007",
                "parentId": 161,
                "rawType": "algorithm.No_02_007",
                "location": {
                    "startLine": 8,
                    "endLine": 27,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_007.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node's method and used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}"
        },
        {
            "node_id": 161,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_007.java",
                "name": "No_02_007.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_007\",\n    \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n            \"summary\": \"A variable declaration of type Set<java.lang.Character> used in the code example\",\n            \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 175,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.dp",
                "name": "dp",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 14,
                    "endColumn": 28
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Function or purpose of the parent node\",\n    \"children\": [],\n    \"relation\": []\n}\n```"
        },
        {
            "node_id": 176,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.a",
                "name": "a",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 12,
                    "endColumn": 16
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"a is a variable holding the nth Ugly Number\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"Child node summary (not provided in the input)\",\n      \"relation_to_parent\": \"No children\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 177,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.b",
                "name": "b",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 19,
                    "endColumn": 23
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"Parent node name\",\n    \"summary\": \"Variable b is defined as part of the algorithm function, potentially holding a value to be used as a parameter.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"Child node name\",\n            \"summary\": \"Variable a is initialized from 0, and b is initialized from 0, potentially holding values for a computation function.\",\n            \"relation_to_parent\": \"A dependency (initialization) relationship to the parent node's definition in the Java class.\"\n        }\n    ]\n}"
        },
        {
            "node_id": 178,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.c",
                "name": "c",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 26,
                    "endColumn": 30
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"c\",\n    \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        }\n    ]\n}"
        },
        {
            "node_id": 179,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.i",
                "name": "i",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 180,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.n1",
                "name": "n1",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 16,
                    "endColumn": 29
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n1\",\n    \"summary\": \"Stores the nested integer value computed from the DP array of indices a, b, c.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n2\",\n            \"summary\": \"Derived from dp[b] multiplied by 3, representing a scaled integer value.\",\n            \"relation_to_parent\": \"Dependency: n2 is a child of the parent node and is generated from dp[b] operation.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n3\",\n            \"summary\": \"Derived from dp[c] multiplied by 5, representing a scaled integer value.\",\n            \"relation_to_parent\": \"Dependency: n3 is a child of the parent node and is generated from dp[c] operation.\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 181,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.n2",
                "name": "n2",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 32,
                    "endColumn": 45
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n2\",\n    \"summary\": \"Calculates the value of n2 based on dp arrays using multiplication by 2 and 3 respectively.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 182,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.n3",
                "name": "n3",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 48,
                    "endColumn": 61
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n3\",\n    \"summary\": \"Calculates the value of dp[c] multiplied by 5, representing a mathematical operation performed in the algorithm.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n1\",\n            \"summary\": \"Derived from dp[a], used in the calculation of the first value in the sequence.\",\n            \"relation_to_parent\": \"Dependency: n1 is used to compute the first value in the sequence.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n2\",\n            \"summary\": \"Derived from dp[b], used to compute the second value in the sequence.\",\n            \"relation_to_parent\": \"Dependency: n2 is used to compute the second value in the sequence.\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n3\",\n            \"summary\": \"Derived from dp[c], used in the calculation of the final value of the sequence.\",\n            \"relation_to_parent\": \"Composition: n3 is part of the sequence and depends on dp[c]\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 174,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber.n",
                "name": "n",
                "parentId": 173,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 29,
                    "endColumn": 33
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 173,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.nthUglyNumber",
                "name": "nthUglyNumber",
                "parentId": 172,
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 24,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int",
                    "names": "n"
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm.No_02_008.nthUglyNumber\",\n    \"summary\": \"Calculates the nth Ugly Number using an optimized dynamic programming approach with a nested integer array.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"c\",\n            \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"a\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"b\",\n            \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n            \"relation_to_parent\": \"Dependency\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n            \"relation_to_parent\": \"Dependency\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 172,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008",
                "name": "No_02_008",
                "parentId": 171,
                "rawType": "algorithm.No_02_008",
                "location": {
                    "startLine": 5,
                    "endLine": 25,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_008.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n  \"type\": \"Class node\",\n  \"name\": \"algorithm.No_02_008\",\n  \"summary\": \"Defined as a class containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"c\",\n      \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"a\",\n      \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"b\",\n      \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"n\",\n      \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n      \"relation_to_parent\": \"Dependency\"\n    },\n    {\n      \"type\": \"Variable node\",\n      \"name\": \"i\",\n      \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n      \"relation_to_parent\": \"Dependency\"\n    }\n  ]\n}"
        },
        {
            "node_id": 171,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_008.java",
                "name": "No_02_008.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"File node\",\n  \"name\": \"algorithm.No_02_008.java\",\n  \"summary\": \"A class file containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n  \"children\": [\n    {\n      \"type\": \"Class node\",\n      \"name\": \"algorithm.No_02_008\",\n      \"summary\": \"Defined as a class containing the method to calculate the nth Ugly Number using an optimized dynamic programming approach.\",\n      \"children\": [\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"c\",\n          \"summary\": \"Stores the value of algorithm's Ugly Number calculation, initialized to 0 during variable assignment.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"a\",\n          \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"b\",\n          \"summary\": \"Used in loop logic to compute the Ugly Number, directly derived from variable 'c'. Value: 0.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"n\",\n          \"summary\": \"A variable storing the nth Ugly Number in an algorithmic context.\",\n          \"relation_to_parent\": \"Dependency\"\n        },\n        {\n          \"type\": \"Variable node\",\n          \"name\": \"i\",\n          \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n          \"relation_to_parent\": \"Dependency\"\n        }\n      ]\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 187,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.main.n",
                "name": "n",
                "parentId": 185,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 12,
                    "endColumn": 16
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable storing the integer value 3\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 186,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.main.args",
                "name": "args",
                "parentId": 185,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 28,
                    "endColumn": 40
                },
                "rawType": "java.lang.String[]"
            },
            "semantic_description": "{\n    \"type\": \"method\",\n    \"name\": \"main\",\n    \"summary\": \"Storing method arguments as Java array\",\n    \"children\": [],\n    \"relation_to_parent\": \"Child variable holding method arguments\",\n    \"relation\": \"Usage as parameter to the main method\"\n}"
        },
        {
            "node_id": 190,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.temp1",
                "name": "temp1",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 13,
                    "endLine": 13,
                    "startColumn": 17,
                    "endColumn": 45
                },
                "rawType": "double[]"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"temp1\",\n    \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp1\",\n            \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n            \"relation_to_parent\": \"None\",\n            \"relation\": \"None\"\n        }\n    ]\n}"
        },
        {
            "node_id": 191,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.temp2",
                "name": "temp2",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 14,
                    "endLine": 14,
                    "startColumn": 17,
                    "endColumn": 45
                },
                "rawType": "double[]"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"temp2\",\n    \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n    \"children\": []\n}"
        },
        {
            "node_id": 192,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.flag",
                "name": "flag",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 15,
                    "endLine": 15,
                    "startColumn": 12,
                    "endColumn": 20
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"flag\",\n    \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"flag\",\n            \"summary\": \"Functionality of the flag variable in the algorithm, used to track a boolean state or condition\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\"\n        }\n    ]\n}"
        },
        {
            "node_id": 193,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.i",
                "name": "i",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 16,
                    "endLine": 16,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Variable\",\n    \"name\": \"i\",\n    \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n    \"children\": [],\n    \"relation_to_parent\": \"\",\n    \"relation\": \"\"\n}"
        },
        {
            "node_id": 194,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.i",
                "name": "i",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 22,
                    "endLine": 22,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"i\",\n  \"summary\": \"Used to iterate through a sequence or array, with initial value 2 and incrementing to n.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"n\",\n      \"summary\": \"The upper limit of the loop range, representing the final value in the iteration sequence.\",\n      \"relation_to_parent\": \"Dependency: 'i' is the loop variable, defining the range from 2 to n.\"\n    }\n  ]\n}"
        },
        {
            "node_id": 195,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.j",
                "name": "j",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 23,
                    "endLine": 23,
                    "startColumn": 21,
                    "endColumn": 29
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"j\",\n    \"summary\": \"A local integer variable that holds the loop index 'i - 1' in the nested loop 'for (int j = i - 1; j <= 6 * (i - 1); j')'.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 196,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.k",
                "name": "k",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 24,
                    "endLine": 24,
                    "startColumn": 25,
                    "endColumn": 29
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"k\",\n    \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 189,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability.n",
                "name": "n",
                "parentId": 188,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 12,
                    "endLine": 12,
                    "startColumn": 44,
                    "endColumn": 48
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"n\",\n    \"summary\": \"A variable used to calculate dice probability in the function dicesProbability(int n).\",\n    \"children\": [],\n    \"relation\": \"No children provided.\"\n}\n```"
        },
        {
            "node_id": 188,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.dicesProbability",
                "name": "dicesProbability",
                "parentId": 184,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 12,
                    "endLine": 37,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "int",
                    "names": "n"
                },
                "rawType": "double[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"dicesProbability\",\n    \"summary\": \"Calculates dice probability using a double[] array for numeric processing.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp1\",\n            \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"temp2\",\n            \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n            \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"flag\",\n            \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n            \"relation_to_parent\": \"Dependency: This is a local variable used in conditional logic\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"i\",\n            \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n            \"relation_to_parent\": \"Dependency: This is used in nested loops to define the range of iteration\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"The upper limit of the loop range for the dice probability calculation.\",\n            \"relation_to_parent\": \"Dependency: Defined through the 'i' loop variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"j\",\n            \"summary\": \"A local integer variable holding the loop index 'i - 1' in the nested loop\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"k\",\n            \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n            \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n            \"relation\": \"None\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 185,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.main",
                "name": "main",
                "parentId": 184,
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": true,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 8,
                    "endLine": 11,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public static",
                "parameter": {
                    "types": "java.lang.String[]",
                    "names": "args"
                },
                "rawType": "void"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Method\",\n    \"name\": \"main\",\n    \"summary\": \"A method storing the Java array of arguments for the dice probability calculation, serving as a placeholder for the main method's parameter usage.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"n\",\n            \"summary\": \"A variable storing the integer value 3 as the upper limit in the loop for the dice probability calculation.\",\n            \"relation_to_parent\": \"Child variable holding method arguments\",\n            \"relation\": \"Usage as parameter to the main method\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 184,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009",
                "name": "No_02_009",
                "parentId": 183,
                "rawType": "algorithm.No_02_009",
                "location": {
                    "startLine": 7,
                    "endLine": 38,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_009.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class\",\n    \"name\": \"No_02_009\",\n    \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for a given upper limit n.\",\n    \"children\": [\n        {\n            \"type\": \"Method\",\n            \"name\": \"main\",\n            \"summary\": \"A method storing the Java array of arguments for the dice probability calculation, serving as a placeholder for the main method's parameter usage.\",\n            \"relation_to_parent\": \"Child variable holding method arguments\",\n            \"relation\": \"Usage as parameter to the main method\"\n        },\n        {\n            \"type\": \"Method\",\n            \"name\": \"dicesProbability\",\n            \"summary\": \"Calculates dice probability using a double[] array for numeric processing.\",\n            \"children\": [\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"temp1\",\n                    \"summary\": \"Stores a double array representing numeric data for processing dice probability calculations.\",\n                    \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"temp2\",\n                    \"summary\": \"Stores data of type double[] for computation during the processing of leetcode algorithms.\",\n                    \"relation_to_parent\": \"Dependency: This is used within the dice probability calculation\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"flag\",\n                    \"summary\": \"A boolean value representing a flag variable in the algorithm logic, holding a single integer -1 as initialized.\",\n                    \"relation_to_parent\": \"Dependency: This is a local variable used in conditional logic\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"i\",\n                    \"summary\": \"A declared integer variable holding the value during the loop iterations.\",\n                    \"relation_to_parent\": \"Dependency: This is used in nested loops to define the range of iteration\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"n\",\n                    \"summary\": \"The upper limit of the loop range for the dice probability calculation.\",\n                    \"relation_to_parent\": \"Dependency: Defined through the 'i' loop variable\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"j\",\n                    \"summary\": \"A local integer variable holding the loop index 'i - 1' in the nested loop\",\n                    \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Variable\",\n                    \"name\": \"k\",\n                    \"summary\": \"Variables used in a loop to represent the value within the range 1 to 6\",\n                    \"relation_to_parent\": \"None, as this is a single value stored in a local variable\",\n                    \"relation\": \"None\"\n                }\n            ]\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 183,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_009.java",
                "name": "No_02_009.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"algorithm\",\n  \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for a given upper limit n.\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"No_02_009\",\n      \"summary\": \"A class representing an algorithm for calculating dice probabilities, specific to the No_02_009 implementation.\",\n      \"relation_to_parent\": \"Definition of the core algorithm\",\n      \"relation\": \"Explicit class definition\"\n    },\n    {\n      \"type\": \"Method\",\n      \"name\": \"main\",\n      \"summary\": \"Storing the Java array of arguments used for the dice probability calculation as a placeholder for the main method parameter usage.\",\n      \"relation_to_parent\": \"Dependency: This method holds the function signature parameters passed to the main method\",\n      \"relation\": \"Parameter reference\"\n    },\n    {\n      \"type\": \"Method\",\n      \"name\": \"dicesProbability\",\n      \"summary\": \"Calculates the dice probability by iterating through the range of possible outcomes and computing their probabilities.\",\n      \"children\": [\n        {\n          \"type\": \"Variable\",\n          \"name\": \"temp1\",\n          \"summary\": \"Stores a double array representing numeric data used during the probability computation.\",\n          \"relation_to_parent\": \"Dependency: This array is used as a numerical accumulator during the dice probability calculation\",\n          \"relation\": \"None\"\n        },\n        {\n          \"type\": \"Variable\",\n          \"name\": \"temp2\",\n          \"summary\": \"Stores data for computation in a double array format used during leetcode algorithm processing.\",\n          \"relation_to_parent\": \"Dependency: This double array is used to store intermediate results for probability calculations\",\n          \"relation\": \"None\"\n        },\n        {\n          \"type\": \"Variable\",\n          \"name\": \"flag\",\n          \"summary\": \"A boolean value used as a flag in conditional logic to determine the outcome of dice probability calculations.\",\n          \"relation_to_parent\": \"Dependency: This variable is defined within the dice probability method\",\n          \"relation\": \"None\"\n        }\n      ]\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 201,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit.min",
                "name": "min",
                "parentId": 199,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 7,
                    "endLine": 7,
                    "startColumn": 12,
                    "endColumn": 34
                },
                "rawType": "int"
            },
            "semantic_description": "{\n  \"type\": \"Variable\",\n  \"name\": \"min\",\n  \"summary\": \"Sets the minimum value in an algorithm context, initialized as Integer.MAX_VALUE\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"Integer.MAX_VALUE\",\n      \"summary\": \"The maximum integer value used to represent bounds in algorithmic logic\",\n      \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n    }\n  ]\n}"
        },
        {
            "node_id": 202,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit.max",
                "name": "max",
                "parentId": 199,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 12,
                    "endColumn": 34
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"max\",\n    \"summary\": \"Stores the maximum value in the algorithm context.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 203,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit.ans",
                "name": "ans",
                "parentId": 199,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 9,
                    "endLine": 9,
                    "startColumn": 12,
                    "endColumn": 18
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"ans\",\n    \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 204,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit.i",
                "name": "i",
                "parentId": 199,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 10,
                    "endLine": 10,
                    "startColumn": 17,
                    "endColumn": 21
                },
                "rawType": "int"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Parent node type\",\n  \"name\": \"Parent node name\",\n  \"summary\": \"a loop variable used to iterate over an array of prices\",\n  \"children\": [\n    {\n      \"type\": \"Child node type\",\n      \"name\": \"Child node name\",\n      \"summary\": \"no child nodes present\",\n      \"relation_to_parent\": \"no child relationships\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 200,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit.prices",
                "name": "prices",
                "parentId": 199,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 25,
                    "endColumn": 36
                },
                "rawType": "int[]"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"prices\",\n    \"summary\": \"A variable used to store an array of prices for the maxProfit method in algorithmic programming.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 199,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.maxProfit",
                "name": "maxProfit",
                "parentId": 198,
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 21,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "int[]",
                    "names": "prices"
                },
                "rawType": "int"
            },
            "semantic_description": "{\n    \"type\": \"Method\",\n    \"name\": \"maxProfit\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the minimum value in an algorithm context, initialized as Integer.MAX_VALUE\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context.\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm.\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}"
        },
        {
            "node_id": 198,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010",
                "name": "No_02_010",
                "parentId": 197,
                "rawType": "algorithm.No_02_010",
                "location": {
                    "startLine": 5,
                    "endLine": 22,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_02_010.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Class node\",\n    \"name\": \"No_02_010\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the initialization value for the min variable in an algorithm context\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 197,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_02_010.java",
                "name": "No_02_010.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "{\n    \"type\": \"File node\",\n    \"name\": \"No_02_010.java\",\n    \"summary\": \"A method used to calculate the maximum profit from an array of prices, iterating through the input to determine the maximum difference between prices and the minimum value.\",\n    \"children\": [\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"min\",\n            \"summary\": \"Sets the initialization value for the min variable in an algorithm context\",\n            \"relation_to_parent\": \"Dependency: Sets the initialization value for the min variable\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"max\",\n            \"summary\": \"Stores the maximum value in the algorithm context\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        },\n        {\n            \"type\": \"Variable node\",\n            \"name\": \"ans\",\n            \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n            \"relation_to_parent\": \"No child relationships with parent\"\n        }\n    ]\n}"
        },
        {
            "node_id": 208,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_03_001.exist.board",
                "name": "board",
                "parentId": 207,
                "File": "No_03_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 25,
                    "endColumn": 38
                },
                "rawType": "char[][]"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Variable\",\n  \"name\": \"board\",\n  \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board in the provided code snippet.\",\n  \"children\": []\n}\n```"
        },
        {
            "node_id": 209,
            "labels": [
                "Variable"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_03_001.exist.word",
                "name": "word",
                "parentId": 207,
                "File": "No_03_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "global": false,
                "location": {
                    "startLine": 6,
                    "endLine": 6,
                    "startColumn": 41,
                    "endColumn": 51
                },
                "rawType": "java.lang.String"
            },
            "semantic_description": "```json\n{\n    \"type\": \"Variable\",\n    \"name\": \"word\",\n    \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n    \"children\": []\n}\n```"
        },
        {
            "node_id": 207,
            "labels": [
                "Method"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_03_001.exist",
                "name": "exist",
                "parentId": 206,
                "File": "No_03_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                },
                "enhancement": {
                    "isSynchronized": false,
                    "isStatic": false,
                    "isGetter": false,
                    "isSetter": false,
                    "isPublic": true,
                    "isDelegator": false,
                    "isConstructor": false,
                    "isOverride": false,
                    "isAbstract": false,
                    "isRecursive": false
                },
                "location": {
                    "startLine": 6,
                    "endLine": 8,
                    "startColumn": 4,
                    "endColumn": 4
                },
                "modifiers": "public",
                "parameter": {
                    "types": "char[][] java.lang.String",
                    "names": "board word"
                },
                "rawType": "boolean"
            },
            "semantic_description": "```json\n{\n  \"type\": \"Method\",\n  \"name\": \"exist\",\n  \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n  \"children\": [\n    {\n      \"type\": \"Variable\",\n      \"name\": \"board\",\n      \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n      \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n      \"relation\": \"Storage & inference\"\n    },\n    {\n      \"type\": \"Variable\",\n      \"name\": \"word\",\n      \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n      \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n      \"relation\": \"Input & computation\"\n    }\n  ]\n}\n```"
        },
        {
            "node_id": 206,
            "labels": [
                "Class"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_03_001",
                "name": "No_03_001",
                "parentId": 205,
                "rawType": "algorithm.No_03_001",
                "location": {
                    "startLine": 5,
                    "endLine": 9,
                    "startColumn": 0,
                    "endColumn": 0
                },
                "modifiers": "public",
                "File": "No_03_001.java",
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"No_03_001\",\n    \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"board\",\n            \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n            \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n            \"relation\": \"Storage & inference\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"word\",\n            \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n            \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n            \"relation\": \"Input & computation\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 205,
            "labels": [
                "File"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm.No_03_001.java",
                "name": "No_03_001.java",
                "parentId": 0,
                "additionalBin": {
                    "binNum": 1,
                    "binPath": "B:/leetcode/algorithm"
                }
            },
            "semantic_description": "```json\n{\n    \"type\": \"Parent node type\",\n    \"name\": \"No_03_001\",\n    \"summary\": \"Checks if a word exists on the board in the provided parameters.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"board\",\n            \"summary\": \"Stores the board data (char[][]), used to determine if a word exists on the board.\",\n            \"relation_to_parent\": \"Dependency: stores the board structure required for the word search logic\",\n            \"relation\": \"Storage & inference\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"word\",\n            \"summary\": \"Stores a string value derived from the 'word' parameter in the 'exist' method.\",\n            \"relation_to_parent\": \"Dependency: stores the search term that defines the word to be matched\",\n            \"relation\": \"Input & computation\"\n        }\n    ]\n}\n```"
        },
        {
            "node_id": 0,
            "labels": [
                "Package"
            ],
            "properties": {
                "external": false,
                "qualifiedName": "algorithm",
                "name": "algorithm",
                "parentId": -1
            },
            "semantic_description": "{\n    \"type\": \"Parent node type\",\n    \"name\": \"algorithm\",\n    \"summary\": \"A class representing an algorithm for algorithmic logic, defining fundamental components for linked list operations.\",\n    \"children\": [\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_001.java\",\n            \"summary\": \"Implements string space replacement functionality for Java code.\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.val\",\n            \"summary\": \"Stores an integer value representing the content of a linked list node\",\n            \"relation_to_parent\": \"Dependency\",\n            \"relation\": \"None\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_002.ListNode.next\",\n            \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n            \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n            \"relation\": \"Dependency\"\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_003\",\n            \"summary\": \"A class that initializes two Stack<Integer> variables (A and B) as part of a queue operation, facilitating pop operations by pushing elements into A and storing them in B.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_003.ListNode.val\",\n                    \"summary\": \"Stores an integer value representing the content of a linked list node\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_003.ListNode.next\",\n                    \"summary\": \"Accesses or retrieves the next pointer of a list node\",\n                    \"relation_to_parent\": \"Circular reference to the parent node 9 (internal data reference)\",\n                    \"relation\": \"Dependency\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_005\",\n            \"summary\": \"A class defining a linked list node storing an integer value in the algorithm logic, serving as a foundational structure for linked list operations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_005.ListNode.val\",\n                    \"summary\": \"Stores the value of a linked list node in the algorithm logic, representing an attribute defined by the ListNode class constructor\",\n                    \"relation_to_parent\": \"Dependency on the ListNode class constructor that initializes the 'val' field\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_005.ListNode.next\",\n                    \"summary\": \"Stores the next node in the ListNode structure, defining the linked list attribute, which is a loop-to-parent dependency\",\n                    \"relation_to_parent\": \"Dependency: Loop to parent node for list node storage\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_006\",\n            \"summary\": \"A class that initializes a stack to store integers in the global scope as a variable.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A represents a stack of integers stored in the global scope as a variable.\",\n                    \"relation_to_parent\": \"Composition of the stack storage interface\",\n                    \"relation\": \"Invoked by A (as a method or instance)\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"B is a stack instance representing a specific element of the stack storage.\",\n                    \"relation_to_parent\": \"Compositional dependency of the stack storage interface\",\n                    \"relation\": \"Used within the stack context\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"A variable storing the result of a stack operation (pop, push, or validation).\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.A\",\n                    \"summary\": \"A variable used to store data (int) in the algorithm's logic.\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_006.B\",\n                    \"summary\": \"A variable storing the result of a stack operation (pop, push, or validation).\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Variable parameter in the 'push' method\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_01_007.java\",\n            \"summary\": \"A class representing an algorithmic object containing numerical values and random pointers (cycle and random) for computational logic and dependencies.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.Node\",\n                    \"summary\": \"A class storing numerical values and random pointers (cycle and random) for algorithmic dependencies.\",\n                    \"relation_to_parent\": \"Dependencies: The 'node' class is a composition of the parent structure for logical cycles and data dependencies.\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.val\",\n                    \"summary\": \"A direct dependency used to store numerical values in the parent node's logic flow.\",\n                    \"relation_to_parent\": \"Used as a direct dependency in the parent node's logic flow\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.cycle\",\n                    \"summary\": \"A dependency to node 52, indicating that it is a child of the algorithm node representing the cycle structure.\",\n                    \"relation_to_parent\": \"Dependencies: The 'cycle' node is a composition of the parent structure for logical cycles\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_01_007.random\",\n                    \"summary\": \"A reference to a Node instance representing a computational link or dependency\",\n                    \"relation_to_parent\": \"Dependency or invocation type between child and parent node\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_001.java\",\n            \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_001.Fibonacci\",\n                    \"summary\": \"Computes the nth Fibonacci number using a loop.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_001.FibonacciVariable\",\n                    \"summary\": \"Stores the value of the algorithm's Fibonacci computation.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_002.java\",\n            \"summary\": \"Defined class for string-to-integer parsing in leetcode solutions, responsible for the method 'strToInt'.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.strToInt\",\n                    \"summary\": \"Computes the maximum value based on the deque's contents in the current context.\",\n                    \"relation_to_parent\": \"Composition\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.push_back\",\n                    \"summary\": \"Pushes an integer value to the algorithm framework queue, maintaining the order by removing smaller values.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Parameter\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_002.pop_front\",\n                    \"summary\": \"Pop the front element from a deque data structure, returning its value.\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"Parameter\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_003.java\",\n            \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.maxSubArray\",\n                    \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.ans\",\n                            \"summary\": \"Stores the integer value derived from the array 'nums' by traversing the array elements\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Direct computation\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.i\",\n                            \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Invocation\"\n                        }\n                     ]\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.ans\",\n                    \"summary\": \"Stores the computed value of a function, initialized to 0 in the algorithm\",\n                    \"relation_to_parent\": \"Composition\",\n                    \"relation\": \"Dependency\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_003.pop\",\n                    \"summary\": \"Manages the pop operation from a stack or list structure, ensuring elements are removed according to the defined rules.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_003.B.pop\",\n                            \"summary\": \"Invokes a method for popping elements from a data structure (stack), which is a direct dependency of the main pop() method for performing the operation.\",\n                            \"relation_to_parent\": \"Inheritance/Dependency: B.pop() is a delegate of the main pop() method for performing the operation.\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.No_02_004.java\",\n            \"summary\": \"A Java algorithm class responsible for managing array inputs and performing subarray calculations.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_004.maxSubArray\",\n                    \"summary\": \"Computes the maximum subarray sum from an array 'nums' using an O(n) algorithm.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_004.ans\",\n                            \"summary\": \"Stores the integer value derived from the array 'nums' by traversing the array elements\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Direct computation\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"algorithm.No_02_004.i\",\n                            \"summary\": \"Tracks integer indices from 1 to the array length within a for loop\",\n                            \"relation_to_parent\": \"Dependency\",\n                            \"relation\": \"Invocation\"\n                        }\n                    ]\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_004.variables\",\n                    \"summary\": \"Variables stored in the algorithm context for computation purposes (used to traverse or store intermediate results).\",\n                    \"relation_to_parent\": \"Dependency\",\n                    \"relation\": \"None\"\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"algorithm.\",\n            \"summary\": \"A class representing an algorithm for calculating dice probabilities, specifically for the No_02_009 implementation.\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"No_02_009.main\",\n                    \"summary\": \"Storing the Java array of arguments used for the dice probability calculation as a placeholder for the main method parameter usage.\",\n                    \"relation_to_parent\": \"Dependency: This method holds the function signature parameters passed to the main method\",\n                    \"relation\": \"Parameter reference\"\n                },\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"No_02_009.dicesProbability\",\n                    \"summary\": \"Calculates the dice probability by iterating through the range of possible outcomes and computing their probabilities.\",\n                    \"children\": [\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.i\",\n                            \"summary\": \"A local integer variable storing the value for looping in the algorithm.\",\n                            \"relation_to_parent\": \"Dependency: This variable is used as the value for looping in the algorithm\",\n                            \"relation\": \"None\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.temp1\",\n                            \"summary\": \"Stores a double array representing numeric data used during the probability computation.\",\n                            \"relation_to_parent\": \"Dependency: This double array is used as a numerical accumulator during the dice probability calculation\",\n                            \"relation\": \"None\"\n                        },\n                        {\n                            \"type\": \"Child node type\",\n                            \"name\": \"No_02_009.temp2\",\n                            \"summary\": \"Stores data for computation in a double array format used for leetcode algorithm processing.\",\n                            \"relation_to_parent\": \"Dependency: This double array is used for storing intermediate results in a leetcode algorithm context\",\n                            \"relation\": \"None\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"Child node type\",\n            \"name\": \"No_02_007.java\",\n            \"summary\": \"Declares a void method used to invoke the algorithm for longest substring computation\",\n            \"children\": [\n                {\n                    \"type\": \"Child node type\",\n                    \"name\": \"algorithm.No_02_007.lengthOfLongestSubstring.set\",\n                    \"summary\": \"A Set<Character> variable declared to store characters during the longest substring calculation\",\n                    \"relation_to_parent\": \"Dependency or invocation: The variable is defined in the parent node and later used to initialize a Set<Character> instance\",\n                    \"relation\": \"Dependency or invocation type between child and parent node\"\n                }\n            ]\n        }\n    ]\n}"
        }
    ]
}