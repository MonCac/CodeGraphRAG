{
  "nodes": [
    {
      "node_id": 4997,
      "labels": [
        "Project"
      ],
      "properties": {
        "name": "code-graph-rag"
      }
    },
    {
      "node_id": 4998,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": ".github",
        "path": ".github"
      }
    },
    {
      "node_id": 4999,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "ISSUE_TEMPLATE",
        "path": ".github/ISSUE_TEMPLATE"
      }
    },
    {
      "node_id": 5000,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "workflows",
        "path": ".github/workflows"
      }
    },
    {
      "node_id": 5001,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "assets",
        "path": "assets"
      }
    },
    {
      "node_id": 5002,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "tests",
        "path": "codebase_rag/tests"
      }
    },
    {
      "node_id": 5003,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "examples",
        "path": "examples"
      }
    },
    {
      "node_id": 5004,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "grammars",
        "path": "grammars"
      }
    },
    {
      "node_id": 5005,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "tree-sitter-c-sharp",
        "path": "grammars/tree-sitter-c-sharp"
      }
    },
    {
      "node_id": 5006,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "tree-sitter-lua",
        "path": "grammars/tree-sitter-lua"
      }
    },
    {
      "node_id": 5007,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "tree-sitter-php",
        "path": "grammars/tree-sitter-php"
      }
    },
    {
      "node_id": 5008,
      "labels": [
        "Folder"
      ],
      "properties": {
        "name": "optimize",
        "path": "optimize"
      }
    },
    {
      "node_id": 5009,
      "labels": [
        "Package"
      ],
      "properties": {
        "name": "codebase_rag",
        "path": "codebase_rag",
        "qualified_name": "code-graph-rag.codebase_rag"
      }
    },
    {
      "node_id": 5010,
      "labels": [
        "Package"
      ],
      "properties": {
        "name": "parsers",
        "path": "codebase_rag/parsers",
        "qualified_name": "code-graph-rag.codebase_rag.parsers"
      }
    },
    {
      "node_id": 5011,
      "labels": [
        "Package"
      ],
      "properties": {
        "name": "services",
        "path": "codebase_rag/services",
        "qualified_name": "code-graph-rag.codebase_rag.services"
      }
    },
    {
      "node_id": 5012,
      "labels": [
        "Package"
      ],
      "properties": {
        "name": "tools",
        "path": "codebase_rag/tools",
        "qualified_name": "code-graph-rag.codebase_rag.tools"
      }
    },
    {
      "node_id": 5013,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_treesitter_operators.py",
        "path": "test_treesitter_operators.py",
        "qualified_name": "code-graph-rag.test_treesitter_operators"
      }
    },
    {
      "node_id": 5014,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "realtime_updater.py",
        "path": "realtime_updater.py",
        "qualified_name": "code-graph-rag.realtime_updater"
      }
    },
    {
      "node_id": 5015,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "build_binary.py",
        "path": "build_binary.py",
        "qualified_name": "code-graph-rag.build_binary"
      }
    },
    {
      "node_id": 5016,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "main.py",
        "path": "main.py",
        "qualified_name": "code-graph-rag.main"
      }
    },
    {
      "node_id": 5017,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "language_config.py",
        "path": "codebase_rag/language_config.py",
        "qualified_name": "code-graph-rag.codebase_rag.language_config"
      }
    },
    {
      "node_id": 5018,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "config.py",
        "path": "codebase_rag/config.py",
        "qualified_name": "code-graph-rag.codebase_rag.config"
      }
    },
    {
      "node_id": 5019,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "graph_updater.py",
        "path": "codebase_rag/graph_updater.py",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater"
      }
    },
    {
      "node_id": 5020,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "graph_loader.py",
        "path": "codebase_rag/graph_loader.py",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader"
      }
    },
    {
      "node_id": 5021,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "__init__.py",
        "path": "codebase_rag/__init__.py",
        "qualified_name": "code-graph-rag.codebase_rag"
      }
    },
    {
      "node_id": 5022,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "prompts.py",
        "path": "codebase_rag/prompts.py",
        "qualified_name": "code-graph-rag.codebase_rag.prompts"
      }
    },
    {
      "node_id": 5023,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "parser_loader.py",
        "path": "codebase_rag/parser_loader.py",
        "qualified_name": "code-graph-rag.codebase_rag.parser_loader"
      }
    },
    {
      "node_id": 5024,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "schemas.py",
        "path": "codebase_rag/schemas.py",
        "qualified_name": "code-graph-rag.codebase_rag.schemas"
      }
    },
    {
      "node_id": 5025,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "main.py",
        "path": "codebase_rag/main.py",
        "qualified_name": "code-graph-rag.codebase_rag.main"
      }
    },
    {
      "node_id": 5026,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "graph_export_example.py",
        "path": "examples/graph_export_example.py",
        "qualified_name": "code-graph-rag.examples.graph_export_example"
      }
    },
    {
      "node_id": 5027,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "call_processor.py",
        "path": "codebase_rag/parsers/call_processor.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor"
      }
    },
    {
      "node_id": 5028,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "java_type_inference.py",
        "path": "codebase_rag/parsers/java_type_inference.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference"
      }
    },
    {
      "node_id": 5029,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "constants.py",
        "path": "codebase_rag/parsers/constants.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.constants"
      }
    },
    {
      "node_id": 5030,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "type_inference.py",
        "path": "codebase_rag/parsers/type_inference.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference"
      }
    },
    {
      "node_id": 5031,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "__init__.py",
        "path": "codebase_rag/parsers/__init__.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers"
      }
    },
    {
      "node_id": 5032,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "factory.py",
        "path": "codebase_rag/parsers/factory.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory"
      }
    },
    {
      "node_id": 5033,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "structure_processor.py",
        "path": "codebase_rag/parsers/structure_processor.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor"
      }
    },
    {
      "node_id": 5034,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "utils.py",
        "path": "codebase_rag/parsers/utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils"
      }
    },
    {
      "node_id": 5035,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "definition_processor.py",
        "path": "codebase_rag/parsers/definition_processor.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor"
      }
    },
    {
      "node_id": 5036,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "rust_utils.py",
        "path": "codebase_rag/parsers/rust_utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils"
      }
    },
    {
      "node_id": 5037,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "lua_utils.py",
        "path": "codebase_rag/parsers/lua_utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.lua_utils"
      }
    },
    {
      "node_id": 5038,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "import_processor.py",
        "path": "codebase_rag/parsers/import_processor.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor"
      }
    },
    {
      "node_id": 5039,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "python_utils.py",
        "path": "codebase_rag/parsers/python_utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.python_utils"
      }
    },
    {
      "node_id": 5040,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "cpp_utils.py",
        "path": "codebase_rag/parsers/cpp_utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils"
      }
    },
    {
      "node_id": 5041,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "java_utils.py",
        "path": "codebase_rag/parsers/java_utils.py",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils"
      }
    },
    {
      "node_id": 5042,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "file_editor.py",
        "path": "codebase_rag/tools/file_editor.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor"
      }
    },
    {
      "node_id": 5043,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "shell_command.py",
        "path": "codebase_rag/tools/shell_command.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command"
      }
    },
    {
      "node_id": 5044,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "file_reader.py",
        "path": "codebase_rag/tools/file_reader.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader"
      }
    },
    {
      "node_id": 5045,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "document_analyzer.py",
        "path": "codebase_rag/tools/document_analyzer.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer"
      }
    },
    {
      "node_id": 5046,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "__init__.py",
        "path": "codebase_rag/tools/__init__.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools"
      }
    },
    {
      "node_id": 5047,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "file_writer.py",
        "path": "codebase_rag/tools/file_writer.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer"
      }
    },
    {
      "node_id": 5048,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "language.py",
        "path": "codebase_rag/tools/language.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language"
      }
    },
    {
      "node_id": 5049,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "code_retrieval.py",
        "path": "codebase_rag/tools/code_retrieval.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval"
      }
    },
    {
      "node_id": 5050,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "directory_lister.py",
        "path": "codebase_rag/tools/directory_lister.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister"
      }
    },
    {
      "node_id": 5051,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "codebase_query.py",
        "path": "codebase_rag/tools/codebase_query.py",
        "qualified_name": "code-graph-rag.codebase_rag.tools.codebase_query"
      }
    },
    {
      "node_id": 5052,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_advanced_types.py",
        "path": "codebase_rag/tests/test_rust_advanced_types.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types"
      }
    },
    {
      "node_id": 5053,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_functions.py",
        "path": "codebase_rag/tests/test_lua_functions.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_functions"
      }
    },
    {
      "node_id": 5054,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_import_parsing.py",
        "path": "codebase_rag/tests/test_import_parsing.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing"
      }
    },
    {
      "node_id": 5055,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_main_smoke.py",
        "path": "codebase_rag/tests/test_main_smoke.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_main_smoke"
      }
    },
    {
      "node_id": 5056,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_streams_functional.py",
        "path": "codebase_rag/tests/test_java_streams_functional.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional"
      }
    },
    {
      "node_id": 5057,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_move_semantics.py",
        "path": "codebase_rag/tests/test_cpp_move_semantics.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics"
      }
    },
    {
      "node_id": 5058,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_reflection_annotations.py",
        "path": "codebase_rag/tests/test_java_reflection_annotations.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations"
      }
    },
    {
      "node_id": 5059,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_stl_usage.py",
        "path": "codebase_rag/tests/test_cpp_stl_usage.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage"
      }
    },
    {
      "node_id": 5060,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_namespaces.py",
        "path": "codebase_rag/tests/test_cpp_namespaces.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces"
      }
    },
    {
      "node_id": 5061,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_inheritance.py",
        "path": "codebase_rag/tests/test_python_inheritance.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance"
      }
    },
    {
      "node_id": 5062,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_import_distance_calculation.py",
        "path": "codebase_rag/tests/test_import_distance_calculation.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation"
      }
    },
    {
      "node_id": 5063,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_destructuring.py",
        "path": "codebase_rag/tests/test_javascript_destructuring.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring"
      }
    },
    {
      "node_id": 5064,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_oop_patterns.py",
        "path": "codebase_rag/tests/test_lua_oop_patterns.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns"
      }
    },
    {
      "node_id": 5065,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_multilang_import_parsing.py",
        "path": "codebase_rag/tests/test_multilang_import_parsing.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing"
      }
    },
    {
      "node_id": 5066,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_casting_operators.py",
        "path": "codebase_rag/tests/test_cpp_casting_operators.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators"
      }
    },
    {
      "node_id": 5067,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "conftest.py",
        "path": "codebase_rag/tests/conftest.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.conftest"
      }
    },
    {
      "node_id": 5068,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_return_type_inference.py",
        "path": "codebase_rag/tests/test_python_return_type_inference.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference"
      }
    },
    {
      "node_id": 5069,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_modules.py",
        "path": "codebase_rag/tests/test_cpp_modules.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modules"
      }
    },
    {
      "node_id": 5070,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_environment.py",
        "path": "codebase_rag/tests/test_lua_environment.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment"
      }
    },
    {
      "node_id": 5071,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_lifetimes_advanced.py",
        "path": "codebase_rag/tests/test_rust_lifetimes_advanced.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced"
      }
    },
    {
      "node_id": 5072,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_coroutines.py",
        "path": "codebase_rag/tests/test_cpp_coroutines.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_coroutines"
      }
    },
    {
      "node_id": 5073,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_real_world.py",
        "path": "codebase_rag/tests/test_java_real_world.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world"
      }
    },
    {
      "node_id": 5074,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_modules_visibility.py",
        "path": "codebase_rag/tests/test_rust_modules_visibility.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility"
      }
    },
    {
      "node_id": 5075,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_class_method_relationship.py",
        "path": "codebase_rag/tests/test_python_class_method_relationship.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_class_method_relationship"
      }
    },
    {
      "node_id": 5076,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_graph_updater_integration.py",
        "path": "codebase_rag/tests/test_graph_updater_integration.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_graph_updater_integration"
      }
    },
    {
      "node_id": 5077,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_54_edge_cases.py",
        "path": "codebase_rag/tests/test_lua_54_edge_cases.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_54_edge_cases"
      }
    },
    {
      "node_id": 5078,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_trie_optimization.py",
        "path": "codebase_rag/tests/test_trie_optimization.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization"
      }
    },
    {
      "node_id": 5079,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_functions_methods.py",
        "path": "codebase_rag/tests/test_lua_functions_methods.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_functions_methods"
      }
    },
    {
      "node_id": 5080,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_comprehensive.py",
        "path": "codebase_rag/tests/test_lua_comprehensive.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive"
      }
    },
    {
      "node_id": 5081,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_imports.py",
        "path": "codebase_rag/tests/test_javascript_imports.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports"
      }
    },
    {
      "node_id": 5082,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_advanced_types.py",
        "path": "codebase_rag/tests/test_typescript_advanced_types.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types"
      }
    },
    {
      "node_id": 5083,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_imports.py",
        "path": "codebase_rag/tests/test_java_imports.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports"
      }
    },
    {
      "node_id": 5084,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_trait_objects.py",
        "path": "codebase_rag/tests/test_rust_trait_objects.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects"
      }
    },
    {
      "node_id": 5085,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_relationship_validation.py",
        "path": "codebase_rag/tests/test_java_relationship_validation.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation"
      }
    },
    {
      "node_id": 5086,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_imports.py",
        "path": "codebase_rag/tests/test_python_imports.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports"
      }
    },
    {
      "node_id": 5087,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_namespaces_modules.py",
        "path": "codebase_rag/tests/test_typescript_namespaces_modules.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules"
      }
    },
    {
      "node_id": 5088,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_standard_library_imports.py",
        "path": "codebase_rag/tests/test_python_standard_library_imports.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports"
      }
    },
    {
      "node_id": 5089,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_concepts.py",
        "path": "codebase_rag/tests/test_cpp_concepts.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concepts"
      }
    },
    {
      "node_id": 5090,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_web_networking.py",
        "path": "codebase_rag/tests/test_rust_web_networking.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking"
      }
    },
    {
      "node_id": 5091,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_coroutines.py",
        "path": "codebase_rag/tests/test_lua_coroutines.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines"
      }
    },
    {
      "node_id": 5092,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_closures_functions.py",
        "path": "codebase_rag/tests/test_rust_closures_functions.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions"
      }
    },
    {
      "node_id": 5093,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_memory_management.py",
        "path": "codebase_rag/tests/test_rust_memory_management.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management"
      }
    },
    {
      "node_id": 5094,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_error_handling.py",
        "path": "codebase_rag/tests/test_lua_error_handling.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_error_handling"
      }
    },
    {
      "node_id": 5095,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_string_patterns.py",
        "path": "codebase_rag/tests/test_lua_string_patterns.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_string_patterns"
      }
    },
    {
      "node_id": 5096,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_object_patterns.py",
        "path": "codebase_rag/tests/test_javascript_object_patterns.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns"
      }
    },
    {
      "node_id": 5097,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_closures.py",
        "path": "codebase_rag/tests/test_lua_closures.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_closures"
      }
    },
    {
      "node_id": 5098,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_imports.py",
        "path": "codebase_rag/tests/test_lua_imports.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_imports"
      }
    },
    {
      "node_id": 5099,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_macros_metaprogramming.py",
        "path": "codebase_rag/tests/test_rust_macros_metaprogramming.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming"
      }
    },
    {
      "node_id": 5100,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_ranges_views.py",
        "path": "codebase_rag/tests/test_cpp_ranges_views.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_ranges_views"
      }
    },
    {
      "node_id": 5101,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_table_manipulation.py",
        "path": "codebase_rag/tests/test_lua_table_manipulation.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation"
      }
    },
    {
      "node_id": 5102,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_unsafe_ffi.py",
        "path": "codebase_rag/tests/test_rust_unsafe_ffi.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi"
      }
    },
    {
      "node_id": 5103,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_declaration_files.py",
        "path": "codebase_rag/tests/test_typescript_declaration_files.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files"
      }
    },
    {
      "node_id": 5104,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_context_managers.py",
        "path": "codebase_rag/tests/test_python_context_managers.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers"
      }
    },
    {
      "node_id": 5105,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_structural_relationships.py",
        "path": "codebase_rag/tests/test_structural_relationships.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships"
      }
    },
    {
      "node_id": 5106,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_advanced_oop.py",
        "path": "codebase_rag/tests/test_java_advanced_oop.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop"
      }
    },
    {
      "node_id": 5107,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_error_handling.py",
        "path": "codebase_rag/tests/test_javascript_error_handling.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling"
      }
    },
    {
      "node_id": 5108,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_collections_frameworks.py",
        "path": "codebase_rag/tests/test_java_collections_frameworks.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks"
      }
    },
    {
      "node_id": 5109,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_constructor_destructor.py",
        "path": "codebase_rag/tests/test_cpp_constructor_destructor.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor"
      }
    },
    {
      "node_id": 5110,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_relative_import_resolution.py",
        "path": "codebase_rag/tests/test_python_relative_import_resolution.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution"
      }
    },
    {
      "node_id": 5111,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_method_calls.py",
        "path": "codebase_rag/tests/test_java_method_calls.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls"
      }
    },
    {
      "node_id": 5112,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_classes.py",
        "path": "codebase_rag/tests/test_typescript_classes.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes"
      }
    },
    {
      "node_id": 5113,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_smart_pointers.py",
        "path": "codebase_rag/tests/test_cpp_smart_pointers.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers"
      }
    },
    {
      "node_id": 5114,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_comprehensive.py",
        "path": "codebase_rag/tests/test_cpp_comprehensive.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_comprehensive"
      }
    },
    {
      "node_id": 5115,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_traits_generics.py",
        "path": "codebase_rag/tests/test_rust_traits_generics.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics"
      }
    },
    {
      "node_id": 5116,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_lambdas_functional.py",
        "path": "codebase_rag/tests/test_cpp_lambdas_functional.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambdas_functional"
      }
    },
    {
      "node_id": 5117,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_classes.py",
        "path": "codebase_rag/tests/test_javascript_classes.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes"
      }
    },
    {
      "node_id": 5118,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_async_patterns.py",
        "path": "codebase_rag/tests/test_javascript_async_patterns.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns"
      }
    },
    {
      "node_id": 5119,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_decorators.py",
        "path": "codebase_rag/tests/test_typescript_decorators.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators"
      }
    },
    {
      "node_id": 5120,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_smart_pointers.py",
        "path": "codebase_rag/tests/test_rust_smart_pointers.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers"
      }
    },
    {
      "node_id": 5121,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_error_handling_advanced.py",
        "path": "codebase_rag/tests/test_rust_error_handling_advanced.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced"
      }
    },
    {
      "node_id": 5122,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_modules.py",
        "path": "codebase_rag/tests/test_java_modules.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules"
      }
    },
    {
      "node_id": 5123,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_decorators.py",
        "path": "codebase_rag/tests/test_python_decorators.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators"
      }
    },
    {
      "node_id": 5124,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_concurrency_async.py",
        "path": "codebase_rag/tests/test_rust_concurrency_async.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async"
      }
    },
    {
      "node_id": 5125,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_modules.py",
        "path": "codebase_rag/tests/test_javascript_modules.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules"
      }
    },
    {
      "node_id": 5126,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_edge_cases.py",
        "path": "codebase_rag/tests/test_lua_edge_cases.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_edge_cases"
      }
    },
    {
      "node_id": 5127,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_realtime_updater.py",
        "path": "codebase_rag/tests/test_realtime_updater.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater"
      }
    },
    {
      "node_id": 5128,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_enums.py",
        "path": "codebase_rag/tests/test_typescript_enums.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums"
      }
    },
    {
      "node_id": 5129,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_real_world.py",
        "path": "codebase_rag/tests/test_python_real_world.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world"
      }
    },
    {
      "node_id": 5130,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_memory_management.py",
        "path": "codebase_rag/tests/test_cpp_memory_management.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_memory_management"
      }
    },
    {
      "node_id": 5131,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_modern_features.py",
        "path": "codebase_rag/tests/test_cpp_modern_features.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features"
      }
    },
    {
      "node_id": 5132,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_collections_iterators.py",
        "path": "codebase_rag/tests/test_rust_collections_iterators.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators"
      }
    },
    {
      "node_id": 5133,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_constexpr_compile_time.py",
        "path": "codebase_rag/tests/test_cpp_constexpr_compile_time.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constexpr_compile_time"
      }
    },
    {
      "node_id": 5134,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_basic_syntax.py",
        "path": "codebase_rag/tests/test_cpp_basic_syntax.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax"
      }
    },
    {
      "node_id": 5135,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_complex_cross_file_calls.py",
        "path": "codebase_rag/tests/test_complex_cross_file_calls.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_complex_cross_file_calls"
      }
    },
    {
      "node_id": 5136,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_spread_rest.py",
        "path": "codebase_rag/tests/test_javascript_spread_rest.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest"
      }
    },
    {
      "node_id": 5137,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_lambda_captures.py",
        "path": "codebase_rag/tests/test_cpp_lambda_captures.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambda_captures"
      }
    },
    {
      "node_id": 5138,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_nested_functions.py",
        "path": "codebase_rag/tests/test_python_nested_functions.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions"
      }
    },
    {
      "node_id": 5139,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_comprehensive.py",
        "path": "codebase_rag/tests/test_java_comprehensive.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive"
      }
    },
    {
      "node_id": 5140,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_imports_paths.py",
        "path": "codebase_rag/tests/test_lua_imports_paths.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_imports_paths"
      }
    },
    {
      "node_id": 5141,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_call_resolution_fallback.py",
        "path": "codebase_rag/tests/test_python_call_resolution_fallback.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback"
      }
    },
    {
      "node_id": 5142,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_format_spaceship.py",
        "path": "codebase_rag/tests/test_cpp_format_spaceship.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship"
      }
    },
    {
      "node_id": 5143,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_wildcard_import_resolution.py",
        "path": "codebase_rag/tests/test_python_wildcard_import_resolution.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution"
      }
    },
    {
      "node_id": 5144,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_friend_functions.py",
        "path": "codebase_rag/tests/test_cpp_friend_functions.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_friend_functions"
      }
    },
    {
      "node_id": 5145,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_concurrency.py",
        "path": "codebase_rag/tests/test_cpp_concurrency.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency"
      }
    },
    {
      "node_id": 5146,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_path_resolution.py",
        "path": "codebase_rag/tests/test_javascript_path_resolution.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution"
      }
    },
    {
      "node_id": 5147,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_closures_scoping.py",
        "path": "codebase_rag/tests/test_javascript_closures_scoping.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping"
      }
    },
    {
      "node_id": 5148,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_stdlib.py",
        "path": "codebase_rag/tests/test_lua_stdlib.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib"
      }
    },
    {
      "node_id": 5149,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_metatables.py",
        "path": "codebase_rag/tests/test_lua_metatables.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables"
      }
    },
    {
      "node_id": 5150,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust.py",
        "path": "codebase_rag/tests/test_rust.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust"
      }
    },
    {
      "node_id": 5151,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_nested_structures.py",
        "path": "codebase_rag/tests/test_java_nested_structures.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures"
      }
    },
    {
      "node_id": 5152,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_attributes.py",
        "path": "codebase_rag/tests/test_cpp_attributes.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes"
      }
    },
    {
      "node_id": 5153,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_nested_function_qualified_names.py",
        "path": "codebase_rag/tests/test_nested_function_qualified_names.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names"
      }
    },
    {
      "node_id": 5154,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_structs_enums.py",
        "path": "codebase_rag/tests/test_rust_structs_enums.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums"
      }
    },
    {
      "node_id": 5155,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_modern_features.py",
        "path": "codebase_rag/tests/test_lua_modern_features.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_modern_features"
      }
    },
    {
      "node_id": 5156,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_templates.py",
        "path": "codebase_rag/tests/test_cpp_templates.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates"
      }
    },
    {
      "node_id": 5157,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_edge_cases.py",
        "path": "codebase_rag/tests/test_java_edge_cases.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases"
      }
    },
    {
      "node_id": 5158,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_designated_init_consteval.py",
        "path": "codebase_rag/tests/test_cpp_designated_init_consteval.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval"
      }
    },
    {
      "node_id": 5159,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_operators_overloading.py",
        "path": "codebase_rag/tests/test_cpp_operators_overloading.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading"
      }
    },
    {
      "node_id": 5160,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_prototypes.py",
        "path": "codebase_rag/tests/test_javascript_prototypes.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes"
      }
    },
    {
      "node_id": 5161,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_concurrency.py",
        "path": "codebase_rag/tests/test_java_concurrency.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency"
      }
    },
    {
      "node_id": 5162,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_this_binding.py",
        "path": "codebase_rag/tests/test_javascript_this_binding.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding"
      }
    },
    {
      "node_id": 5163,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_includes.py",
        "path": "codebase_rag/tests/test_cpp_includes.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes"
      }
    },
    {
      "node_id": 5164,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_python_imported_class_method_calls.py",
        "path": "codebase_rag/tests/test_python_imported_class_method_calls.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imported_class_method_calls"
      }
    },
    {
      "node_id": 5165,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_file_io.py",
        "path": "codebase_rag/tests/test_lua_file_io.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io"
      }
    },
    {
      "node_id": 5166,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_modern_features.py",
        "path": "codebase_rag/tests/test_java_modern_features.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features"
      }
    },
    {
      "node_id": 5167,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_javascript_functions.py",
        "path": "codebase_rag/tests/test_javascript_functions.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions"
      }
    },
    {
      "node_id": 5168,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_performance_optimization.py",
        "path": "codebase_rag/tests/test_rust_performance_optimization.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization"
      }
    },
    {
      "node_id": 5169,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_preprocessor.py",
        "path": "codebase_rag/tests/test_cpp_preprocessor.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor"
      }
    },
    {
      "node_id": 5170,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_lua_complex_scenarios.py",
        "path": "codebase_rag/tests/test_lua_complex_scenarios.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios"
      }
    },
    {
      "node_id": 5171,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_typescript_types.py",
        "path": "codebase_rag/tests/test_typescript_types.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types"
      }
    },
    {
      "node_id": 5172,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_virtual_threads_loom.py",
        "path": "codebase_rag/tests/test_java_virtual_threads_loom.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_virtual_threads_loom"
      }
    },
    {
      "node_id": 5173,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_rust_pattern_matching.py",
        "path": "codebase_rag/tests/test_rust_pattern_matching.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching"
      }
    },
    {
      "node_id": 5174,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_error_handling.py",
        "path": "codebase_rag/tests/test_cpp_error_handling.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_error_handling"
      }
    },
    {
      "node_id": 5175,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_classes_inheritance.py",
        "path": "codebase_rag/tests/test_cpp_classes_inheritance.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance"
      }
    },
    {
      "node_id": 5176,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_java_complex_relationships.py",
        "path": "codebase_rag/tests/test_java_complex_relationships.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships"
      }
    },
    {
      "node_id": 5177,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "test_cpp_template_metaprogramming.py",
        "path": "codebase_rag/tests/test_cpp_template_metaprogramming.py",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_template_metaprogramming"
      }
    },
    {
      "node_id": 5178,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "graph_service.py",
        "path": "codebase_rag/services/graph_service.py",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service"
      }
    },
    {
      "node_id": 5179,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "__init__.py",
        "path": "codebase_rag/services/__init__.py",
        "qualified_name": "code-graph-rag.codebase_rag.services"
      }
    },
    {
      "node_id": 5180,
      "labels": [
        "Module"
      ],
      "properties": {
        "name": "llm.py",
        "path": "codebase_rag/services/llm.py",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm"
      }
    },
    {
      "node_id": 5181,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 137,
        "is_exported": false,
        "name": "find_unary_expressions",
        "qualified_name": "code-graph-rag.test_treesitter_operators.explore_operator_nodes.find_unary_expressions",
        "start_line": 121
      }
    },
    {
      "node_id": 5182,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 74,
        "is_exported": false,
        "name": "find_operator_names",
        "qualified_name": "code-graph-rag.test_treesitter_operators.explore_operator_nodes.find_operator_names",
        "start_line": 68
      }
    },
    {
      "node_id": 5183,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Compare Tree-sitter native vs custom operator extraction.",
        "end_line": 229,
        "is_exported": false,
        "name": "compare_operator_extraction",
        "qualified_name": "code-graph-rag.test_treesitter_operators.compare_operator_extraction",
        "start_line": 181
      }
    },
    {
      "node_id": 5184,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 226,
        "is_exported": false,
        "name": "traverse_and_find_operators",
        "qualified_name": "code-graph-rag.test_treesitter_operators.compare_operator_extraction.traverse_and_find_operators",
        "start_line": 208
      }
    },
    {
      "node_id": 5185,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Explore how Tree-sitter handles operators in C++ code.",
        "end_line": 178,
        "is_exported": false,
        "name": "explore_operator_nodes",
        "qualified_name": "code-graph-rag.test_treesitter_operators.explore_operator_nodes",
        "start_line": 52
      }
    },
    {
      "node_id": 5186,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Simple performance comparison.",
        "end_line": 307,
        "is_exported": false,
        "name": "performance_test",
        "qualified_name": "code-graph-rag.test_treesitter_operators.performance_test",
        "start_line": 232
      }
    },
    {
      "node_id": 5187,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 261,
        "is_exported": false,
        "name": "count_operators_treesitter",
        "qualified_name": "code-graph-rag.test_treesitter_operators.performance_test.count_operators_treesitter",
        "start_line": 251
      }
    },
    {
      "node_id": 5188,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 300,
        "is_exported": false,
        "name": "count_operators_custom",
        "qualified_name": "code-graph-rag.test_treesitter_operators.performance_test.count_operators_custom",
        "start_line": 272
      }
    },
    {
      "node_id": 5189,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 112,
        "is_exported": false,
        "name": "find_binary_expressions",
        "qualified_name": "code-graph-rag.test_treesitter_operators.explore_operator_nodes.find_binary_expressions",
        "start_line": 95
      }
    },
    {
      "node_id": 5190,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 174,
        "is_exported": false,
        "name": "find_assignment_expressions",
        "qualified_name": "code-graph-rag.test_treesitter_operators.explore_operator_nodes.find_assignment_expressions",
        "start_line": 146
      }
    },
    {
      "node_id": 5191,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initializes the graph updater and starts the file system watcher.",
        "end_line": 109,
        "is_exported": false,
        "name": "start_watcher",
        "qualified_name": "code-graph-rag.realtime_updater.start_watcher",
        "start_line": 84
      }
    },
    {
      "node_id": 5192,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build the Graph-Code binary using PyInstaller.",
        "end_line": 96,
        "is_exported": false,
        "name": "build_binary",
        "qualified_name": "code-graph-rag.build_binary.build_binary",
        "start_line": 14
      }
    },
    {
      "node_id": 5193,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Helper to create LanguageConfig without redundant name assignment.",
        "end_line": 39,
        "is_exported": false,
        "name": "create_lang_config",
        "qualified_name": "code-graph-rag.codebase_rag.language_config.create_lang_config",
        "start_line": 36
      }
    },
    {
      "node_id": 5194,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get language configuration by language name.",
        "end_line": 410,
        "is_exported": false,
        "name": "get_language_config_by_name",
        "qualified_name": "code-graph-rag.codebase_rag.language_config.get_language_config_by_name",
        "start_line": 408
      }
    },
    {
      "node_id": 5195,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initialize config names based on dict keys.",
        "end_line": 393,
        "is_exported": false,
        "name": "_initialize_config_names",
        "qualified_name": "code-graph-rag.codebase_rag.language_config._initialize_config_names",
        "start_line": 389
      }
    },
    {
      "node_id": 5196,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get language configuration based on file extension.",
        "end_line": 405,
        "is_exported": false,
        "name": "get_language_config",
        "qualified_name": "code-graph-rag.codebase_rag.language_config.get_language_config",
        "start_line": 400
      }
    },
    {
      "node_id": 5197,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect the provider based on model name patterns.",
        "end_line": 20,
        "is_exported": false,
        "name": "detect_provider_from_model",
        "qualified_name": "code-graph-rag.codebase_rag.config.detect_provider_from_model",
        "start_line": 13
      }
    },
    {
      "node_id": 5198,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convenience function to load a graph from file.",
        "end_line": 191,
        "is_exported": false,
        "name": "load_graph",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.load_graph",
        "start_line": 187
      }
    },
    {
      "node_id": 5199,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Try to load language from git submodule Python bindings.",
        "end_line": 83,
        "is_exported": false,
        "name": "_try_load_from_submodule",
        "qualified_name": "code-graph-rag.codebase_rag.parser_loader._try_load_from_submodule",
        "start_line": 18
      }
    },
    {
      "node_id": 5200,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Loads all available Tree-sitter parsers and compiles their queries.",
        "end_line": 314,
        "is_exported": false,
        "name": "load_parsers",
        "qualified_name": "code-graph-rag.codebase_rag.parser_loader.load_parsers",
        "start_line": 169
      }
    },
    {
      "node_id": 5201,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Import language loaders with proper error handling and typing.",
        "end_line": 160,
        "is_exported": false,
        "name": "_import_language_loaders",
        "qualified_name": "code-graph-rag.codebase_rag.parser_loader._import_language_loaders",
        "start_line": 87
      }
    },
    {
      "node_id": 5202,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Common setup logic for both main and optimize functions.",
        "end_line": 175,
        "is_exported": false,
        "name": "_setup_common_initialization",
        "qualified_name": "code-graph-rag.codebase_rag.main._setup_common_initialization",
        "start_line": 159
      }
    },
    {
      "node_id": 5203,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Checks for image file paths in the question, copies them to a temporary\n    directory, and replaces the path in the question.",
        "end_line": 468,
        "is_exported": false,
        "name": "_handle_chat_images",
        "qualified_name": "code-graph-rag.codebase_rag.main._handle_chat_images",
        "start_line": 397
      }
    },
    {
      "node_id": 5204,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Create and return a configuration table.",
        "end_line": 213,
        "is_exported": false,
        "name": "_create_configuration_table",
        "qualified_name": "code-graph-rag.codebase_rag.main._create_configuration_table",
        "start_line": 178
      }
    },
    {
      "node_id": 5205,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get multiline input from user with Ctrl+J to submit.",
        "end_line": 510,
        "is_exported": false,
        "name": "get_multiline_input",
        "qualified_name": "code-graph-rag.codebase_rag.main.get_multiline_input",
        "start_line": 471
      }
    },
    {
      "node_id": 5206,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "bindings.add"
        ],
        "docstring": "Submit the current input.",
        "end_line": 478,
        "is_exported": false,
        "name": "submit",
        "qualified_name": "code-graph-rag.codebase_rag.main.get_multiline_input.submit",
        "start_line": 476
      }
    },
    {
      "node_id": 5207,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "bindings.add"
        ],
        "docstring": "Insert a new line instead of submitting.",
        "end_line": 483,
        "is_exported": false,
        "name": "new_line",
        "qualified_name": "code-graph-rag.codebase_rag.main.get_multiline_input.new_line",
        "start_line": 481
      }
    },
    {
      "node_id": 5208,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "app.command"
        ],
        "docstring": "Starts the Codebase RAG CLI.",
        "end_line": 813,
        "is_exported": false,
        "name": "start",
        "qualified_name": "code-graph-rag.codebase_rag.main.start",
        "start_line": 730
      }
    },
    {
      "node_id": 5209,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Runs the optimization loop with proper confirmation handling.",
        "end_line": 365,
        "is_exported": false,
        "name": "run_optimization_loop",
        "qualified_name": "code-graph-rag.codebase_rag.main.run_optimization_loop",
        "start_line": 216
      }
    },
    {
      "node_id": 5210,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Runs the main chat loop with proper edit confirmation.",
        "end_line": 613,
        "is_exported": false,
        "name": "run_chat_loop",
        "qualified_name": "code-graph-rag.codebase_rag.main.run_chat_loop",
        "start_line": 513
      }
    },
    {
      "node_id": 5211,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Run a coroutine with proper Ctrl+C cancellation that doesn't exit the program.",
        "end_line": 394,
        "is_exported": false,
        "name": "run_with_cancellation",
        "qualified_name": "code-graph-rag.codebase_rag.main.run_with_cancellation",
        "start_line": 368
      }
    },
    {
      "node_id": 5212,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Update model settings based on command-line arguments.",
        "end_line": 627,
        "is_exported": false,
        "name": "_update_model_settings",
        "qualified_name": "code-graph-rag.codebase_rag.main._update_model_settings",
        "start_line": 616
      }
    },
    {
      "node_id": 5213,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initialize session log file.",
        "end_line": 85,
        "is_exported": false,
        "name": "init_session_log",
        "qualified_name": "code-graph-rag.codebase_rag.main.init_session_log",
        "start_line": 77
      }
    },
    {
      "node_id": 5214,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get the full session context for cancelled operations.",
        "end_line": 102,
        "is_exported": false,
        "name": "get_session_context",
        "qualified_name": "code-graph-rag.codebase_rag.main.get_session_context",
        "start_line": 96
      }
    },
    {
      "node_id": 5215,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Export graph data to a JSON file.\n\n    Args:\n        ingestor: The MemgraphIngestor instance to export from\n        output: Output file path\n\n    Returns:\n        True if export was successful, False otherwise",
        "end_line": 664,
        "is_exported": false,
        "name": "_export_graph_to_file",
        "qualified_name": "code-graph-rag.codebase_rag.main._export_graph_to_file",
        "start_line": 630
      }
    },
    {
      "node_id": 5216,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if the user's question/request would likely result in edit operations.",
        "end_line": 108,
        "is_exported": false,
        "name": "is_edit_operation_request",
        "qualified_name": "code-graph-rag.codebase_rag.main.is_edit_operation_request",
        "start_line": 105
      }
    },
    {
      "node_id": 5217,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Log an event to the session file.",
        "end_line": 93,
        "is_exported": false,
        "name": "log_session_event",
        "qualified_name": "code-graph-rag.codebase_rag.main.log_session_event",
        "start_line": 88
      }
    },
    {
      "node_id": 5218,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initializes all services and creates the RAG agent.",
        "end_line": 704,
        "is_exported": false,
        "name": "_initialize_services_and_agent",
        "qualified_name": "code-graph-rag.codebase_rag.main._initialize_services_and_agent",
        "start_line": 667
      }
    },
    {
      "node_id": 5219,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handle user rejection of edits with agent acknowledgment.",
        "end_line": 136,
        "is_exported": false,
        "name": "_handle_rejection",
        "qualified_name": "code-graph-rag.codebase_rag.main._handle_rejection",
        "start_line": 111
      }
    },
    {
      "node_id": 5220,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initializes services and runs the main application loop.",
        "end_line": 726,
        "is_exported": false,
        "name": "main_async",
        "qualified_name": "code-graph-rag.codebase_rag.main.main_async",
        "start_line": 707
      }
    },
    {
      "node_id": 5221,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Enhanced check if the response contains edit operations that need confirmation.",
        "end_line": 156,
        "is_exported": false,
        "name": "is_edit_operation_response",
        "qualified_name": "code-graph-rag.codebase_rag.main.is_edit_operation_response",
        "start_line": 139
      }
    },
    {
      "node_id": 5222,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "bindings.add"
        ],
        "docstring": "Handle Ctrl+C.",
        "end_line": 488,
        "is_exported": false,
        "name": "keyboard_interrupt",
        "qualified_name": "code-graph-rag.codebase_rag.main.get_multiline_input.keyboard_interrupt",
        "start_line": 486
      }
    },
    {
      "node_id": 5223,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Prints the breakdown of node and relationship labels.",
        "end_line": 38,
        "is_exported": false,
        "name": "print_node_and_relationship_types",
        "qualified_name": "code-graph-rag.examples.graph_export_example.print_node_and_relationship_types",
        "start_line": 30
      }
    },
    {
      "node_id": 5224,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze the exported graph and show useful information.",
        "end_line": 74,
        "is_exported": false,
        "name": "analyze_graph",
        "qualified_name": "code-graph-rag.examples.graph_export_example.analyze_graph",
        "start_line": 55
      }
    },
    {
      "node_id": 5225,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Prints the high-level summary of the graph.",
        "end_line": 27,
        "is_exported": false,
        "name": "print_summary",
        "qualified_name": "code-graph-rag.examples.graph_export_example.print_summary",
        "start_line": 21
      }
    },
    {
      "node_id": 5226,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Main function to demonstrate graph analysis.",
        "end_line": 100,
        "is_exported": false,
        "name": "main",
        "qualified_name": "code-graph-rag.examples.graph_export_example.main",
        "start_line": 77
      }
    },
    {
      "node_id": 5227,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Finds and prints a sample of nodes for a given label.",
        "end_line": 52,
        "is_exported": false,
        "name": "print_example_nodes",
        "qualified_name": "code-graph-rag.examples.graph_export_example.print_example_nodes",
        "start_line": 41
      }
    },
    {
      "node_id": 5228,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Create a query cursor for the given query.\n\n    This is a simple wrapper around QueryCursor construction to provide\n    a consistent interface across the codebase.\n\n    Args:\n        query: Query object to create cursor with\n\n    Returns:\n        A QueryCursor instance for the given query",
        "end_line": 58,
        "is_exported": false,
        "name": "get_query_cursor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.get_query_cursor",
        "start_line": 46
      }
    },
    {
      "node_id": 5229,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if parent node contains target node in its subtree.\n\n    Args:\n        parent: The parent node to search within.\n        target: The target node to search for.\n\n    Returns:\n        True if target is found within parent's subtree, False otherwise.",
        "end_line": 82,
        "is_exported": false,
        "name": "contains_node",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.contains_node",
        "start_line": 67
      }
    },
    {
      "node_id": 5230,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "lru_cache"
        ],
        "docstring": "Cache decoded text to avoid repeated UTF-8 decoding operations.\n\n    This cache significantly improves performance for large codebases where\n    the same text content appears in multiple nodes.\n\n    Args:\n        text_bytes: Raw bytes to decode\n\n    Returns:\n        Decoded UTF-8 string",
        "end_line": 26,
        "is_exported": false,
        "name": "_cached_decode_bytes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils._cached_decode_bytes",
        "start_line": 14
      }
    },
    {
      "node_id": 5231,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Safely decode node.text to string with fallback.",
        "end_line": 64,
        "is_exported": false,
        "name": "safe_decode_with_fallback",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.safe_decode_with_fallback",
        "start_line": 61
      }
    },
    {
      "node_id": 5232,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Safely decode text from a tree-sitter node with performance caching.\n\n    Args:\n        node: Tree-sitter node to decode text from, can be None.\n\n    Returns:\n        Decoded text or None if node or its text is None.",
        "end_line": 43,
        "is_exported": false,
        "name": "safe_decode_text",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.safe_decode_text",
        "start_line": 29
      }
    },
    {
      "node_id": 5233,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Ingest a method node into the graph database.\n\n    Args:\n        method_node: The tree-sitter node representing the method.\n        container_qn: The qualified name of the container (class/impl block).\n        container_type: The type of container (\"Class\", \"Interface\", etc.).\n        ingestor: The graph database ingestor.\n        function_registry: Registry mapping qualified names to function types.\n        simple_name_lookup: Lookup table for simple names to qualified names.\n        get_docstring_func: Function to extract docstring from a node.\n        language: The programming language (used for C++ specific handling).\n        extract_decorators_func: Optional function to extract decorators.\n        method_qualified_name: Optional pre-computed qualified name to use instead of generating one.",
        "end_line": 160,
        "is_exported": false,
        "name": "ingest_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.ingest_method",
        "start_line": 85
      }
    },
    {
      "node_id": 5234,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Ingest an exported function into the graph database.\n\n    This helper eliminates duplication between CommonJS and ES6 export processing.\n\n    Args:\n        function_node: The tree-sitter node representing the function.\n        function_name: The name of the function.\n        module_qn: The qualified name of the module.\n        export_type: Description for logging (e.g., \"CommonJS Export\", \"ES6 Export\").\n        ingestor: The graph database ingestor.\n        function_registry: Registry mapping qualified names to function types.\n        simple_name_lookup: Lookup table for simple names to qualified names.\n        get_docstring_func: Function to extract docstring from a node.\n        is_export_inside_function_func: Function to check if export is inside a function.",
        "end_line": 206,
        "is_exported": false,
        "name": "ingest_exported_function",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.utils.ingest_exported_function",
        "start_line": 163
      }
    },
    {
      "node_id": 5235,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the trait name from an impl block implementing a trait.\n\n    Handles patterns like:\n    - impl Display for MyStruct { ... }\n    - impl<T> Clone for MyStruct<T> { ... }\n\n    Args:\n        impl_node: The impl_item node.\n\n    Returns:\n        The name of the trait being implemented, or None if not found.",
        "end_line": 84,
        "is_exported": false,
        "name": "extract_rust_trait_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_trait_name",
        "start_line": 49
      }
    },
    {
      "node_id": 5236,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the name of a macro invocation.\n\n    Handles patterns like:\n    - println!(\"Hello\")\n    - vec![1, 2, 3]\n    - assert_eq!(a, b)\n\n    Args:\n        macro_node: The macro_invocation node.\n\n    Returns:\n        The name of the macro, or None if not found.",
        "end_line": 140,
        "is_exported": false,
        "name": "extract_rust_macro_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_macro_name",
        "start_line": 109
      }
    },
    {
      "node_id": 5237,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the full path from a scoped identifier or identifier.",
        "end_line": 190,
        "is_exported": false,
        "name": "extract_path_from_node",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_use_imports.extract_path_from_node",
        "start_line": 163
      }
    },
    {
      "node_id": 5238,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Legacy function - use extract_rust_use_imports instead.\n\n    This function is deprecated and may not handle complex import patterns correctly.",
        "end_line": 301,
        "is_exported": false,
        "name": "extract_rust_use_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_use_path",
        "start_line": 295
      }
    },
    {
      "node_id": 5239,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the type being implemented for in an impl block.\n\n    Handles patterns like:\n    - impl MyStruct { ... }\n    - impl<T> MyStruct<T> { ... }\n    - impl Display for MyStruct { ... }\n    - impl<T: Clone> Display for MyStruct<T> { ... }\n\n    Args:\n        impl_node: The impl_item node.\n\n    Returns:\n        The name of the type being implemented for, or None if not found.",
        "end_line": 46,
        "is_exported": false,
        "name": "extract_rust_impl_target",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_impl_target",
        "start_line": 8
      }
    },
    {
      "node_id": 5240,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a Rust function is async.\n\n    Args:\n        func_node: The function_item node.\n\n    Returns:\n        True if the function is async, False otherwise.",
        "end_line": 106,
        "is_exported": false,
        "name": "is_rust_async_function",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.is_rust_async_function",
        "start_line": 87
      }
    },
    {
      "node_id": 5241,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract imports from a Rust use declaration with proper path mapping.\n\n    Handles patterns like:\n    - use std::collections::HashMap; -> {\"HashMap\": \"std::collections::HashMap\"}\n    - use std::io::{self, Read, Write}; -> {\"self\": \"std::io\", \"Read\": \"std::io::Read\", \"Write\": \"std::io::Write\"}\n    - use std::collections::HashMap as Map; -> {\"Map\": \"std::collections::HashMap\"}\n    - use crate::utils::*; -> {\"*crate::utils\": \"crate::utils\"}\n\n    Args:\n        use_node: The use_declaration node.\n\n    Returns:\n        Dictionary mapping imported names to their full paths.",
        "end_line": 292,
        "is_exported": false,
        "name": "extract_rust_use_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_use_imports",
        "start_line": 143
      }
    },
    {
      "node_id": 5242,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 184,
        "is_exported": false,
        "name": "collect_path_parts",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_use_imports.extract_path_from_node.collect_path_parts",
        "start_line": 171
      }
    },
    {
      "node_id": 5243,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a use tree node and extract imports.",
        "end_line": 285,
        "is_exported": false,
        "name": "process_use_tree",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.extract_rust_use_imports.process_use_tree",
        "start_line": 192
      }
    },
    {
      "node_id": 5244,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get the visibility modifier of a Rust item.\n\n    Args:\n        node: Any Rust item node (function, struct, enum, etc.).\n\n    Returns:\n        The visibility level: \"public\", \"crate\", \"super\", \"private\", or \"module\".",
        "end_line": 327,
        "is_exported": false,
        "name": "get_rust_visibility",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.get_rust_visibility",
        "start_line": 304
      }
    },
    {
      "node_id": 5245,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build a path of containing modules/types for a Rust node.\n\n    Traverses up the AST from the given node to find all containing modules,\n    impl blocks, and optionally classes.\n\n    Args:\n        node: The tree-sitter node to start from.\n        include_impl_targets: If True, include impl block targets in the path.\n        include_classes: If True, include containing class types in the path.\n        class_node_types: List of node types to consider as classes (for include_classes).\n\n    Returns:\n        List of path components from outermost to innermost (excluding source_file).\n        For example: [\"outer_mod\", \"inner_mod\", \"MyStruct\"] for a method inside\n        nested modules and an impl block.",
        "end_line": 378,
        "is_exported": false,
        "name": "build_rust_module_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.rust_utils.build_rust_module_path",
        "start_line": 330
      }
    },
    {
      "node_id": 5246,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the variable name assigned to a target node in a Lua assignment.\n\n    This function handles patterns like:\n    - local a = func()\n    - local a, b, c = func1(), func2(), func3()\n    - Calculator.divide = function() end\n\n    Args:\n        target_node: The node (typically a function or call) whose assigned name to find.\n        accepted_var_types: Tuple of acceptable variable node types to extract.\n                           Defaults to (\"identifier\",).\n\n    Returns:\n        The name of the variable assigned to the target node, or None if not found.",
        "end_line": 82,
        "is_exported": false,
        "name": "extract_lua_assigned_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.lua_utils.extract_lua_assigned_name",
        "start_line": 8
      }
    },
    {
      "node_id": 5247,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the nearest statement-like ancestor of a node.\n\n    Args:\n        node: The node to start from.\n\n    Returns:\n        The nearest ancestor that is a statement node, or None if not found.",
        "end_line": 100,
        "is_exported": false,
        "name": "find_lua_ancestor_statement",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.lua_utils.find_lua_ancestor_statement",
        "start_line": 85
      }
    },
    {
      "node_id": 5248,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the second identifier from a pcall assignment pattern.\n\n    In patterns like: local ok, json = pcall(require, 'json')\n    We want to extract 'json' (the second identifier).\n\n    Args:\n        call_node: The pcall call node.\n\n    Returns:\n        The second identifier name if found, None otherwise.",
        "end_line": 143,
        "is_exported": false,
        "name": "extract_lua_pcall_second_identifier",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.lua_utils.extract_lua_pcall_second_identifier",
        "start_line": 103
      }
    },
    {
      "node_id": 5249,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convert a simple class name to its fully qualified name.\n\n    Args:\n        class_name: The simple class name to resolve\n        module_qn: The qualified name of the current module\n        import_processor: ImportProcessor instance with import mappings\n        function_registry: FunctionRegistry instance for lookups\n\n    Returns:\n        The fully qualified class name if found, None otherwise",
        "end_line": 55,
        "is_exported": false,
        "name": "resolve_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.python_utils.resolve_class_name",
        "start_line": 10
      }
    },
    {
      "node_id": 5250,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract class name from misclassified exported class nodes (function_definition nodes that are actually classes).",
        "end_line": 168,
        "is_exported": false,
        "name": "extract_cpp_exported_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.extract_cpp_exported_class_name",
        "start_line": 160
      }
    },
    {
      "node_id": 5251,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for C++ entities, handling namespaces properly.",
        "end_line": 116,
        "is_exported": false,
        "name": "build_cpp_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.build_cpp_qualified_name",
        "start_line": 56
      }
    },
    {
      "node_id": 5252,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract destructor name from destructor_name node.",
        "end_line": 194,
        "is_exported": false,
        "name": "extract_destructor_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.extract_destructor_name",
        "start_line": 187
      }
    },
    {
      "node_id": 5253,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from C++ declaration nodes.",
        "end_line": 212,
        "is_exported": false,
        "name": "_extract_name_from_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils._extract_name_from_declaration",
        "start_line": 206
      }
    },
    {
      "node_id": 5254,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from function_declarator nodes.",
        "end_line": 252,
        "is_exported": false,
        "name": "_extract_name_from_function_declarator",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils._extract_name_from_function_declarator",
        "start_line": 240
      }
    },
    {
      "node_id": 5255,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convert C++ operator symbol to standardized name.",
        "end_line": 53,
        "is_exported": false,
        "name": "convert_operator_symbol_to_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.convert_operator_symbol_to_name",
        "start_line": 51
      }
    },
    {
      "node_id": 5256,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract operator name from operator_name node using Tree-sitter AST.",
        "end_line": 184,
        "is_exported": false,
        "name": "extract_operator_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.extract_operator_name",
        "start_line": 171
      }
    },
    {
      "node_id": 5257,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a C++ declaration is exported from a module.",
        "end_line": 157,
        "is_exported": false,
        "name": "is_cpp_exported",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.is_cpp_exported",
        "start_line": 119
      }
    },
    {
      "node_id": 5258,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from C++ function definition nodes.",
        "end_line": 203,
        "is_exported": false,
        "name": "_extract_name_from_function_definition",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils._extract_name_from_function_definition",
        "start_line": 197
      }
    },
    {
      "node_id": 5259,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from field_declaration nodes that are actually method declarations.",
        "end_line": 237,
        "is_exported": false,
        "name": "_extract_name_from_field_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils._extract_name_from_field_declaration",
        "start_line": 215
      }
    },
    {
      "node_id": 5260,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from template_declaration nodes.",
        "end_line": 265,
        "is_exported": false,
        "name": "_extract_name_from_template_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils._extract_name_from_template_declaration",
        "start_line": 255
      }
    },
    {
      "node_id": 5261,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from C++ function definitions and declarations.",
        "end_line": 299,
        "is_exported": false,
        "name": "extract_cpp_function_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.cpp_utils.extract_cpp_function_name",
        "start_line": 268
      }
    },
    {
      "node_id": 5262,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract information from a Java method or constructor declaration.\n\n    Args:\n        method_node: The method_declaration or constructor_declaration node.\n\n    Returns:\n        Dictionary containing method information:\n        - name: Method name\n        - type: \"method\" or \"constructor\"\n        - return_type: Return type (for methods)\n        - parameters: List of parameter types\n        - modifiers: List of access modifiers\n        - type_parameters: List of generic type parameters\n        - annotations: List of annotations",
        "end_line": 326,
        "is_exported": false,
        "name": "extract_java_method_info",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_method_info",
        "start_line": 234
      }
    },
    {
      "node_id": 5263,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract imports from a Java import declaration.\n\n    Handles patterns like:\n    - import java.util.List; -> {\"List\": \"java.util.List\"}\n    - import java.util.*; -> {\"*java.util\": \"java.util\"}\n    - import static java.lang.Math.PI; -> {\"PI\": \"java.lang.Math.PI\"}\n    - import static java.util.Collections.*; -> {\"*java.util.Collections\": \"java.util.Collections\"}\n\n    Args:\n        import_node: The import_declaration node.\n\n    Returns:\n        Dictionary mapping imported names to their full paths.",
        "end_line": 125,
        "is_exported": false,
        "name": "extract_java_import_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_import_path",
        "start_line": 78
      }
    },
    {
      "node_id": 5264,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract information from a Java method invocation.\n\n    Handles patterns like:\n    - methodName() -> {\"name\": \"methodName\", \"object\": None}\n    - obj.methodName() -> {\"name\": \"methodName\", \"object\": \"obj\"}\n    - this.methodName() -> {\"name\": \"methodName\", \"object\": \"this\"}\n    - super.methodName() -> {\"name\": \"methodName\", \"object\": \"super\"}\n    - ClassName.staticMethod() -> {\"name\": \"staticMethod\", \"object\": \"ClassName\"}\n\n    Args:\n        call_node: The method_invocation node.\n\n    Returns:\n        Dictionary containing call information:\n        - name: Method name being called\n        - object: Object/class the method is called on (None for local calls)\n        - arguments: Number of arguments (count)",
        "end_line": 445,
        "is_exported": false,
        "name": "extract_java_method_call_info",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_method_call_info",
        "start_line": 394
      }
    },
    {
      "node_id": 5265,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get the visibility modifier of a Java element.\n\n    Args:\n        node: Any Java node that can have visibility modifiers.\n\n    Returns:\n        The visibility level: \"public\", \"protected\", \"private\", or \"package\".",
        "end_line": 547,
        "is_exported": false,
        "name": "get_java_visibility",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.get_java_visibility",
        "start_line": 530
      }
    },
    {
      "node_id": 5266,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the package name from a Java package declaration.\n\n    Handles patterns like:\n    - package com.example.app;\n    - package java.util;\n\n    Args:\n        package_node: The package_declaration node.\n\n    Returns:\n        The full package name, or None if not found.",
        "end_line": 75,
        "is_exported": false,
        "name": "extract_java_package_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_package_name",
        "start_line": 52
      }
    },
    {
      "node_id": 5267,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract information from a Java class declaration.\n\n    Args:\n        class_node: The class_declaration, interface_declaration, enum_declaration,\n                   or annotation_type_declaration node.\n\n    Returns:\n        Dictionary containing class information:\n        - name: Class name\n        - type: \"class\", \"interface\", \"enum\", or \"annotation\"\n        - superclass: Superclass name (for classes)\n        - interfaces: List of implemented interface names\n        - modifiers: List of access modifiers\n        - type_parameters: List of generic type parameters",
        "end_line": 231,
        "is_exported": false,
        "name": "extract_java_class_info",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_class_info",
        "start_line": 128
      }
    },
    {
      "node_id": 5268,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract information from a Java field declaration.\n\n    Args:\n        field_node: The field_declaration node.\n\n    Returns:\n        Dictionary containing field information:\n        - name: Field name\n        - type: Field type\n        - modifiers: List of access modifiers\n        - annotations: List of annotations",
        "end_line": 391,
        "is_exported": false,
        "name": "extract_java_field_info",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_field_info",
        "start_line": 329
      }
    },
    {
      "node_id": 5269,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a Java method is a main method using tree-sitter analysis.\n\n    Validates the complete Java main method signature:\n    public static void main(String[] args)\n\n    Args:\n        method_node: The method_declaration node.\n\n    Returns:\n        True if the method is a main method, False otherwise.",
        "end_line": 527,
        "is_exported": false,
        "name": "is_java_main_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.is_java_main_method",
        "start_line": 448
      }
    },
    {
      "node_id": 5270,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build a qualified name path for a Java node.\n\n    Traverses up the AST from the given node to find all containing classes,\n    interfaces, and optionally methods.\n\n    Args:\n        node: The tree-sitter node to start from.\n        include_classes: If True, include containing class types in the path.\n        include_methods: If True, include containing method names in the path.\n\n    Returns:\n        List of path components from outermost to innermost.\n        For example: [\"com.example\", \"OuterClass\", \"InnerClass\"] for a nested class.",
        "end_line": 602,
        "is_exported": false,
        "name": "build_java_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.build_java_qualified_name",
        "start_line": 550
      }
    },
    {
      "node_id": 5271,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract information from a Java annotation.\n\n    Handles patterns like:\n    - @Override\n    - @SuppressWarnings(\"unchecked\")\n    - @RequestMapping(value=\"/api\", method=RequestMethod.GET)\n\n    Args:\n        annotation_node: The annotation node.\n\n    Returns:\n        Dictionary containing annotation information:\n        - name: Annotation name\n        - arguments: List of argument values",
        "end_line": 642,
        "is_exported": false,
        "name": "extract_java_annotation_info",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.extract_java_annotation_info",
        "start_line": 605
      }
    },
    {
      "node_id": 5272,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the file editor tool.",
        "end_line": 501,
        "is_exported": false,
        "name": "create_file_editor_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.create_file_editor_tool",
        "start_line": 471
      }
    },
    {
      "node_id": 5273,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Surgically replaces a specific code block in a file using diff-match-patch.\n        This tool finds the exact target code block and replaces only that section,\n        leaving the rest of the file completely unchanged. This is true surgical patching.\n\n        Args:\n            file_path: Path to the file to modify\n            target_code: The exact code block to find and replace (must match exactly)\n            replacement_code: The new code to replace the target with\n\n        Use this when you need to change specific functions, classes, or code blocks\n        without affecting the rest of the file. The target_code must be an exact match.",
        "end_line": 496,
        "is_exported": false,
        "name": "replace_code_surgically",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.create_file_editor_tool.replace_code_surgically",
        "start_line": 474
      }
    },
    {
      "node_id": 5274,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Checks for dangerous command patterns.",
        "end_line": 57,
        "is_exported": false,
        "name": "_is_dangerous_command",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command._is_dangerous_command",
        "start_line": 54
      }
    },
    {
      "node_id": 5275,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "A decorator that logs the execution time of the decorated asynchronous function.",
        "end_line": 103,
        "is_exported": false,
        "name": "timing_decorator",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.timing_decorator",
        "start_line": 87
      }
    },
    {
      "node_id": 5276,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "wraps"
        ],
        "end_line": 101,
        "is_exported": false,
        "name": "wrapper",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.timing_decorator.wrapper",
        "start_line": 95
      }
    },
    {
      "node_id": 5277,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Checks if a command requires user confirmation.\n    Returns (requires_confirmation, reason).",
        "end_line": 84,
        "is_exported": false,
        "name": "_requires_confirmation",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command._requires_confirmation",
        "start_line": 60
      }
    },
    {
      "node_id": 5278,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the shell command tool.",
        "end_line": 244,
        "is_exported": false,
        "name": "create_shell_command_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.create_shell_command_tool",
        "start_line": 200
      }
    },
    {
      "node_id": 5279,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Executes a shell command from the approved allowlist only.\n\n        Args:\n            command: The shell command to execute\n            user_confirmed: Set to True if user has explicitly confirmed this command\n\n        AVAILABLE COMMANDS:\n        - File operations: ls, cat, find, pwd\n        - Text search: rg (ripgrep) - USE THIS INSTEAD OF grep\n        - Version control: git (some subcommands require confirmation)\n        - Testing: pytest, mypy, ruff\n        - Package management: uv (requires confirmation)\n        - File system: rm, cp, mv, mkdir, rmdir (require confirmation)\n        - Other: echo\n\n        IMPORTANT: Use 'rg' for text searching, NOT 'grep' (grep is not available).\n\n        COMMANDS REQUIRING USER CONFIRMATION:\n        - File system: rm, cp, mv, mkdir, rmdir\n        - Package management: uv (any subcommand)\n        - Git operations: add, commit, push, pull, merge, rebase, reset, checkout, branch, tag, stash, cherry-pick, revert\n        - Safe git commands (no confirmation needed): status, log, diff, show, ls-files, remote, config\n\n        For dangerous commands:\n        1. Call once to check if confirmation needed (will return error if required)\n        2. Ask user for approval\n        3. Call again with user_confirmed=True to execute",
        "end_line": 238,
        "is_exported": false,
        "name": "run_shell_command",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.create_shell_command_tool.run_shell_command",
        "start_line": 203
      }
    },
    {
      "node_id": 5280,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Reads the content of a specified text-based file (e.g., source code, README.md, config files).\n        This tool should NOT be used for binary files like PDFs or images. For those, use the 'analyze_document' tool.",
        "end_line": 100,
        "is_exported": false,
        "name": "read_file_content",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.create_file_reader_tool.read_file_content",
        "start_line": 92
      }
    },
    {
      "node_id": 5281,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the file reader tool.",
        "end_line": 105,
        "is_exported": false,
        "name": "create_file_reader_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.create_file_reader_tool",
        "start_line": 89
      }
    },
    {
      "node_id": 5282,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyzes a document (like a PDF) to answer a specific question about its content.\n        Use this tool when a user asks a question that requires understanding the content of a non-source-code file.\n\n        Args:\n            file_path: The path to the document file (e.g., 'path/to/book.pdf').\n            question: The specific question to ask about the document's content.",
        "end_line": 179,
        "is_exported": false,
        "name": "analyze_document",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer.create_document_analyzer_tool.analyze_document",
        "start_line": 158
      }
    },
    {
      "node_id": 5283,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the document analyzer tool.",
        "end_line": 185,
        "is_exported": false,
        "name": "create_document_analyzer_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer.create_document_analyzer_tool",
        "start_line": 155
      }
    },
    {
      "node_id": 5284,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Creates a new file with the specified content.\n\n        IMPORTANT: Before using this tool, you MUST check if the file already exists using\n        the file reader or directory listing tools. If the file exists, use edit_existing_file\n        instead to preserve existing content and show diffs.\n\n        If the file already exists, it will be completely overwritten WITHOUT showing any diff.\n        Use this ONLY for creating entirely new files, not for modifying existing ones.\n        For modifying existing files with diff preview, use edit_existing_file instead.",
        "end_line": 68,
        "is_exported": false,
        "name": "create_new_file",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.create_file_writer_tool.create_new_file",
        "start_line": 56
      }
    },
    {
      "node_id": 5285,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the file writer tool.",
        "end_line": 73,
        "is_exported": false,
        "name": "create_file_writer_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.create_file_writer_tool",
        "start_line": 53
      }
    },
    {
      "node_id": 5286,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command",
          "click.argument",
          "click.option"
        ],
        "docstring": "Extract semantic categories from tree-sitter's official hierarchy.",
        "end_line": 291,
        "is_exported": false,
        "name": "extract_semantic_categories",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.add_grammar.extract_semantic_categories",
        "start_line": 265
      }
    },
    {
      "node_id": 5287,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command",
          "click.argument",
          "click.option"
        ],
        "end_line": 260,
        "is_exported": false,
        "name": "extract_types",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.add_grammar.extract_types",
        "start_line": 250
      }
    },
    {
      "node_id": 5288,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "click.group"
        ],
        "docstring": "CLI for managing language grammars",
        "end_line": 19,
        "is_exported": false,
        "name": "cli",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.cli",
        "start_line": 17
      }
    },
    {
      "node_id": 5289,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command",
          "click.argument",
          "click.option"
        ],
        "docstring": "Add a new language grammar to the project.",
        "end_line": 482,
        "is_exported": false,
        "name": "add_grammar",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.add_grammar",
        "start_line": 28
      }
    },
    {
      "node_id": 5290,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command"
        ],
        "docstring": "List all currently configured languages.",
        "end_line": 513,
        "is_exported": false,
        "name": "list_languages",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.list_languages",
        "start_line": 486
      }
    },
    {
      "node_id": 5291,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command",
          "click.argument",
          "click.option"
        ],
        "docstring": "Remove a language from the project.",
        "end_line": 585,
        "is_exported": false,
        "name": "remove_language",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.remove_language",
        "start_line": 521
      }
    },
    {
      "node_id": 5292,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "cli.command"
        ],
        "docstring": "Clean up orphaned git modules that weren't properly removed.",
        "end_line": 627,
        "is_exported": false,
        "name": "cleanup_orphaned_modules",
        "qualified_name": "code-graph-rag.codebase_rag.tools.language.cleanup_orphaned_modules",
        "start_line": 589
      }
    },
    {
      "node_id": 5293,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the code snippet retrieval tool.",
        "end_line": 99,
        "is_exported": false,
        "name": "create_code_retrieval_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval.create_code_retrieval_tool",
        "start_line": 88
      }
    },
    {
      "node_id": 5294,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Retrieves the source code for a given qualified name.",
        "end_line": 94,
        "is_exported": false,
        "name": "get_code_snippet",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval.create_code_retrieval_tool.get_code_snippet",
        "start_line": 91
      }
    },
    {
      "node_id": 5295,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "end_line": 66,
        "is_exported": false,
        "name": "create_directory_lister_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister.create_directory_lister_tool",
        "start_line": 62
      }
    },
    {
      "node_id": 5296,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function that creates the knowledge graph query tool,\n    injecting its dependencies.",
        "end_line": 106,
        "is_exported": false,
        "name": "create_query_tool",
        "qualified_name": "code-graph-rag.codebase_rag.tools.codebase_query.create_query_tool",
        "start_line": 18
      }
    },
    {
      "node_id": 5297,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Queries the codebase knowledge graph using natural language.\n\n        Provide your question in plain English about the codebase structure,\n        functions, classes, dependencies, or relationships. The tool will\n        automatically translate your natural language question into the\n        appropriate database query and return the results.\n\n        Examples:\n        - \"Find all functions that call each other\"\n        - \"What classes are in the user authentication module\"\n        - \"Show me functions with the longest call chains\"\n        - \"Which files contain functions related to database operations",
        "end_line": 101,
        "is_exported": false,
        "name": "query_codebase_knowledge_graph",
        "qualified_name": "code-graph-rag.codebase_rag.tools.codebase_query.create_query_tool.query_codebase_knowledge_graph",
        "start_line": 31
      }
    },
    {
      "node_id": 5298,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test phantom types and type markers for compile-time guarantees.",
        "end_line": 137,
        "is_exported": false,
        "name": "test_phantom_types_and_markers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.test_phantom_types_and_markers",
        "start_line": 36
      }
    },
    {
      "node_id": 5299,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex associated type patterns and projections.",
        "end_line": 357,
        "is_exported": false,
        "name": "test_advanced_associated_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.test_advanced_associated_types",
        "start_line": 229
      }
    },
    {
      "node_id": 5300,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for advanced type system testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_advanced_types_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.rust_advanced_types_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5301,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test higher-ranked trait bounds (HRTB) and for<> syntax.",
        "end_line": 226,
        "is_exported": false,
        "name": "test_higher_ranked_trait_bounds",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.test_higher_ranked_trait_bounds",
        "start_line": 140
      }
    },
    {
      "node_id": 5302,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test type-level programming and compile-time computation.",
        "end_line": 519,
        "is_exported": false,
        "name": "test_type_level_programming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.test_type_level_programming",
        "start_line": 360
      }
    },
    {
      "node_id": 5303,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced const generics patterns and compile-time evaluation.",
        "end_line": 727,
        "is_exported": false,
        "name": "test_const_generics_advanced",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_advanced_types.test_const_generics_advanced",
        "start_line": 522
      }
    },
    {
      "node_id": 5304,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Ensure Lua functions are discovered and function calls are tracked.",
        "end_line": 80,
        "is_exported": false,
        "name": "test_lua_function_discovery",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_functions.test_lua_function_discovery",
        "start_line": 8
      }
    },
    {
      "node_id": 5305,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that the help command can be invoked without errors.\n\n    This is a critical smoke test to ensure the CLI doesn't have import\n    or configuration issues that would prevent basic functionality.",
        "end_line": 36,
        "is_exported": false,
        "name": "test_help_command_works",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_main_smoke.test_help_command_works",
        "start_line": 10
      }
    },
    {
      "node_id": 5306,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that the main module can be imported without errors.",
        "end_line": 49,
        "is_exported": false,
        "name": "test_import_main_module",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_main_smoke.test_import_main_module",
        "start_line": 39
      }
    },
    {
      "node_id": 5307,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java functional interfaces and lambda expressions.",
        "end_line": 766,
        "is_exported": false,
        "name": "test_functional_interfaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional.test_functional_interfaces",
        "start_line": 417
      }
    },
    {
      "node_id": 5308,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing streams and functional programming.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_streams_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional.java_streams_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5309,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java Optional patterns and usage.",
        "end_line": 1099,
        "is_exported": false,
        "name": "test_optional_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional.test_optional_patterns",
        "start_line": 769
      }
    },
    {
      "node_id": 5310,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java method reference patterns.",
        "end_line": 1478,
        "is_exported": false,
        "name": "test_method_references_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional.test_method_references_patterns",
        "start_line": 1102
      }
    },
    {
      "node_id": 5311,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java Stream API operations.",
        "end_line": 414,
        "is_exported": false,
        "name": "test_stream_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_streams_functional.test_stream_operations",
        "start_line": 32
      }
    },
    {
      "node_id": 5312,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test perfect forwarding and universal references.",
        "end_line": 640,
        "is_exported": false,
        "name": "test_perfect_forwarding",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics.test_perfect_forwarding",
        "start_line": 364
      }
    },
    {
      "node_id": 5313,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with move semantics patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_move_semantics_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics.cpp_move_semantics_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5314,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test various move optimization patterns and techniques.",
        "end_line": 1057,
        "is_exported": false,
        "name": "test_move_optimization_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics.test_move_optimization_patterns",
        "start_line": 643
      }
    },
    {
      "node_id": 5315,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all move semantics patterns create proper relationships.",
        "end_line": 1478,
        "is_exported": false,
        "name": "test_cpp_move_semantics_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics.test_cpp_move_semantics_comprehensive",
        "start_line": 1060
      }
    },
    {
      "node_id": 5316,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic move constructors and move assignment operators.",
        "end_line": 361,
        "is_exported": false,
        "name": "test_basic_move_semantics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_move_semantics.test_basic_move_semantics",
        "start_line": 30
      }
    },
    {
      "node_id": 5317,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java reflection API usage patterns.",
        "end_line": 624,
        "is_exported": false,
        "name": "test_reflection_api_usage",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations.test_reflection_api_usage",
        "start_line": 303
      }
    },
    {
      "node_id": 5318,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing reflection and annotations.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_reflection_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations.java_reflection_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5319,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test annotation processing patterns.",
        "end_line": 1042,
        "is_exported": false,
        "name": "test_annotation_processing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations.test_annotation_processing",
        "start_line": 627
      }
    },
    {
      "node_id": 5320,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test meta-annotations and annotation inheritance patterns.",
        "end_line": 1334,
        "is_exported": false,
        "name": "test_meta_annotations_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations.test_meta_annotations_inheritance",
        "start_line": 1045
      }
    },
    {
      "node_id": 5321,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom annotation definitions and usage.",
        "end_line": 300,
        "is_exported": false,
        "name": "test_custom_annotations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_reflection_annotations.test_custom_annotations",
        "start_line": 32
      }
    },
    {
      "node_id": 5322,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test STL algorithms including sorting, searching, and transforming.",
        "end_line": 778,
        "is_exported": false,
        "name": "test_stl_algorithms",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage.test_stl_algorithms",
        "start_line": 442
      }
    },
    {
      "node_id": 5323,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with STL usage.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_stl_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage.cpp_stl_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5324,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test STL iterators and function objects.",
        "end_line": 1152,
        "is_exported": false,
        "name": "test_stl_iterators_functors",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage.test_stl_iterators_functors",
        "start_line": 781
      }
    },
    {
      "node_id": 5325,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all STL features create proper relationships.",
        "end_line": 1284,
        "is_exported": false,
        "name": "test_cpp_stl_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage.test_cpp_stl_comprehensive",
        "start_line": 1155
      }
    },
    {
      "node_id": 5326,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test STL containers including vector, map, set, deque, list.",
        "end_line": 439,
        "is_exported": false,
        "name": "test_stl_containers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_stl_usage.test_stl_containers",
        "start_line": 30
      }
    },
    {
      "node_id": 5327,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test using directives and namespace aliases.",
        "end_line": 491,
        "is_exported": false,
        "name": "test_using_directives",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces.test_using_directives",
        "start_line": 259
      }
    },
    {
      "node_id": 5328,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with namespace patterns.",
        "end_line": 26,
        "is_exported": false,
        "name": "cpp_namespaces_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces.cpp_namespaces_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5329,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all namespace patterns create proper relationships.",
        "end_line": 918,
        "is_exported": false,
        "name": "test_cpp_namespaces_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces.test_cpp_namespaces_comprehensive",
        "start_line": 713
      }
    },
    {
      "node_id": 5330,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test anonymous namespaces and internal linkage.",
        "end_line": 710,
        "is_exported": false,
        "name": "test_anonymous_namespaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces.test_anonymous_namespaces",
        "start_line": 494
      }
    },
    {
      "node_id": 5331,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic namespace declarations and usage.",
        "end_line": 256,
        "is_exported": false,
        "name": "test_basic_namespaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_namespaces.test_basic_namespaces",
        "start_line": 29
      }
    },
    {
      "node_id": 5332,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that method overrides are properly detected and tracked.",
        "end_line": 403,
        "is_exported": false,
        "name": "test_method_overrides_are_detected",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_method_overrides_are_detected",
        "start_line": 339
      }
    },
    {
      "node_id": 5333,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that INHERITS relationships are created between child and parent classes.",
        "end_line": 275,
        "is_exported": false,
        "name": "test_inheritance_relationships_are_created",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_inheritance_relationships_are_created",
        "start_line": 206
      }
    },
    {
      "node_id": 5334,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that calls to inherited methods are properly resolved.",
        "end_line": 492,
        "is_exported": false,
        "name": "test_inherited_method_calls_are_resolved",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_inherited_method_calls_are_resolved",
        "start_line": 451
      }
    },
    {
      "node_id": 5335,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test diamond where the diamond point overrides the conflicted method.",
        "end_line": 821,
        "is_exported": false,
        "name": "test_diamond_inheritance_mro_override_at_point",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_diamond_inheritance_mro_override_at_point",
        "start_line": 785
      }
    },
    {
      "node_id": 5336,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test deep diamond chains with multiple levels.",
        "end_line": 952,
        "is_exported": false,
        "name": "test_deep_diamond_chain_mro",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_deep_diamond_chain_mro",
        "start_line": 886
      }
    },
    {
      "node_id": 5337,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a temporary project with comprehensive inheritance patterns.",
        "end_line": 203,
        "is_exported": false,
        "name": "inheritance_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.inheritance_project",
        "start_line": 13
      }
    },
    {
      "node_id": 5338,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that super() calls are tracked as CALLS relationships.",
        "end_line": 336,
        "is_exported": false,
        "name": "test_super_calls_are_tracked",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_super_calls_are_tracked",
        "start_line": 278
      }
    },
    {
      "node_id": 5339,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that multiple inheritance is properly handled.",
        "end_line": 448,
        "is_exported": false,
        "name": "test_multiple_inheritance_is_handled",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_multiple_inheritance_is_handled",
        "start_line": 406
      }
    },
    {
      "node_id": 5340,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that deep inheritance chains are properly handled.",
        "end_line": 541,
        "is_exported": false,
        "name": "test_deep_inheritance_chain",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_deep_inheritance_chain",
        "start_line": 495
      }
    },
    {
      "node_id": 5341,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a project with diamond inheritance patterns for MRO testing.",
        "end_line": 717,
        "is_exported": false,
        "name": "mro_diamond_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.mro_diamond_project",
        "start_line": 545
      }
    },
    {
      "node_id": 5342,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic diamond inheritance MRO - should follow left-to-right, depth-first.",
        "end_line": 782,
        "is_exported": false,
        "name": "test_diamond_inheritance_mro_basic",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_diamond_inheritance_mro_basic",
        "start_line": 720
      }
    },
    {
      "node_id": 5343,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex multiple inheritance patterns with mixed hierarchies.",
        "end_line": 883,
        "is_exported": false,
        "name": "test_complex_multiple_inheritance_mro",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_complex_multiple_inheritance_mro",
        "start_line": 824
      }
    },
    {
      "node_id": 5344,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test asymmetric diamond inheritance with different branch depths.",
        "end_line": 1016,
        "is_exported": false,
        "name": "test_asymmetric_diamond_mro",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_asymmetric_diamond_mro",
        "start_line": 955
      }
    },
    {
      "node_id": 5345,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that BFS correctly selects the nearest override, not just any override.",
        "end_line": 1071,
        "is_exported": false,
        "name": "test_mro_nearest_override_selection",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_inheritance.test_mro_nearest_override_selection",
        "start_line": 1019
      }
    },
    {
      "node_id": 5346,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test destructuring in function parameters.",
        "end_line": 615,
        "is_exported": false,
        "name": "test_parameter_destructuring",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.test_parameter_destructuring",
        "start_line": 388
      }
    },
    {
      "node_id": 5347,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test object destructuring patterns.",
        "end_line": 213,
        "is_exported": false,
        "name": "test_object_destructuring",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.test_object_destructuring",
        "start_line": 37
      }
    },
    {
      "node_id": 5348,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all destructuring patterns.",
        "end_line": 34,
        "is_exported": false,
        "name": "javascript_destructuring_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.javascript_destructuring_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5349,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test array destructuring patterns.",
        "end_line": 385,
        "is_exported": false,
        "name": "test_array_destructuring",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.test_array_destructuring",
        "start_line": 216
      }
    },
    {
      "node_id": 5350,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test destructuring combined with import statements.",
        "end_line": 768,
        "is_exported": false,
        "name": "test_destructuring_with_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.test_destructuring_with_imports",
        "start_line": 618
      }
    },
    {
      "node_id": 5351,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all destructuring patterns create proper relationships.",
        "end_line": 898,
        "is_exported": false,
        "name": "test_destructuring_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_destructuring.test_destructuring_comprehensive",
        "start_line": 771
      }
    },
    {
      "node_id": 5352,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua inheritance pattern using metatables.",
        "end_line": 205,
        "is_exported": false,
        "name": "test_lua_inheritance_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_inheritance_pattern",
        "start_line": 103
      }
    },
    {
      "node_id": 5353,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua prototype-based OOP pattern.",
        "end_line": 395,
        "is_exported": false,
        "name": "test_lua_prototype_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_prototype_pattern",
        "start_line": 294
      }
    },
    {
      "node_id": 5354,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Lua class pattern with constructor and methods.",
        "end_line": 100,
        "is_exported": false,
        "name": "test_lua_class_pattern_basic",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_class_pattern_basic",
        "start_line": 10
      }
    },
    {
      "node_id": 5355,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua module pattern with encapsulation.",
        "end_line": 291,
        "is_exported": false,
        "name": "test_lua_module_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_module_pattern",
        "start_line": 208
      }
    },
    {
      "node_id": 5356,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua mixin pattern for multiple inheritance.",
        "end_line": 540,
        "is_exported": false,
        "name": "test_lua_mixin_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_mixin_pattern",
        "start_line": 398
      }
    },
    {
      "node_id": 5357,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua singleton pattern.",
        "end_line": 629,
        "is_exported": false,
        "name": "test_lua_singleton_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_oop_patterns.test_lua_singleton_pattern",
        "start_line": 543
      }
    },
    {
      "node_id": 5358,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test JavaScript import parsing.",
        "end_line": 67,
        "is_exported": false,
        "name": "test_javascript_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing.test_javascript_import_parsing",
        "start_line": 15
      }
    },
    {
      "node_id": 5359,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust import parsing.",
        "end_line": 175,
        "is_exported": false,
        "name": "test_rust_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing.test_rust_import_parsing",
        "start_line": 123
      }
    },
    {
      "node_id": 5360,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java import parsing.",
        "end_line": 120,
        "is_exported": false,
        "name": "test_java_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing.test_java_import_parsing",
        "start_line": 70
      }
    },
    {
      "node_id": 5361,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex Rust import patterns that were previously not supported.",
        "end_line": 253,
        "is_exported": false,
        "name": "test_rust_complex_import_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing.test_rust_complex_import_patterns",
        "start_line": 178
      }
    },
    {
      "node_id": 5362,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Go import parsing.",
        "end_line": 305,
        "is_exported": false,
        "name": "test_go_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_multilang_import_parsing.test_go_import_parsing",
        "start_line": 256
      }
    },
    {
      "node_id": 5363,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test dynamic_cast with polymorphic hierarchies.",
        "end_line": 578,
        "is_exported": false,
        "name": "test_dynamic_cast_examples",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators.test_dynamic_cast_examples",
        "start_line": 278
      }
    },
    {
      "node_id": 5364,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with casting operator patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_casting_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators.cpp_casting_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5365,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test const_cast, reinterpret_cast and C-style casts.",
        "end_line": 802,
        "is_exported": false,
        "name": "test_other_cast_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators.test_other_cast_operators",
        "start_line": 581
      }
    },
    {
      "node_id": 5366,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all casting patterns create proper relationships.",
        "end_line": 950,
        "is_exported": false,
        "name": "test_cpp_casting_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators.test_cpp_casting_comprehensive",
        "start_line": 805
      }
    },
    {
      "node_id": 5367,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test static_cast in various scenarios.",
        "end_line": 275,
        "is_exported": false,
        "name": "test_static_cast_examples",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_casting_operators.test_static_cast_examples",
        "start_line": 30
      }
    },
    {
      "node_id": 5368,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Creates a temporary repository path for a test and cleans up afterward.",
        "end_line": 23,
        "is_exported": false,
        "name": "temp_repo",
        "qualified_name": "code-graph-rag.codebase_rag.tests.conftest.temp_repo",
        "start_line": 19
      }
    },
    {
      "node_id": 5369,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Provides a mocked MemgraphIngestor instance.",
        "end_line": 29,
        "is_exported": false,
        "name": "mock_ingestor",
        "qualified_name": "code-graph-rag.codebase_rag.tests.conftest.mock_ingestor",
        "start_line": 27
      }
    },
    {
      "node_id": 5370,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Provides a mocked GraphUpdater instance with necessary dependencies.",
        "end_line": 58,
        "is_exported": false,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.conftest.mock_updater",
        "start_line": 33
      }
    },
    {
      "node_id": 5371,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test deeply nested return type inference chains.",
        "end_line": 406,
        "is_exported": false,
        "name": "test_nested_return_type_inference",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.test_nested_return_type_inference",
        "start_line": 353
      }
    },
    {
      "node_id": 5372,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic return type inference for simple factory methods.",
        "end_line": 299,
        "is_exported": false,
        "name": "test_basic_return_type_inference",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.test_basic_return_type_inference",
        "start_line": 237
      }
    },
    {
      "node_id": 5373,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a project with various return type patterns for testing.",
        "end_line": 234,
        "is_exported": false,
        "name": "return_type_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.return_type_project",
        "start_line": 13
      }
    },
    {
      "node_id": 5374,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test return type inference through service method calls.",
        "end_line": 458,
        "is_exported": false,
        "name": "test_service_method_return_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.test_service_method_return_types",
        "start_line": 409
      }
    },
    {
      "node_id": 5375,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test return type inference for fluent interface methods.",
        "end_line": 350,
        "is_exported": false,
        "name": "test_fluent_interface_return_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.test_fluent_interface_return_types",
        "start_line": 302
      }
    },
    {
      "node_id": 5376,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test return type inference for variables in loops.",
        "end_line": 510,
        "is_exported": false,
        "name": "test_loop_variable_return_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_return_type_inference.test_loop_variable_return_types",
        "start_line": 461
      }
    },
    {
      "node_id": 5377,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with modules patterns.",
        "end_line": 28,
        "is_exported": false,
        "name": "cpp_modules_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modules.cpp_modules_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5378,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module partitions and internal module structure.",
        "end_line": 659,
        "is_exported": false,
        "name": "test_module_partitions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modules.test_module_partitions",
        "start_line": 335
      }
    },
    {
      "node_id": 5379,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module imports and usage patterns.",
        "end_line": 874,
        "is_exported": false,
        "name": "test_module_imports_usage",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modules.test_module_imports_usage",
        "start_line": 662
      }
    },
    {
      "node_id": 5380,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic module interface declarations and exports.",
        "end_line": 332,
        "is_exported": false,
        "name": "test_basic_module_interface",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modules.test_basic_module_interface",
        "start_line": 31
      }
    },
    {
      "node_id": 5381,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test global environment access patterns with user-defined functions.",
        "end_line": 104,
        "is_exported": false,
        "name": "test_global_environment_access",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment.test_global_environment_access",
        "start_line": 8
      }
    },
    {
      "node_id": 5382,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module environment patterns with user-defined functions.",
        "end_line": 316,
        "is_exported": false,
        "name": "test_module_environment_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment.test_module_environment_patterns",
        "start_line": 218
      }
    },
    {
      "node_id": 5383,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test dynamic code execution patterns with user-defined helpers.",
        "end_line": 418,
        "is_exported": false,
        "name": "test_dynamic_code_execution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment.test_dynamic_code_execution",
        "start_line": 319
      }
    },
    {
      "node_id": 5384,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test global variable management patterns with user-defined functions.",
        "end_line": 531,
        "is_exported": false,
        "name": "test_global_variable_management",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment.test_global_variable_management",
        "start_line": 421
      }
    },
    {
      "node_id": 5385,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test environment manipulation with user-defined helper functions.",
        "end_line": 215,
        "is_exported": false,
        "name": "test_environment_manipulation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_environment.test_environment_manipulation",
        "start_line": 107
      }
    },
    {
      "node_id": 5386,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test lifetime elision rules and implicit lifetimes.",
        "end_line": 598,
        "is_exported": false,
        "name": "test_lifetime_elision_rules",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced.test_lifetime_elision_rules",
        "start_line": 277
      }
    },
    {
      "node_id": 5387,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for advanced lifetimes testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_lifetimes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced.rust_lifetimes_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5388,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex lifetime relationships and dependencies.",
        "end_line": 274,
        "is_exported": false,
        "name": "test_complex_lifetime_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced.test_complex_lifetime_relationships",
        "start_line": 36
      }
    },
    {
      "node_id": 5389,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex borrowing scenarios and edge cases.",
        "end_line": 994,
        "is_exported": false,
        "name": "test_borrowing_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced.test_borrowing_edge_cases",
        "start_line": 601
      }
    },
    {
      "node_id": 5390,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test lifetime variance, subtyping, and coercion rules.",
        "end_line": 1406,
        "is_exported": false,
        "name": "test_lifetime_variance_and_subtyping",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_lifetimes_advanced.test_lifetime_variance_and_subtyping",
        "start_line": 997
      }
    },
    {
      "node_id": 5391,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with coroutines patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_coroutines_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_coroutines.cpp_coroutines_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5392,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom coroutine types and advanced coroutine patterns.",
        "end_line": 956,
        "is_exported": false,
        "name": "test_custom_coroutine_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_coroutines.test_custom_coroutine_types",
        "start_line": 601
      }
    },
    {
      "node_id": 5393,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async/await style coroutines with co_await.",
        "end_line": 598,
        "is_exported": false,
        "name": "test_async_await_coroutines",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_coroutines.test_async_await_coroutines",
        "start_line": 300
      }
    },
    {
      "node_id": 5394,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic generator coroutines with co_yield.",
        "end_line": 297,
        "is_exported": false,
        "name": "test_basic_generator_coroutines",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_coroutines.test_basic_generator_coroutines",
        "start_line": 30
      }
    },
    {
      "node_id": 5395,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test DAO and Repository pattern implementations.",
        "end_line": 909,
        "is_exported": false,
        "name": "test_dao_repository_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_dao_repository_patterns",
        "start_line": 652
      }
    },
    {
      "node_id": 5396,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Singleton and Factory design patterns.",
        "end_line": 410,
        "is_exported": false,
        "name": "test_design_patterns_singleton_factory",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_design_patterns_singleton_factory",
        "start_line": 199
      }
    },
    {
      "node_id": 5397,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project with real-world enterprise patterns.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_real_world_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.java_real_world_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5398,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Builder and Observer design patterns.",
        "end_line": 649,
        "is_exported": false,
        "name": "test_builder_observer_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_builder_observer_patterns",
        "start_line": 413
      }
    },
    {
      "node_id": 5399,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Spring Framework annotation patterns.",
        "end_line": 196,
        "is_exported": false,
        "name": "test_spring_framework_annotations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_spring_framework_annotations",
        "start_line": 32
      }
    },
    {
      "node_id": 5400,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Spring configuration classes and bean definitions.",
        "end_line": 1127,
        "is_exported": false,
        "name": "test_configuration_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_configuration_classes",
        "start_line": 912
      }
    },
    {
      "node_id": 5401,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test utility and helper class patterns.",
        "end_line": 1415,
        "is_exported": false,
        "name": "test_utility_helper_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_real_world.test_utility_helper_classes",
        "start_line": 1130
      }
    },
    {
      "node_id": 5402,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic module declarations and inline modules.",
        "end_line": 248,
        "is_exported": false,
        "name": "test_basic_module_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.test_basic_module_declarations",
        "start_line": 40
      }
    },
    {
      "node_id": 5403,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex module path resolution and relative paths.",
        "end_line": 835,
        "is_exported": false,
        "name": "test_module_path_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.test_module_path_resolution",
        "start_line": 550
      }
    },
    {
      "node_id": 5404,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for module system testing.",
        "end_line": 37,
        "is_exported": false,
        "name": "rust_modules_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.rust_modules_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5405,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex use statements and path resolution.",
        "end_line": 547,
        "is_exported": false,
        "name": "test_complex_use_statements",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.test_complex_use_statements",
        "start_line": 251
      }
    },
    {
      "node_id": 5406,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced visibility patterns and access control.",
        "end_line": 1195,
        "is_exported": false,
        "name": "test_advanced_visibility_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.test_advanced_visibility_patterns",
        "start_line": 838
      }
    },
    {
      "node_id": 5407,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module attributes and conditional compilation.",
        "end_line": 1534,
        "is_exported": false,
        "name": "test_module_attributes_and_cfg",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_modules_visibility.test_module_attributes_and_cfg",
        "start_line": 1198
      }
    },
    {
      "node_id": 5408,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with a sample Python project.",
        "end_line": 20,
        "is_exported": false,
        "name": "temp_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_class_method_relationship.temp_project",
        "start_line": 11
      }
    },
    {
      "node_id": 5409,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Tests that GraphUpdater correctly identifies and creates DEFINES_METHOD relationships.",
        "end_line": 58,
        "is_exported": false,
        "name": "test_defines_method_relationship_is_created",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_class_method_relationship.test_defines_method_relationship_is_created",
        "start_line": 23
      }
    },
    {
      "node_id": 5410,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with a sample Python project.",
        "end_line": 26,
        "is_exported": false,
        "name": "temp_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_graph_updater_integration.temp_project",
        "start_line": 13
      }
    },
    {
      "node_id": 5411,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Tests that GraphUpdater correctly identifies and creates CALLS relationships.",
        "end_line": 74,
        "is_exported": false,
        "name": "test_function_call_relationships_are_created",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_graph_updater_integration.test_function_call_relationships_are_created",
        "start_line": 29
      }
    },
    {
      "node_id": 5412,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.2+ goto statements and labels parsing.",
        "end_line": 252,
        "is_exported": false,
        "name": "test_lua_54_goto_labels",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_54_edge_cases.test_lua_54_goto_labels",
        "start_line": 10
      }
    },
    {
      "node_id": 5413,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.3+ bitwise operators parsing.",
        "end_line": 732,
        "is_exported": false,
        "name": "test_lua_54_bitwise_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_54_edge_cases.test_lua_54_bitwise_operators",
        "start_line": 482
      }
    },
    {
      "node_id": 5414,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.3+ UTF-8 library function calls.",
        "end_line": 479,
        "is_exported": false,
        "name": "test_lua_54_utf8_library",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_54_edge_cases.test_lua_54_utf8_library",
        "start_line": 255
      }
    },
    {
      "node_id": 5415,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Verify detection of functions, colon methods, and calls resolution.",
        "end_line": 62,
        "is_exported": false,
        "name": "test_lua_function_and_method_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_functions_methods.test_lua_function_and_method_calls",
        "start_line": 9
      }
    },
    {
      "node_id": 5416,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test pcall error handling patterns.",
        "end_line": 54,
        "is_exported": false,
        "name": "test_lua_pcall_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_pcall_patterns",
        "start_line": 12
      }
    },
    {
      "node_id": 5417,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test JSON serialization patterns.",
        "end_line": 586,
        "is_exported": false,
        "name": "test_lua_json_serialization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_json_serialization",
        "start_line": 510
      }
    },
    {
      "node_id": 5418,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test various sorting algorithms.",
        "end_line": 948,
        "is_exported": false,
        "name": "test_lua_sorting_algorithms",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_sorting_algorithms",
        "start_line": 845
      }
    },
    {
      "node_id": 5419,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Final comprehensive test to ensure we've covered major Lua features.",
        "end_line": 1939,
        "is_exported": false,
        "name": "test_lua_final_comprehensive_check",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_final_comprehensive_check",
        "start_line": 1857
      }
    },
    {
      "node_id": 5420,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test search algorithms.",
        "end_line": 1044,
        "is_exported": false,
        "name": "test_lua_search_algorithms",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_search_algorithms",
        "start_line": 951
      }
    },
    {
      "node_id": 5421,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced table operations.",
        "end_line": 249,
        "is_exported": false,
        "name": "test_lua_table_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_table_operations",
        "start_line": 187
      }
    },
    {
      "node_id": 5422,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test memory management patterns.",
        "end_line": 1350,
        "is_exported": false,
        "name": "test_lua_memory_management",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_memory_management",
        "start_line": 1280
      }
    },
    {
      "node_id": 5423,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test xpcall with custom error handlers.",
        "end_line": 88,
        "is_exported": false,
        "name": "test_lua_xpcall_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_xpcall_patterns",
        "start_line": 57
      }
    },
    {
      "node_id": 5424,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test environment and global variable management.",
        "end_line": 382,
        "is_exported": false,
        "name": "test_lua_environment_management",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_environment_management",
        "start_line": 325
      }
    },
    {
      "node_id": 5425,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test web framework-like patterns.",
        "end_line": 1545,
        "is_exported": false,
        "name": "test_lua_web_framework",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_web_framework",
        "start_line": 1453
      }
    },
    {
      "node_id": 5426,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table iteration patterns.",
        "end_line": 319,
        "is_exported": false,
        "name": "test_lua_table_iteration",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_table_iteration",
        "start_line": 252
      }
    },
    {
      "node_id": 5427,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test linked list implementation.",
        "end_line": 670,
        "is_exported": false,
        "name": "test_lua_linked_list",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_linked_list",
        "start_line": 592
      }
    },
    {
      "node_id": 5428,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test performance measurement utilities.",
        "end_line": 1447,
        "is_exported": false,
        "name": "test_lua_performance_utils",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_performance_utils",
        "start_line": 1353
      }
    },
    {
      "node_id": 5429,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced module system patterns.",
        "end_line": 435,
        "is_exported": false,
        "name": "test_lua_module_system",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_module_system",
        "start_line": 385
      }
    },
    {
      "node_id": 5430,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ORM-like database patterns.",
        "end_line": 1707,
        "is_exported": false,
        "name": "test_lua_database_orm",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_database_orm",
        "start_line": 1548
      }
    },
    {
      "node_id": 5431,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test template engine patterns.",
        "end_line": 1851,
        "is_exported": false,
        "name": "test_lua_template_engine",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_template_engine",
        "start_line": 1710
      }
    },
    {
      "node_id": 5432,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua string pattern matching.",
        "end_line": 139,
        "is_exported": false,
        "name": "test_lua_string_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_string_patterns",
        "start_line": 94
      }
    },
    {
      "node_id": 5433,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test string formatting and interpolation.",
        "end_line": 181,
        "is_exported": false,
        "name": "test_lua_string_interpolation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_string_interpolation",
        "start_line": 142
      }
    },
    {
      "node_id": 5434,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test binary tree implementation.",
        "end_line": 747,
        "is_exported": false,
        "name": "test_lua_binary_tree",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_binary_tree",
        "start_line": 673
      }
    },
    {
      "node_id": 5435,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test observer design pattern.",
        "end_line": 1104,
        "is_exported": false,
        "name": "test_lua_observer_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_observer_pattern",
        "start_line": 1050
      }
    },
    {
      "node_id": 5436,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test strategy design pattern.",
        "end_line": 1274,
        "is_exported": false,
        "name": "test_lua_strategy_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_strategy_pattern",
        "start_line": 1179
      }
    },
    {
      "node_id": 5437,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test hash table implementation.",
        "end_line": 839,
        "is_exported": false,
        "name": "test_lua_hash_table",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_hash_table",
        "start_line": 750
      }
    },
    {
      "node_id": 5438,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test factory design pattern.",
        "end_line": 1176,
        "is_exported": false,
        "name": "test_lua_factory_pattern",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_factory_pattern",
        "start_line": 1107
      }
    },
    {
      "node_id": 5439,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test file I/O operations.",
        "end_line": 507,
        "is_exported": false,
        "name": "test_lua_file_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_comprehensive.test_lua_file_operations",
        "start_line": 441
      }
    },
    {
      "node_id": 5440,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ES6 namespace (star) import parsing.",
        "end_line": 252,
        "is_exported": false,
        "name": "test_es6_namespace_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_es6_namespace_imports",
        "start_line": 194
      }
    },
    {
      "node_id": 5441,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ES6 default import parsing and relationship creation.",
        "end_line": 125,
        "is_exported": false,
        "name": "test_es6_default_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_es6_default_imports",
        "start_line": 64
      }
    },
    {
      "node_id": 5442,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test CommonJS aliased destructuring patterns ({ name: alias }).",
        "end_line": 398,
        "is_exported": false,
        "name": "test_commonjs_aliased_destructuring",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_commonjs_aliased_destructuring",
        "start_line": 336
      }
    },
    {
      "node_id": 5443,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test absolute package imports from node_modules.",
        "end_line": 549,
        "is_exported": false,
        "name": "test_absolute_package_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_absolute_package_imports",
        "start_line": 475
      }
    },
    {
      "node_id": 5444,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test files with mixed import patterns.",
        "end_line": 698,
        "is_exported": false,
        "name": "test_mixed_import_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_mixed_import_patterns",
        "start_line": 625
      }
    },
    {
      "node_id": 5445,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that aliased re-exports create correct import mappings (regression test for bug fix).",
        "end_line": 877,
        "is_exported": false,
        "name": "test_aliased_re_export_import_mapping",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_aliased_re_export_import_mapping",
        "start_line": 763
      }
    },
    {
      "node_id": 5446,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all import patterns.",
        "end_line": 61,
        "is_exported": false,
        "name": "javascript_imports_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.javascript_imports_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5447,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test CommonJS require() import parsing.",
        "end_line": 333,
        "is_exported": false,
        "name": "test_commonjs_require_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_commonjs_require_imports",
        "start_line": 255
      }
    },
    {
      "node_id": 5448,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ES6 named import parsing and relationship creation.",
        "end_line": 191,
        "is_exported": false,
        "name": "test_es6_named_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_es6_named_imports",
        "start_line": 128
      }
    },
    {
      "node_id": 5449,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import path resolution (./ and ../).",
        "end_line": 472,
        "is_exported": false,
        "name": "test_relative_path_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_relative_path_resolution",
        "start_line": 401
      }
    },
    {
      "node_id": 5450,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test dynamic import() expressions.",
        "end_line": 622,
        "is_exported": false,
        "name": "test_dynamic_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_dynamic_imports",
        "start_line": 552
      }
    },
    {
      "node_id": 5451,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that import parsing handles syntax errors gracefully.",
        "end_line": 760,
        "is_exported": false,
        "name": "test_import_error_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_import_error_handling",
        "start_line": 701
      }
    },
    {
      "node_id": 5452,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all import types create proper relationships.",
        "end_line": 965,
        "is_exported": false,
        "name": "test_import_relationships_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_import_relationships_comprehensive",
        "start_line": 880
      }
    },
    {
      "node_id": 5453,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Regression test for critical bug in CommonJS destructuring.\n\n    This test specifically addresses the bug where multiple destructured variables\n    from a single require() statement would cause IndexError due to incorrect\n    iteration logic. The bug was in _ingest_missing_import_patterns where it\n    would iterate over destructured names but try to access module_names[i]\n    and require_funcs[i] with the same index, causing failures when i >= 1.\n\n    Example that would fail before fix:\n    const { a, b, c } = require('module'); // 3 destructured, 1 module, 1 require\n    Old code: iterate i=0,1,2 over [a,b,c] but access module_names[1] (IndexError)",
        "end_line": 1085,
        "is_exported": false,
        "name": "test_commonjs_multiple_destructured_variables_regression",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_imports.test_commonjs_multiple_destructured_variables_regression",
        "start_line": 968
      }
    },
    {
      "node_id": 5454,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript conditional types and type inference.",
        "end_line": 1309,
        "is_exported": false,
        "name": "test_conditional_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.test_conditional_types",
        "start_line": 896
      }
    },
    {
      "node_id": 5455,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript generic types and constraints.",
        "end_line": 480,
        "is_exported": false,
        "name": "test_generic_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.test_generic_types",
        "start_line": 50
      }
    },
    {
      "node_id": 5456,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with advanced type patterns.",
        "end_line": 47,
        "is_exported": false,
        "name": "typescript_advanced_types_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.typescript_advanced_types_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5457,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript template literal types and string manipulation.",
        "end_line": 1728,
        "is_exported": false,
        "name": "test_template_literal_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.test_template_literal_types",
        "start_line": 1312
      }
    },
    {
      "node_id": 5458,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript utility types and mapped types.",
        "end_line": 893,
        "is_exported": false,
        "name": "test_utility_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.test_utility_types",
        "start_line": 483
      }
    },
    {
      "node_id": 5459,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript advanced type patterns are covered.",
        "end_line": 1897,
        "is_exported": false,
        "name": "test_typescript_advanced_types_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_advanced_types.test_typescript_advanced_types_comprehensive",
        "start_line": 1731
      }
    },
    {
      "node_id": 5460,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Java import parsing.",
        "end_line": 111,
        "is_exported": false,
        "name": "test_basic_java_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.test_basic_java_imports",
        "start_line": 33
      }
    },
    {
      "node_id": 5461,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java wildcard import parsing.",
        "end_line": 286,
        "is_exported": false,
        "name": "test_wildcard_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.test_wildcard_imports",
        "start_line": 198
      }
    },
    {
      "node_id": 5462,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project with complex import patterns.",
        "end_line": 30,
        "is_exported": false,
        "name": "java_imports_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.java_imports_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5463,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test imports from the same package and local packages.",
        "end_line": 416,
        "is_exported": false,
        "name": "test_package_local_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.test_package_local_imports",
        "start_line": 289
      }
    },
    {
      "node_id": 5464,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java static import parsing.",
        "end_line": 195,
        "is_exported": false,
        "name": "test_static_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.test_static_imports",
        "start_line": 114
      }
    },
    {
      "node_id": 5465,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test usage of fully qualified class names without imports.",
        "end_line": 497,
        "is_exported": false,
        "name": "test_qualified_names_without_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_imports.test_qualified_names_without_imports",
        "start_line": 419
      }
    },
    {
      "node_id": 5466,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test object safety requirements and patterns.",
        "end_line": 632,
        "is_exported": false,
        "name": "test_object_safety_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects.test_object_safety_patterns",
        "start_line": 274
      }
    },
    {
      "node_id": 5467,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for trait objects testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_trait_objects_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects.rust_trait_objects_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5468,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic trait objects and dynamic dispatch.",
        "end_line": 271,
        "is_exported": false,
        "name": "test_basic_trait_objects",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects.test_basic_trait_objects",
        "start_line": 36
      }
    },
    {
      "node_id": 5469,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced trait object patterns and combinations.",
        "end_line": 1460,
        "is_exported": false,
        "name": "test_advanced_trait_object_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects.test_advanced_trait_object_patterns",
        "start_line": 994
      }
    },
    {
      "node_id": 5470,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test dynamic dispatch patterns and performance considerations.",
        "end_line": 991,
        "is_exported": false,
        "name": "test_dynamic_dispatch_performance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_trait_objects.test_dynamic_dispatch_performance",
        "start_line": 635
      }
    },
    {
      "node_id": 5471,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that dependency injection relationships are correctly captured.",
        "end_line": 313,
        "is_exported": false,
        "name": "test_dependency_injection_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_dependency_injection_relationships",
        "start_line": 160
      }
    },
    {
      "node_id": 5472,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that method overriding relationships are correctly captured.",
        "end_line": 774,
        "is_exported": false,
        "name": "test_method_overriding_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_method_overriding_relationships",
        "start_line": 603
      }
    },
    {
      "node_id": 5473,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project structure for relationship testing.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_relationships_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.java_relationships_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5474,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that composition and aggregation relationships are correctly captured.",
        "end_line": 157,
        "is_exported": false,
        "name": "test_composition_and_aggregation_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_composition_and_aggregation_relationships",
        "start_line": 32
      }
    },
    {
      "node_id": 5475,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that relationships across different packages are correctly captured.",
        "end_line": 600,
        "is_exported": false,
        "name": "test_cross_package_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_cross_package_relationships",
        "start_line": 316
      }
    },
    {
      "node_id": 5476,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that static method and field access relationships are correctly captured.",
        "end_line": 926,
        "is_exported": false,
        "name": "test_static_method_and_field_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_static_method_and_field_relationships",
        "start_line": 777
      }
    },
    {
      "node_id": 5477,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that inner class relationships are correctly captured.",
        "end_line": 1090,
        "is_exported": false,
        "name": "test_inner_class_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_relationship_validation.test_inner_class_relationships",
        "start_line": 929
      }
    },
    {
      "node_id": 5478,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex import patterns including wildcards, conditionals, etc.",
        "end_line": 319,
        "is_exported": false,
        "name": "test_complex_import_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_complex_import_patterns",
        "start_line": 215
      }
    },
    {
      "node_id": 5479,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test standard library import parsing and relationship creation.",
        "end_line": 118,
        "is_exported": false,
        "name": "test_standard_library_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_standard_library_imports",
        "start_line": 41
      }
    },
    {
      "node_id": 5480,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test import aliases and renaming patterns.",
        "end_line": 504,
        "is_exported": false,
        "name": "test_import_aliases_and_renaming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_import_aliases_and_renaming",
        "start_line": 416
      }
    },
    {
      "node_id": 5481,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive Python project with all import patterns.",
        "end_line": 38,
        "is_exported": false,
        "name": "python_imports_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.python_imports_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5482,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import parsing and relationship creation.",
        "end_line": 212,
        "is_exported": false,
        "name": "test_relative_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_relative_imports",
        "start_line": 121
      }
    },
    {
      "node_id": 5483,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test third-party framework import patterns.",
        "end_line": 413,
        "is_exported": false,
        "name": "test_third_party_framework_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_third_party_framework_imports",
        "start_line": 322
      }
    },
    {
      "node_id": 5484,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that import parsing handles syntax errors gracefully.",
        "end_line": 572,
        "is_exported": false,
        "name": "test_import_error_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_import_error_handling",
        "start_line": 507
      }
    },
    {
      "node_id": 5485,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all import types create proper relationships.",
        "end_line": 662,
        "is_exported": false,
        "name": "test_import_relationships_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imports.test_import_relationships_comprehensive",
        "start_line": 575
      }
    },
    {
      "node_id": 5486,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript namespace merging and declaration merging.",
        "end_line": 869,
        "is_exported": false,
        "name": "test_namespace_merging",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules.test_namespace_merging",
        "start_line": 455
      }
    },
    {
      "node_id": 5487,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with namespace/module patterns.",
        "end_line": 43,
        "is_exported": false,
        "name": "typescript_namespaces_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules.typescript_namespaces_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5488,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript module patterns and ES6 modules.",
        "end_line": 1297,
        "is_exported": false,
        "name": "test_module_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules.test_module_patterns",
        "start_line": 872
      }
    },
    {
      "node_id": 5489,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript namespace/module patterns are covered.",
        "end_line": 1441,
        "is_exported": false,
        "name": "test_typescript_namespaces_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules.test_typescript_namespaces_comprehensive",
        "start_line": 1300
      }
    },
    {
      "node_id": 5490,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript namespace declarations and structure.",
        "end_line": 452,
        "is_exported": false,
        "name": "test_namespace_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_namespaces_modules.test_namespace_declarations",
        "start_line": 46
      }
    },
    {
      "node_id": 5491,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with concepts patterns.",
        "end_line": 31,
        "is_exported": false,
        "name": "cpp_concepts_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concepts.cpp_concepts_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5492,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced concepts usage patterns and custom concept definitions.",
        "end_line": 312,
        "is_exported": false,
        "name": "test_advanced_concept_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concepts.test_advanced_concept_patterns",
        "start_line": 165
      }
    },
    {
      "node_id": 5493,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic concept definitions and template constraints.",
        "end_line": 162,
        "is_exported": false,
        "name": "test_concept_definitions_and_constraints",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concepts.test_concept_definitions_and_constraints",
        "start_line": 34
      }
    },
    {
      "node_id": 5494,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test concept composition, specialization, and nested concepts.",
        "end_line": 432,
        "is_exported": false,
        "name": "test_concept_composition_and_specialization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concepts.test_concept_composition_and_specialization",
        "start_line": 315
      }
    },
    {
      "node_id": 5495,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test HTTP client request patterns.",
        "end_line": 220,
        "is_exported": false,
        "name": "test_http_client_requests",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.test_http_client_requests",
        "start_line": 43
      }
    },
    {
      "node_id": 5496,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test WebSocket and real-time communication patterns.",
        "end_line": 890,
        "is_exported": false,
        "name": "test_websockets_realtime",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.test_websockets_realtime",
        "start_line": 474
      }
    },
    {
      "node_id": 5497,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with web examples.",
        "end_line": 40,
        "is_exported": false,
        "name": "rust_web_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.rust_web_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5498,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Axum web server patterns.",
        "end_line": 471,
        "is_exported": false,
        "name": "test_web_server_axum",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.test_web_server_axum",
        "start_line": 223
      }
    },
    {
      "node_id": 5499,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test JSON API and serialization patterns.",
        "end_line": 1184,
        "is_exported": false,
        "name": "test_json_api_serialization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.test_json_api_serialization",
        "start_line": 893
      }
    },
    {
      "node_id": 5500,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test database and ORM patterns.",
        "end_line": 1659,
        "is_exported": false,
        "name": "test_database_orm_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_web_networking.test_database_orm_patterns",
        "start_line": 1187
      }
    },
    {
      "node_id": 5501,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic coroutine creation and yielding.",
        "end_line": 94,
        "is_exported": false,
        "name": "test_lua_basic_coroutines",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines.test_lua_basic_coroutines",
        "start_line": 10
      }
    },
    {
      "node_id": 5502,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test asynchronous programming patterns with coroutines.",
        "end_line": 389,
        "is_exported": false,
        "name": "test_lua_async_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines.test_lua_async_patterns",
        "start_line": 252
      }
    },
    {
      "node_id": 5503,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test generator patterns using coroutines.",
        "end_line": 517,
        "is_exported": false,
        "name": "test_lua_generator_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines.test_lua_generator_patterns",
        "start_line": 392
      }
    },
    {
      "node_id": 5504,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test state machine implementation with coroutines.",
        "end_line": 666,
        "is_exported": false,
        "name": "test_lua_state_machines",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines.test_lua_state_machines",
        "start_line": 520
      }
    },
    {
      "node_id": 5505,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test coroutine-based cooperative scheduler.",
        "end_line": 249,
        "is_exported": false,
        "name": "test_lua_coroutine_scheduler",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_coroutines.test_lua_coroutine_scheduler",
        "start_line": 97
      }
    },
    {
      "node_id": 5506,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test function pointers, function types, and function item types.",
        "end_line": 560,
        "is_exported": false,
        "name": "test_function_pointers_and_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions.test_function_pointers_and_types",
        "start_line": 256
      }
    },
    {
      "node_id": 5507,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for closures and function testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_closures_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions.rust_closures_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5508,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test higher-order functions and functional programming patterns.",
        "end_line": 941,
        "is_exported": false,
        "name": "test_higher_order_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions.test_higher_order_functions",
        "start_line": 563
      }
    },
    {
      "node_id": 5509,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async closures and future-related patterns.",
        "end_line": 1252,
        "is_exported": false,
        "name": "test_async_closures_and_futures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions.test_async_closures_and_futures",
        "start_line": 944
      }
    },
    {
      "node_id": 5510,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic closure syntax and different capture modes.",
        "end_line": 253,
        "is_exported": false,
        "name": "test_basic_closures_and_captures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_closures_functions.test_basic_closures_and_captures",
        "start_line": 36
      }
    },
    {
      "node_id": 5511,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic ownership and borrowing patterns.",
        "end_line": 94,
        "is_exported": false,
        "name": "test_ownership_borrowing_basic",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_ownership_borrowing_basic",
        "start_line": 36
      }
    },
    {
      "node_id": 5512,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test smart pointer usage (Box, Rc, RefCell, etc.).",
        "end_line": 228,
        "is_exported": false,
        "name": "test_smart_pointers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_smart_pointers",
        "start_line": 164
      }
    },
    {
      "node_id": 5513,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Drop trait implementation for cleanup.",
        "end_line": 354,
        "is_exported": false,
        "name": "test_drop_trait_cleanup",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_drop_trait_cleanup",
        "start_line": 298
      }
    },
    {
      "node_id": 5514,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with memory management examples.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_memory_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.rust_memory_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5515,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test explicit lifetime annotations.",
        "end_line": 161,
        "is_exported": false,
        "name": "test_lifetimes_explicit",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_lifetimes_explicit",
        "start_line": 97
      }
    },
    {
      "node_id": 5516,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test reference counting patterns.",
        "end_line": 295,
        "is_exported": false,
        "name": "test_reference_counting",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_reference_counting",
        "start_line": 231
      }
    },
    {
      "node_id": 5517,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test unsafe code patterns and raw pointers.",
        "end_line": 436,
        "is_exported": false,
        "name": "test_unsafe_code_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_unsafe_code_patterns",
        "start_line": 357
      }
    },
    {
      "node_id": 5518,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test memory layout and optimization patterns.",
        "end_line": 517,
        "is_exported": false,
        "name": "test_memory_layout_optimization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_memory_management.test_memory_layout_optimization",
        "start_line": 439
      }
    },
    {
      "node_id": 5519,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test pcall and xpcall error handling patterns.",
        "end_line": 313,
        "is_exported": false,
        "name": "test_lua_pcall_xpcall_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_error_handling.test_lua_pcall_xpcall_patterns",
        "start_line": 10
      }
    },
    {
      "node_id": 5520,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua exception-like patterns using coroutines and error objects.",
        "end_line": 940,
        "is_exported": false,
        "name": "test_lua_exception_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_error_handling.test_lua_exception_patterns",
        "start_line": 681
      }
    },
    {
      "node_id": 5521,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua debug library functions.",
        "end_line": 678,
        "is_exported": false,
        "name": "test_lua_debug_library",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_error_handling.test_lua_debug_library",
        "start_line": 316
      }
    },
    {
      "node_id": 5522,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced error recovery and resilience patterns.",
        "end_line": 1180,
        "is_exported": false,
        "name": "test_lua_error_recovery",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_error_handling.test_lua_error_recovery",
        "start_line": 943
      }
    },
    {
      "node_id": 5523,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined string pattern processing functions.",
        "end_line": 118,
        "is_exported": false,
        "name": "test_string_pattern_matching",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_string_patterns.test_string_pattern_matching",
        "start_line": 8
      }
    },
    {
      "node_id": 5524,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined string manipulation wrapper functions.",
        "end_line": 253,
        "is_exported": false,
        "name": "test_string_manipulation_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_string_patterns.test_string_manipulation_functions",
        "start_line": 121
      }
    },
    {
      "node_id": 5525,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined Unicode processing wrapper functions.",
        "end_line": 483,
        "is_exported": false,
        "name": "test_unicode_and_encoding",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_string_patterns.test_unicode_and_encoding",
        "start_line": 375
      }
    },
    {
      "node_id": 5526,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined complex pattern processing functions.",
        "end_line": 372,
        "is_exported": false,
        "name": "test_complex_pattern_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_string_patterns.test_complex_pattern_operations",
        "start_line": 256
      }
    },
    {
      "node_id": 5527,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test constructor function patterns.",
        "end_line": 1223,
        "is_exported": false,
        "name": "test_constructor_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.test_constructor_patterns",
        "start_line": 827
      }
    },
    {
      "node_id": 5528,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test object literal patterns and syntax.",
        "end_line": 379,
        "is_exported": false,
        "name": "test_object_literals",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.test_object_literals",
        "start_line": 50
      }
    },
    {
      "node_id": 5529,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with object patterns.",
        "end_line": 47,
        "is_exported": false,
        "name": "javascript_object_patterns_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.javascript_object_patterns_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5530,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test object composition and mixin patterns.",
        "end_line": 1664,
        "is_exported": false,
        "name": "test_object_composition",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.test_object_composition",
        "start_line": 1226
      }
    },
    {
      "node_id": 5531,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test factory function patterns.",
        "end_line": 824,
        "is_exported": false,
        "name": "test_factory_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.test_factory_functions",
        "start_line": 382
      }
    },
    {
      "node_id": 5532,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all object patterns are covered.",
        "end_line": 1796,
        "is_exported": false,
        "name": "test_object_patterns_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_object_patterns.test_object_patterns_comprehensive",
        "start_line": 1667
      }
    },
    {
      "node_id": 5533,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic closure creation and upvalue access.",
        "end_line": 139,
        "is_exported": false,
        "name": "test_lua_basic_closures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_closures.test_lua_basic_closures",
        "start_line": 10
      }
    },
    {
      "node_id": 5534,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced closure patterns like decorators and middleware.",
        "end_line": 383,
        "is_exported": false,
        "name": "test_lua_advanced_closures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_closures.test_lua_advanced_closures",
        "start_line": 142
      }
    },
    {
      "node_id": 5535,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test event system using closures for callbacks.",
        "end_line": 625,
        "is_exported": false,
        "name": "test_lua_event_system_closures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_closures.test_lua_event_system_closures",
        "start_line": 386
      }
    },
    {
      "node_id": 5536,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test functional programming patterns with closures.",
        "end_line": 893,
        "is_exported": false,
        "name": "test_lua_functional_programming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_closures.test_lua_functional_programming",
        "start_line": 628
      }
    },
    {
      "node_id": 5537,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.mark.parametrize"
        ],
        "docstring": "Ensure Lua require-based imports are captured as IMPORTS relations.\n\n    We cover both require(\"mod\") and require 'mod' syntaxes.",
        "end_line": 90,
        "is_exported": false,
        "name": "test_lua_require_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_imports.test_lua_require_imports",
        "start_line": 11
      }
    },
    {
      "node_id": 5538,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test various macro usage patterns.",
        "end_line": 749,
        "is_exported": false,
        "name": "test_macro_usage_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.test_macro_usage_patterns",
        "start_line": 469
      }
    },
    {
      "node_id": 5539,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic declarative macro patterns.",
        "end_line": 233,
        "is_exported": false,
        "name": "test_declarative_macros_basic",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.test_declarative_macros_basic",
        "start_line": 45
      }
    },
    {
      "node_id": 5540,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with macro examples.",
        "end_line": 42,
        "is_exported": false,
        "name": "rust_macros_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.rust_macros_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5541,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test procedural macro definitions.",
        "end_line": 466,
        "is_exported": false,
        "name": "test_procedural_macros",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.test_procedural_macros",
        "start_line": 236
      }
    },
    {
      "node_id": 5542,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom derive macro implementations.",
        "end_line": 977,
        "is_exported": false,
        "name": "test_derive_macros_custom",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.test_derive_macros_custom",
        "start_line": 752
      }
    },
    {
      "node_id": 5543,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced macro programming patterns.",
        "end_line": 1360,
        "is_exported": false,
        "name": "test_advanced_macro_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_macros_metaprogramming.test_advanced_macro_patterns",
        "start_line": 980
      }
    },
    {
      "node_id": 5544,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with ranges and views patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_ranges_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_ranges_views.cpp_ranges_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5545,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic std::ranges algorithms and concepts.",
        "end_line": 354,
        "is_exported": false,
        "name": "test_basic_ranges_algorithms",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_ranges_views.test_basic_ranges_algorithms",
        "start_line": 30
      }
    },
    {
      "node_id": 5546,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ranges views and view adaptors.",
        "end_line": 714,
        "is_exported": false,
        "name": "test_views_and_adaptors",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_ranges_views.test_views_and_adaptors",
        "start_line": 357
      }
    },
    {
      "node_id": 5547,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test range pipelines for graph-like data processing scenarios.",
        "end_line": 1058,
        "is_exported": false,
        "name": "test_range_pipelines_graph_processing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_ranges_views.test_range_pipelines_graph_processing",
        "start_line": 717
      }
    },
    {
      "node_id": 5548,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table iteration function calls.",
        "end_line": 146,
        "is_exported": false,
        "name": "test_table_iteration_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_iteration_patterns",
        "start_line": 74
      }
    },
    {
      "node_id": 5549,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table utility function calls.",
        "end_line": 294,
        "is_exported": false,
        "name": "test_table_utility_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_utility_functions",
        "start_line": 225
      }
    },
    {
      "node_id": 5550,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table construction and access patterns.",
        "end_line": 71,
        "is_exported": false,
        "name": "test_table_construction_and_access",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_construction_and_access",
        "start_line": 8
      }
    },
    {
      "node_id": 5551,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table modification function calls.",
        "end_line": 222,
        "is_exported": false,
        "name": "test_table_modification_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_modification_functions",
        "start_line": 149
      }
    },
    {
      "node_id": 5552,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test metatable operations on tables.",
        "end_line": 377,
        "is_exported": false,
        "name": "test_table_metatable_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_metatable_operations",
        "start_line": 297
      }
    },
    {
      "node_id": 5553,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test table serialization operations.",
        "end_line": 446,
        "is_exported": false,
        "name": "test_table_serialization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_table_manipulation.test_table_serialization",
        "start_line": 380
      }
    },
    {
      "node_id": 5554,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test unsafe traits and their implementations.",
        "end_line": 616,
        "is_exported": false,
        "name": "test_unsafe_traits_and_implementations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.test_unsafe_traits_and_implementations",
        "start_line": 379
      }
    },
    {
      "node_id": 5555,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test raw pointer operations and unsafe dereferencing.",
        "end_line": 204,
        "is_exported": false,
        "name": "test_raw_pointers_and_dereferencing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.test_raw_pointers_and_dereferencing",
        "start_line": 39
      }
    },
    {
      "node_id": 5556,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for unsafe and FFI testing.",
        "end_line": 36,
        "is_exported": false,
        "name": "rust_unsafe_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.rust_unsafe_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5557,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test inline assembly and low-level operations.",
        "end_line": 829,
        "is_exported": false,
        "name": "test_inline_assembly",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.test_inline_assembly",
        "start_line": 619
      }
    },
    {
      "node_id": 5558,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test extern C function declarations and FFI patterns.",
        "end_line": 376,
        "is_exported": false,
        "name": "test_extern_c_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.test_extern_c_functions",
        "start_line": 207
      }
    },
    {
      "node_id": 5559,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test unsafe unions and transmute operations.",
        "end_line": 1090,
        "is_exported": false,
        "name": "test_unsafe_unions_and_transmute",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_unsafe_ffi.test_unsafe_unions_and_transmute",
        "start_line": 832
      }
    },
    {
      "node_id": 5560,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript module declarations and augmentations.",
        "end_line": 875,
        "is_exported": false,
        "name": "test_module_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files.test_module_declarations",
        "start_line": 426
      }
    },
    {
      "node_id": 5561,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with declaration file patterns.",
        "end_line": 49,
        "is_exported": false,
        "name": "typescript_declarations_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files.typescript_declarations_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5562,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript declaration file patterns are covered.",
        "end_line": 1419,
        "is_exported": false,
        "name": "test_typescript_declarations_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files.test_typescript_declarations_comprehensive",
        "start_line": 1292
      }
    },
    {
      "node_id": 5563,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript ambient declarations.",
        "end_line": 423,
        "is_exported": false,
        "name": "test_ambient_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files.test_ambient_declarations",
        "start_line": 52
      }
    },
    {
      "node_id": 5564,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript global augmentations and extensions.",
        "end_line": 1289,
        "is_exported": false,
        "name": "test_global_augmentations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_declaration_files.test_global_augmentations",
        "start_line": 878
      }
    },
    {
      "node_id": 5565,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that context managers within loops and conditions are parsed.",
        "end_line": 483,
        "is_exported": false,
        "name": "test_context_manager_in_control_structures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_context_manager_in_control_structures",
        "start_line": 439
      }
    },
    {
      "node_id": 5566,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that function calls within context managers are properly tracked.",
        "end_line": 388,
        "is_exported": false,
        "name": "test_context_manager_function_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_context_manager_function_calls",
        "start_line": 293
      }
    },
    {
      "node_id": 5567,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with context manager test cases.",
        "end_line": 247,
        "is_exported": false,
        "name": "context_manager_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.context_manager_project",
        "start_line": 14
      }
    },
    {
      "node_id": 5568,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that functions containing context managers are properly parsed.",
        "end_line": 290,
        "is_exported": false,
        "name": "test_context_manager_function_definitions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_context_manager_function_definitions",
        "start_line": 250
      }
    },
    {
      "node_id": 5569,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that custom context manager classes are properly parsed.",
        "end_line": 436,
        "is_exported": false,
        "name": "test_custom_context_manager_class",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_custom_context_manager_class",
        "start_line": 391
      }
    },
    {
      "node_id": 5570,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that async context managers are properly parsed.",
        "end_line": 521,
        "is_exported": false,
        "name": "test_async_context_manager_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_async_context_manager_parsing",
        "start_line": 486
      }
    },
    {
      "node_id": 5571,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that functions decorated with @contextmanager are properly parsed.",
        "end_line": 561,
        "is_exported": false,
        "name": "test_decorated_context_manager_function",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_context_managers.test_decorated_context_manager_function",
        "start_line": 524
      }
    },
    {
      "node_id": 5572,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that CONTAINS_FILE relationships are created correctly.",
        "end_line": 540,
        "is_exported": false,
        "name": "test_contains_file_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_contains_file_relationships",
        "start_line": 381
      }
    },
    {
      "node_id": 5573,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that CONTAINS_PACKAGE relationships are created correctly.",
        "end_line": 306,
        "is_exported": false,
        "name": "test_contains_package_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_contains_package_relationships",
        "start_line": 249
      }
    },
    {
      "node_id": 5574,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for pyproject.toml.",
        "end_line": 631,
        "is_exported": false,
        "name": "test_depends_on_external_pyproject_toml",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_pyproject_toml",
        "start_line": 590
      }
    },
    {
      "node_id": 5575,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for Cargo.toml.",
        "end_line": 722,
        "is_exported": false,
        "name": "test_depends_on_external_cargo_toml",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_cargo_toml",
        "start_line": 682
      }
    },
    {
      "node_id": 5576,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for Gemfile.",
        "end_line": 810,
        "is_exported": false,
        "name": "test_depends_on_external_gemfile",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_gemfile",
        "start_line": 768
      }
    },
    {
      "node_id": 5577,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for .csproj files.",
        "end_line": 896,
        "is_exported": false,
        "name": "test_depends_on_external_csproj",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_csproj",
        "start_line": 856
      }
    },
    {
      "node_id": 5578,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a complex project structure with nested packages, folders, and files.",
        "end_line": 103,
        "is_exported": false,
        "name": "complex_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.complex_project",
        "start_line": 15
      }
    },
    {
      "node_id": 5579,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a project with various dependency files.",
        "end_line": 246,
        "is_exported": false,
        "name": "dependency_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.dependency_project",
        "start_line": 107
      }
    },
    {
      "node_id": 5580,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that CONTAINS_FOLDER relationships are created correctly.",
        "end_line": 378,
        "is_exported": false,
        "name": "test_contains_folder_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_contains_folder_relationships",
        "start_line": 309
      }
    },
    {
      "node_id": 5581,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for Python requirements.txt.",
        "end_line": 587,
        "is_exported": false,
        "name": "test_depends_on_external_python_requirements",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_python_requirements",
        "start_line": 543
      }
    },
    {
      "node_id": 5582,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for package.json.",
        "end_line": 679,
        "is_exported": false,
        "name": "test_depends_on_external_package_json",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_package_json",
        "start_line": 634
      }
    },
    {
      "node_id": 5583,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for go.mod.",
        "end_line": 765,
        "is_exported": false,
        "name": "test_depends_on_external_go_mod",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_go_mod",
        "start_line": 725
      }
    },
    {
      "node_id": 5584,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that DEPENDS_ON_EXTERNAL relationships are created for composer.json.",
        "end_line": 853,
        "is_exported": false,
        "name": "test_depends_on_external_composer_json",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_depends_on_external_composer_json",
        "start_line": 813
      }
    },
    {
      "node_id": 5585,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that both structural and dependency relationships coexist correctly.",
        "end_line": 959,
        "is_exported": false,
        "name": "test_mixed_structure_and_dependencies",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_mixed_structure_and_dependencies",
        "start_line": 899
      }
    },
    {
      "node_id": 5586,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test edge cases like empty folders, hidden files, and special file types.",
        "end_line": 1057,
        "is_exported": false,
        "name": "test_edge_cases_empty_folders_and_special_files",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_structural_relationships.test_edge_cases_empty_folders_and_special_files",
        "start_line": 962
      }
    },
    {
      "node_id": 5587,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex generic types with wildcards and bounds.",
        "end_line": 260,
        "is_exported": false,
        "name": "test_complex_generics_with_wildcards",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_complex_generics_with_wildcards",
        "start_line": 146
      }
    },
    {
      "node_id": 5588,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex method overloading scenarios.",
        "end_line": 537,
        "is_exported": false,
        "name": "test_method_overloading_variations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_method_overloading_variations",
        "start_line": 416
      }
    },
    {
      "node_id": 5589,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of diamond problem scenarios with default methods.",
        "end_line": 842,
        "is_exported": false,
        "name": "test_diamond_problem_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_diamond_problem_resolution",
        "start_line": 682
      }
    },
    {
      "node_id": 5590,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex method overriding scenarios.",
        "end_line": 1220,
        "is_exported": false,
        "name": "test_method_overriding_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_method_overriding_edge_cases",
        "start_line": 1041
      }
    },
    {
      "node_id": 5591,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex annotation scenarios.",
        "end_line": 1607,
        "is_exported": false,
        "name": "test_annotation_processing_complex",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_annotation_processing_complex",
        "start_line": 1419
      }
    },
    {
      "node_id": 5592,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project structure for advanced OOP testing.",
        "end_line": 30,
        "is_exported": false,
        "name": "java_advanced_oop_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.java_advanced_oop_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5593,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of classes implementing multiple interfaces with diamond problem.",
        "end_line": 143,
        "is_exported": false,
        "name": "test_multiple_interface_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_multiple_interface_inheritance",
        "start_line": 33
      }
    },
    {
      "node_id": 5594,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of abstract classes with mix of abstract and concrete methods.",
        "end_line": 413,
        "is_exported": false,
        "name": "test_abstract_classes_with_partial_implementation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_abstract_classes_with_partial_implementation",
        "start_line": 263
      }
    },
    {
      "node_id": 5595,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of methods with covariant return types.",
        "end_line": 679,
        "is_exported": false,
        "name": "test_covariant_return_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_covariant_return_types",
        "start_line": 540
      }
    },
    {
      "node_id": 5596,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex nested generic type bounds.",
        "end_line": 1038,
        "is_exported": false,
        "name": "test_nested_generic_bounds",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_nested_generic_bounds",
        "start_line": 845
      }
    },
    {
      "node_id": 5597,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of scenarios involving generic type erasure.",
        "end_line": 1416,
        "is_exported": false,
        "name": "test_generic_type_erasure_scenarios",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_generic_type_erasure_scenarios",
        "start_line": 1223
      }
    },
    {
      "node_id": 5598,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex inner class and nested class scenarios.",
        "end_line": 1827,
        "is_exported": false,
        "name": "test_advanced_inner_class_scenarios",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_advanced_inner_class_scenarios",
        "start_line": 1610
      }
    },
    {
      "node_id": 5599,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex static initialization scenarios.",
        "end_line": 2043,
        "is_exported": false,
        "name": "test_complex_static_initialization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_advanced_oop.test_complex_static_initialization",
        "start_line": 1830
      }
    },
    {
      "node_id": 5600,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom error class definitions and usage.",
        "end_line": 860,
        "is_exported": false,
        "name": "test_custom_error_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling.test_custom_error_classes",
        "start_line": 431
      }
    },
    {
      "node_id": 5601,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with error handling patterns.",
        "end_line": 39,
        "is_exported": false,
        "name": "javascript_error_handling_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling.javascript_error_handling_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5602,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all error handling patterns are covered.",
        "end_line": 1526,
        "is_exported": false,
        "name": "test_error_handling_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling.test_error_handling_comprehensive",
        "start_line": 1357
      }
    },
    {
      "node_id": 5603,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async function error handling patterns.",
        "end_line": 1354,
        "is_exported": false,
        "name": "test_async_error_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling.test_async_error_handling",
        "start_line": 863
      }
    },
    {
      "node_id": 5604,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test try/catch/finally block patterns.",
        "end_line": 428,
        "is_exported": false,
        "name": "test_try_catch_finally_blocks",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_error_handling.test_try_catch_finally_blocks",
        "start_line": 42
      }
    },
    {
      "node_id": 5605,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Java collection implementations (ArrayList, HashMap, TreeSet, etc.).",
        "end_line": 211,
        "is_exported": false,
        "name": "test_basic_collection_implementations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_basic_collection_implementations",
        "start_line": 32
      }
    },
    {
      "node_id": 5606,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test iterator patterns and enhanced for loops.",
        "end_line": 1086,
        "is_exported": false,
        "name": "test_iterator_patterns_enhanced_for",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_iterator_patterns_enhanced_for",
        "start_line": 829
      }
    },
    {
      "node_id": 5607,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test set operations and uniqueness constraints.",
        "end_line": 1601,
        "is_exported": false,
        "name": "test_set_operations_uniqueness",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_set_operations_uniqueness",
        "start_line": 1343
      }
    },
    {
      "node_id": 5608,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project with collections framework usage.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_collections_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.java_collections_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5609,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test comprehensive map operations and key-value handling.",
        "end_line": 1340,
        "is_exported": false,
        "name": "test_map_operations_key_value_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_map_operations_key_value_handling",
        "start_line": 1089
      }
    },
    {
      "node_id": 5610,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom collection implementations.",
        "end_line": 826,
        "is_exported": false,
        "name": "test_custom_collection_implementations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_custom_collection_implementations",
        "start_line": 214
      }
    },
    {
      "node_id": 5611,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Stream API integration with collections.",
        "end_line": 1898,
        "is_exported": false,
        "name": "test_stream_api_integration_collections",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_stream_api_integration_collections",
        "start_line": 1604
      }
    },
    {
      "node_id": 5612,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test thread-safe collections like ConcurrentHashMap.",
        "end_line": 2199,
        "is_exported": false,
        "name": "test_thread_safe_collections",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_collections_frameworks.test_thread_safe_collections",
        "start_line": 1901
      }
    },
    {
      "node_id": 5613,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic constructor and destructor patterns.",
        "end_line": 375,
        "is_exported": false,
        "name": "test_basic_constructors_destructors",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.test_basic_constructors_destructors",
        "start_line": 29
      }
    },
    {
      "node_id": 5614,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rule of Three, Rule of Five, and special member function generation.",
        "end_line": 1151,
        "is_exported": false,
        "name": "test_special_member_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.test_special_member_functions",
        "start_line": 778
      }
    },
    {
      "node_id": 5615,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Mark the constructor/destructor task as completed.",
        "end_line": 1359,
        "is_exported": false,
        "name": "test_constructor_destructor_complete",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.test_constructor_destructor_complete",
        "start_line": 1357
      }
    },
    {
      "node_id": 5616,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with constructor/destructor patterns.",
        "end_line": 26,
        "is_exported": false,
        "name": "cpp_constructor_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.cpp_constructor_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5617,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all constructor/destructor patterns create proper relationships.",
        "end_line": 1353,
        "is_exported": false,
        "name": "test_cpp_constructor_destructor_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.test_cpp_constructor_destructor_comprehensive",
        "start_line": 1154
      }
    },
    {
      "node_id": 5618,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test RAII (Resource Acquisition Is Initialization) patterns.",
        "end_line": 775,
        "is_exported": false,
        "name": "test_raii_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constructor_destructor.test_raii_patterns",
        "start_line": 378
      }
    },
    {
      "node_id": 5619,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Java method call parsing.",
        "end_line": 128,
        "is_exported": false,
        "name": "test_basic_method_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.test_basic_method_calls",
        "start_line": 32
      }
    },
    {
      "node_id": 5620,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test method calls through interfaces.",
        "end_line": 484,
        "is_exported": false,
        "name": "test_interface_method_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.test_interface_method_calls",
        "start_line": 293
      }
    },
    {
      "node_id": 5621,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project with method call patterns.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_methods_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.java_methods_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5622,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test method calls in inheritance hierarchies.",
        "end_line": 290,
        "is_exported": false,
        "name": "test_inheritance_and_polymorphism",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.test_inheritance_and_polymorphism",
        "start_line": 131
      }
    },
    {
      "node_id": 5623,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test method calls with generics.",
        "end_line": 594,
        "is_exported": false,
        "name": "test_generic_method_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.test_generic_method_calls",
        "start_line": 487
      }
    },
    {
      "node_id": 5624,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that fully qualified static method calls are resolved correctly.\n\n    This test specifically covers the bug where fully qualified class names\n    like 'java.util.Collections' were incorrectly treated as variables\n    instead of being checked directly in the function registry.",
        "end_line": 683,
        "is_exported": false,
        "name": "test_fully_qualified_static_method_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_method_calls.test_fully_qualified_static_method_calls",
        "start_line": 597
      }
    },
    {
      "node_id": 5625,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript abstract classes and methods.",
        "end_line": 697,
        "is_exported": false,
        "name": "test_abstract_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes.test_abstract_classes",
        "start_line": 332
      }
    },
    {
      "node_id": 5626,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with class features.",
        "end_line": 42,
        "is_exported": false,
        "name": "typescript_classes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes.typescript_classes_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5627,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript access modifiers (public, private, protected).",
        "end_line": 329,
        "is_exported": false,
        "name": "test_access_modifiers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes.test_access_modifiers",
        "start_line": 45
      }
    },
    {
      "node_id": 5628,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript parameter properties and constructor shortcuts.",
        "end_line": 1006,
        "is_exported": false,
        "name": "test_parameter_properties",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes.test_parameter_properties",
        "start_line": 700
      }
    },
    {
      "node_id": 5629,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript class features are covered.",
        "end_line": 1236,
        "is_exported": false,
        "name": "test_typescript_class_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_classes.test_typescript_class_comprehensive",
        "start_line": 1009
      }
    },
    {
      "node_id": 5630,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test shared_ptr usage patterns and reference counting.",
        "end_line": 824,
        "is_exported": false,
        "name": "test_shared_ptr_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers.test_shared_ptr_patterns",
        "start_line": 407
      }
    },
    {
      "node_id": 5631,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with smart pointer patterns.",
        "end_line": 26,
        "is_exported": false,
        "name": "cpp_smart_pointers_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers.cpp_smart_pointers_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5632,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all smart pointer patterns create proper relationships.",
        "end_line": 1653,
        "is_exported": false,
        "name": "test_cpp_smart_pointers_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers.test_cpp_smart_pointers_comprehensive",
        "start_line": 1282
      }
    },
    {
      "node_id": 5633,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test unique_ptr usage patterns and ownership semantics.",
        "end_line": 404,
        "is_exported": false,
        "name": "test_unique_ptr_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers.test_unique_ptr_patterns",
        "start_line": 29
      }
    },
    {
      "node_id": 5634,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test weak_ptr usage and advanced smart pointer patterns.",
        "end_line": 1279,
        "is_exported": false,
        "name": "test_weak_ptr_and_advanced_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_smart_pointers.test_weak_ptr_and_advanced_patterns",
        "start_line": 827
      }
    },
    {
      "node_id": 5635,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project combining all features.",
        "end_line": 62,
        "is_exported": false,
        "name": "cpp_comprehensive_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_comprehensive.cpp_comprehensive_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5636,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test comprehensive C++ feature integration.",
        "end_line": 705,
        "is_exported": false,
        "name": "test_comprehensive_cpp_features",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_comprehensive.test_comprehensive_cpp_features",
        "start_line": 65
      }
    },
    {
      "node_id": 5637,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Mark comprehensive C++ testing as complete.",
        "end_line": 966,
        "is_exported": false,
        "name": "test_cpp_comprehensive_complete",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_comprehensive.test_cpp_comprehensive_complete",
        "start_line": 955
      }
    },
    {
      "node_id": 5638,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test a real-world C++ scenario combining multiple files and advanced features.",
        "end_line": 951,
        "is_exported": false,
        "name": "test_real_world_cpp_scenario",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_comprehensive.test_real_world_cpp_scenario",
        "start_line": 708
      }
    },
    {
      "node_id": 5639,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic trait definition parsing and method extraction.",
        "end_line": 200,
        "is_exported": false,
        "name": "test_basic_trait_definitions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.test_basic_trait_definitions",
        "start_line": 35
      }
    },
    {
      "node_id": 5640,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test traits with associated types and constants.",
        "end_line": 609,
        "is_exported": false,
        "name": "test_associated_types_and_constants",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.test_associated_types_and_constants",
        "start_line": 391
      }
    },
    {
      "node_id": 5641,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for traits and generics testing.",
        "end_line": 32,
        "is_exported": false,
        "name": "rust_traits_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.rust_traits_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5642,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test trait objects and dynamic dispatch patterns.",
        "end_line": 822,
        "is_exported": false,
        "name": "test_trait_objects_and_dynamic_dispatch",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.test_trait_objects_and_dynamic_dispatch",
        "start_line": 612
      }
    },
    {
      "node_id": 5643,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test generic type parameters and trait bounds.",
        "end_line": 388,
        "is_exported": false,
        "name": "test_generic_types_and_constraints",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.test_generic_types_and_constraints",
        "start_line": 203
      }
    },
    {
      "node_id": 5644,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test higher-ranked trait bounds (HRTB) and complex lifetime scenarios.",
        "end_line": 1012,
        "is_exported": false,
        "name": "test_higher_ranked_trait_bounds",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_traits_generics.test_higher_ranked_trait_bounds",
        "start_line": 825
      }
    },
    {
      "node_id": 5645,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with lambda and functional programming patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_lambdas_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambdas_functional.cpp_lambdas_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5646,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic lambda expressions with different capture modes.",
        "end_line": 571,
        "is_exported": false,
        "name": "test_basic_lambdas",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambdas_functional.test_basic_lambdas",
        "start_line": 30
      }
    },
    {
      "node_id": 5647,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async and concurrent functional patterns.",
        "end_line": 817,
        "is_exported": false,
        "name": "test_async_functional_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambdas_functional.test_async_functional_patterns",
        "start_line": 574
      }
    },
    {
      "node_id": 5648,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all lambda and functional patterns create proper relationships.",
        "end_line": 920,
        "is_exported": false,
        "name": "test_cpp_lambdas_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambdas_functional.test_cpp_lambdas_comprehensive",
        "start_line": 820
      }
    },
    {
      "node_id": 5649,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test class inheritance patterns with extends and super().",
        "end_line": 447,
        "is_exported": false,
        "name": "test_class_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_class_inheritance",
        "start_line": 229
      }
    },
    {
      "node_id": 5650,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test private fields and methods (# syntax).",
        "end_line": 859,
        "is_exported": false,
        "name": "test_private_fields_and_methods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_private_fields_and_methods",
        "start_line": 646
      }
    },
    {
      "node_id": 5651,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all class patterns.",
        "end_line": 33,
        "is_exported": false,
        "name": "javascript_classes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.javascript_classes_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5652,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test static methods and static properties in classes.",
        "end_line": 643,
        "is_exported": false,
        "name": "test_static_methods_and_properties",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_static_methods_and_properties",
        "start_line": 450
      }
    },
    {
      "node_id": 5653,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic ES6 class declaration parsing.",
        "end_line": 226,
        "is_exported": false,
        "name": "test_basic_class_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_basic_class_declarations",
        "start_line": 36
      }
    },
    {
      "node_id": 5654,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test class expressions and mixin patterns.",
        "end_line": 1056,
        "is_exported": false,
        "name": "test_class_expressions_and_mixins",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_class_expressions_and_mixins",
        "start_line": 862
      }
    },
    {
      "node_id": 5655,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all class types create proper relationships.",
        "end_line": 1215,
        "is_exported": false,
        "name": "test_class_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_classes.test_class_comprehensive",
        "start_line": 1059
      }
    },
    {
      "node_id": 5656,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Promise creation, chaining, and error handling patterns.",
        "end_line": 327,
        "is_exported": false,
        "name": "test_promise_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.test_promise_patterns",
        "start_line": 38
      }
    },
    {
      "node_id": 5657,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test callback patterns and callback-based async code.",
        "end_line": 1099,
        "is_exported": false,
        "name": "test_callback_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.test_callback_patterns",
        "start_line": 714
      }
    },
    {
      "node_id": 5658,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all async patterns.",
        "end_line": 35,
        "is_exported": false,
        "name": "javascript_async_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.javascript_async_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5659,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async/await syntax and patterns.",
        "end_line": 711,
        "is_exported": false,
        "name": "test_async_await_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.test_async_await_patterns",
        "start_line": 330
      }
    },
    {
      "node_id": 5660,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test generator functions and async generators.",
        "end_line": 1452,
        "is_exported": false,
        "name": "test_generator_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.test_generator_patterns",
        "start_line": 1102
      }
    },
    {
      "node_id": 5661,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all async patterns create proper relationships.",
        "end_line": 1656,
        "is_exported": false,
        "name": "test_async_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_async_patterns.test_async_comprehensive",
        "start_line": 1455
      }
    },
    {
      "node_id": 5662,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript class decorators.",
        "end_line": 399,
        "is_exported": false,
        "name": "test_class_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.test_class_decorators",
        "start_line": 53
      }
    },
    {
      "node_id": 5663,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript property decorators.",
        "end_line": 1262,
        "is_exported": false,
        "name": "test_property_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.test_property_decorators",
        "start_line": 817
      }
    },
    {
      "node_id": 5664,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with decorator patterns.",
        "end_line": 50,
        "is_exported": false,
        "name": "typescript_decorators_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.typescript_decorators_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5665,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript parameter decorators.",
        "end_line": 1679,
        "is_exported": false,
        "name": "test_parameter_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.test_parameter_decorators",
        "start_line": 1265
      }
    },
    {
      "node_id": 5666,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript method decorators.",
        "end_line": 814,
        "is_exported": false,
        "name": "test_method_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.test_method_decorators",
        "start_line": 402
      }
    },
    {
      "node_id": 5667,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript decorator patterns are covered.",
        "end_line": 1817,
        "is_exported": false,
        "name": "test_typescript_decorators_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_decorators.test_typescript_decorators_comprehensive",
        "start_line": 1682
      }
    },
    {
      "node_id": 5668,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Box smart pointer patterns and heap allocation.",
        "end_line": 315,
        "is_exported": false,
        "name": "test_box_pointer_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.test_box_pointer_patterns",
        "start_line": 36
      }
    },
    {
      "node_id": 5669,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Arc atomic reference counting for thread safety.",
        "end_line": 1180,
        "is_exported": false,
        "name": "test_arc_atomic_reference_counting",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.test_arc_atomic_reference_counting",
        "start_line": 723
      }
    },
    {
      "node_id": 5670,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for smart pointers testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_smart_pointers_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.rust_smart_pointers_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5671,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test RefCell interior mutability patterns.",
        "end_line": 1607,
        "is_exported": false,
        "name": "test_refcell_interior_mutability",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.test_refcell_interior_mutability",
        "start_line": 1183
      }
    },
    {
      "node_id": 5672,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rc reference counting patterns and shared ownership.",
        "end_line": 720,
        "is_exported": false,
        "name": "test_rc_reference_counting",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.test_rc_reference_counting",
        "start_line": 318
      }
    },
    {
      "node_id": 5673,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom smart pointer implementations.",
        "end_line": 2090,
        "is_exported": false,
        "name": "test_custom_smart_pointers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_smart_pointers.test_custom_smart_pointers",
        "start_line": 1610
      }
    },
    {
      "node_id": 5674,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test error propagation with ? operator and error conversion.",
        "end_line": 465,
        "is_exported": false,
        "name": "test_error_propagation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.test_error_propagation",
        "start_line": 301
      }
    },
    {
      "node_id": 5675,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Result and Option handling.",
        "end_line": 138,
        "is_exported": false,
        "name": "test_result_option_basics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.test_result_option_basics",
        "start_line": 41
      }
    },
    {
      "node_id": 5676,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with error handling examples.",
        "end_line": 38,
        "is_exported": false,
        "name": "rust_error_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.rust_error_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5677,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test custom error type definitions.",
        "end_line": 298,
        "is_exported": false,
        "name": "test_custom_error_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.test_custom_error_types",
        "start_line": 141
      }
    },
    {
      "node_id": 5678,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test panic handling and recovery.",
        "end_line": 602,
        "is_exported": false,
        "name": "test_panic_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.test_panic_handling",
        "start_line": 468
      }
    },
    {
      "node_id": 5679,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced error handling patterns.",
        "end_line": 867,
        "is_exported": false,
        "name": "test_error_handling_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_error_handling_advanced.test_error_handling_patterns",
        "start_line": 605
      }
    },
    {
      "node_id": 5680,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java service provider interface patterns.",
        "end_line": 546,
        "is_exported": false,
        "name": "test_service_provider_interface",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules.test_service_provider_interface",
        "start_line": 204
      }
    },
    {
      "node_id": 5681,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing module system.",
        "end_line": 43,
        "is_exported": false,
        "name": "java_modules_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules.java_modules_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5682,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test modular application structure and cross-module dependencies.",
        "end_line": 1394,
        "is_exported": false,
        "name": "test_modular_application_structure",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules.test_modular_application_structure",
        "start_line": 833
      }
    },
    {
      "node_id": 5683,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module layer and configuration APIs.",
        "end_line": 830,
        "is_exported": false,
        "name": "test_module_layer_and_configuration",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules.test_module_layer_and_configuration",
        "start_line": 549
      }
    },
    {
      "node_id": 5684,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module-info.java declarations.",
        "end_line": 201,
        "is_exported": false,
        "name": "test_module_info_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modules.test_module_info_declarations",
        "start_line": 46
      }
    },
    {
      "node_id": 5685,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that class decorators are properly extracted.",
        "end_line": 275,
        "is_exported": false,
        "name": "test_class_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_class_decorators",
        "start_line": 229
      }
    },
    {
      "node_id": 5686,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that decorators on nested functions are extracted.",
        "end_line": 409,
        "is_exported": false,
        "name": "test_nested_function_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_nested_function_decorators",
        "start_line": 366
      }
    },
    {
      "node_id": 5687,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a temporary project with various decorator patterns.",
        "end_line": 171,
        "is_exported": false,
        "name": "decorator_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.decorator_project",
        "start_line": 13
      }
    },
    {
      "node_id": 5688,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that method decorators are properly extracted.",
        "end_line": 363,
        "is_exported": false,
        "name": "test_method_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_method_decorators",
        "start_line": 278
      }
    },
    {
      "node_id": 5689,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that function decorators are properly extracted.",
        "end_line": 226,
        "is_exported": false,
        "name": "test_simple_function_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_simple_function_decorators",
        "start_line": 174
      }
    },
    {
      "node_id": 5690,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that decorators with complex arguments are handled properly.",
        "end_line": 462,
        "is_exported": false,
        "name": "test_decorator_with_complex_arguments",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_decorator_with_complex_arguments",
        "start_line": 412
      }
    },
    {
      "node_id": 5691,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that functions without decorators have empty decorator lists.",
        "end_line": 513,
        "is_exported": false,
        "name": "test_empty_decorators_for_undecorated_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_decorators.test_empty_decorators_for_undecorated_functions",
        "start_line": 465
      }
    },
    {
      "node_id": 5692,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test shared state with Mutex and Arc.",
        "end_line": 339,
        "is_exported": false,
        "name": "test_shared_state_mutex",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_shared_state_mutex",
        "start_line": 237
      }
    },
    {
      "node_id": 5693,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic thread creation and management.",
        "end_line": 115,
        "is_exported": false,
        "name": "test_basic_threads",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_basic_threads",
        "start_line": 40
      }
    },
    {
      "node_id": 5694,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Tokio async runtime patterns.",
        "end_line": 574,
        "is_exported": false,
        "name": "test_tokio_async_runtime",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_tokio_async_runtime",
        "start_line": 448
      }
    },
    {
      "node_id": 5695,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with concurrency examples.",
        "end_line": 37,
        "is_exported": false,
        "name": "rust_concurrency_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.rust_concurrency_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5696,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test message passing with channels.",
        "end_line": 234,
        "is_exported": false,
        "name": "test_message_passing_channels",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_message_passing_channels",
        "start_line": 118
      }
    },
    {
      "node_id": 5697,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async/await basic patterns.",
        "end_line": 445,
        "is_exported": false,
        "name": "test_async_await_basics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_async_await_basics",
        "start_line": 342
      }
    },
    {
      "node_id": 5698,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parallel computing patterns.",
        "end_line": 714,
        "is_exported": false,
        "name": "test_parallel_computing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_parallel_computing",
        "start_line": 577
      }
    },
    {
      "node_id": 5699,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test atomic operations and lock-free programming.",
        "end_line": 860,
        "is_exported": false,
        "name": "test_atomic_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_concurrency_async.test_atomic_operations",
        "start_line": 717
      }
    },
    {
      "node_id": 5700,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test files using both CommonJS and ES6 modules.",
        "end_line": 637,
        "is_exported": false,
        "name": "test_mixed_module_systems",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_mixed_module_systems",
        "start_line": 435
      }
    },
    {
      "node_id": 5701,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test CommonJS module.exports patterns.",
        "end_line": 231,
        "is_exported": false,
        "name": "test_commonjs_module_exports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_commonjs_module_exports",
        "start_line": 75
      }
    },
    {
      "node_id": 5702,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test dynamic and conditional export patterns.",
        "end_line": 1100,
        "is_exported": false,
        "name": "test_dynamic_exports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_dynamic_exports",
        "start_line": 845
      }
    },
    {
      "node_id": 5703,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with module patterns.",
        "end_line": 72,
        "is_exported": false,
        "name": "javascript_modules_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.javascript_modules_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5704,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test circular dependency handling in modules.",
        "end_line": 842,
        "is_exported": false,
        "name": "test_circular_dependencies",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_circular_dependencies",
        "start_line": 640
      }
    },
    {
      "node_id": 5705,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ES6 export patterns including default and named exports.",
        "end_line": 432,
        "is_exported": false,
        "name": "test_es6_export_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_es6_export_patterns",
        "start_line": 234
      }
    },
    {
      "node_id": 5706,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test aliased re-export patterns to verify the fix for export { name as alias } from './module'.",
        "end_line": 1230,
        "is_exported": false,
        "name": "test_aliased_re_exports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_aliased_re_exports",
        "start_line": 1103
      }
    },
    {
      "node_id": 5707,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all module patterns create proper relationships.",
        "end_line": 1392,
        "is_exported": false,
        "name": "test_module_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_modules.test_module_comprehensive",
        "start_line": 1233
      }
    },
    {
      "node_id": 5708,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.mark.parametrize"
        ],
        "docstring": "Edge cases: pcall, bare require, comments (should not count).",
        "end_line": 41,
        "is_exported": false,
        "name": "test_lua_require_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_edge_cases.test_lua_require_edge_cases",
        "start_line": 19
      }
    },
    {
      "node_id": 5709,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that modifying a file triggers removal and re-ingestion.",
        "end_line": 58,
        "is_exported": false,
        "name": "test_file_modification_flow",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_file_modification_flow",
        "start_line": 41
      }
    },
    {
      "node_id": 5710,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that files in ignored directories are skipped.",
        "end_line": 89,
        "is_exported": false,
        "name": "test_irrelevant_files_are_ignored",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_irrelevant_files_are_ignored",
        "start_line": 75
      }
    },
    {
      "node_id": 5711,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Provides a CodeChangeEventHandler instance with a mocked updater.",
        "end_line": 18,
        "is_exported": false,
        "name": "event_handler",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.event_handler",
        "start_line": 16
      }
    },
    {
      "node_id": 5712,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that deleting a file triggers its removal from the graph.",
        "end_line": 72,
        "is_exported": false,
        "name": "test_file_deletion_flow",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_file_deletion_flow",
        "start_line": 61
      }
    },
    {
      "node_id": 5713,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that creating a new file triggers parsing and ingestion.",
        "end_line": 38,
        "is_exported": false,
        "name": "test_file_creation_flow",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_file_creation_flow",
        "start_line": 21
      }
    },
    {
      "node_id": 5714,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that creating a directory does not trigger any graph operations.",
        "end_line": 103,
        "is_exported": false,
        "name": "test_directory_creation_is_ignored",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_directory_creation_is_ignored",
        "start_line": 92
      }
    },
    {
      "node_id": 5715,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that changing an unsupported file type is ignored after deletion query.",
        "end_line": 118,
        "is_exported": false,
        "name": "test_unsupported_file_types_are_ignored",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_realtime_updater.test_unsupported_file_types_are_ignored",
        "start_line": 106
      }
    },
    {
      "node_id": 5716,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript string enums.",
        "end_line": 573,
        "is_exported": false,
        "name": "test_string_enums",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums.test_string_enums",
        "start_line": 289
      }
    },
    {
      "node_id": 5717,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with enum patterns.",
        "end_line": 37,
        "is_exported": false,
        "name": "typescript_enums_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums.typescript_enums_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5718,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript enum patterns are covered.",
        "end_line": 1027,
        "is_exported": false,
        "name": "test_enum_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums.test_enum_comprehensive",
        "start_line": 864
      }
    },
    {
      "node_id": 5719,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript const enums.",
        "end_line": 861,
        "is_exported": false,
        "name": "test_const_enums",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums.test_const_enums",
        "start_line": 576
      }
    },
    {
      "node_id": 5720,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript numeric enums.",
        "end_line": 286,
        "is_exported": false,
        "name": "test_numeric_enums",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_enums.test_numeric_enums",
        "start_line": 40
      }
    },
    {
      "node_id": 5721,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of Flask controller imports and dependencies.",
        "end_line": 971,
        "is_exported": false,
        "name": "test_flask_controller_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_flask_controller_imports",
        "start_line": 936
      }
    },
    {
      "node_id": 5722,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of TypeScript project structure.",
        "end_line": 1047,
        "is_exported": false,
        "name": "test_typescript_structure_detection",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_typescript_structure_detection",
        "start_line": 1012
      }
    },
    {
      "node_id": 5723,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of API service function calls.",
        "end_line": 1160,
        "is_exported": false,
        "name": "test_api_service_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_api_service_calls",
        "start_line": 1106
      }
    },
    {
      "node_id": 5724,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a real-world Flask+ReactJS todo app structure.",
        "end_line": 896,
        "is_exported": false,
        "name": "todo_app_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.todo_app_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5725,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of Flask route calling controller methods.",
        "end_line": 1009,
        "is_exported": false,
        "name": "test_flask_route_controller_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_flask_route_controller_calls",
        "start_line": 974
      }
    },
    {
      "node_id": 5726,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of model usage in controllers.",
        "end_line": 933,
        "is_exported": false,
        "name": "test_flask_model_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_flask_model_calls",
        "start_line": 899
      }
    },
    {
      "node_id": 5727,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of React hook usage and store calls.",
        "end_line": 1103,
        "is_exported": false,
        "name": "test_typescript_hook_usage",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_typescript_hook_usage",
        "start_line": 1050
      }
    },
    {
      "node_id": 5728,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test overall structure detection across Python and TypeScript.",
        "end_line": 1214,
        "is_exported": false,
        "name": "test_cross_language_api_structure",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_cross_language_api_structure",
        "start_line": 1163
      }
    },
    {
      "node_id": 5729,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test detection of schema inheritance patterns.",
        "end_line": 1252,
        "is_exported": false,
        "name": "test_schema_inheritance_detection",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_real_world.test_schema_inheritance_detection",
        "start_line": 1217
      }
    },
    {
      "node_id": 5730,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with memory management patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_memory_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_memory_management.cpp_memory_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5731,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all memory management patterns create proper relationships.",
        "end_line": 981,
        "is_exported": false,
        "name": "test_cpp_memory_management_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_memory_management.test_cpp_memory_management_comprehensive",
        "start_line": 898
      }
    },
    {
      "node_id": 5732,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test smart pointers: unique_ptr, shared_ptr, weak_ptr.",
        "end_line": 524,
        "is_exported": false,
        "name": "test_smart_pointers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_memory_management.test_smart_pointers",
        "start_line": 30
      }
    },
    {
      "node_id": 5733,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test move semantics and perfect forwarding.",
        "end_line": 895,
        "is_exported": false,
        "name": "test_move_semantics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_memory_management.test_move_semantics",
        "start_line": 527
      }
    },
    {
      "node_id": 5734,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test variadic templates and constexpr functions.",
        "end_line": 1109,
        "is_exported": false,
        "name": "test_variadic_templates_constexpr",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_variadic_templates_constexpr",
        "start_line": 842
      }
    },
    {
      "node_id": 5735,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test lambda expressions and closures.",
        "end_line": 499,
        "is_exported": false,
        "name": "test_lambda_expressions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_lambda_expressions",
        "start_line": 227
      }
    },
    {
      "node_id": 5736,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with modern features.",
        "end_line": 30,
        "is_exported": false,
        "name": "cpp_modern_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.cpp_modern_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5737,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test auto keyword and type deduction features.",
        "end_line": 224,
        "is_exported": false,
        "name": "test_auto_keyword_type_deduction",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_auto_keyword_type_deduction",
        "start_line": 33
      }
    },
    {
      "node_id": 5738,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test smart pointers and move semantics.",
        "end_line": 839,
        "is_exported": false,
        "name": "test_smart_pointers_move_semantics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_smart_pointers_move_semantics",
        "start_line": 502
      }
    },
    {
      "node_id": 5739,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test structured bindings (C++17) and range-based for loops.",
        "end_line": 1399,
        "is_exported": false,
        "name": "test_structured_bindings_ranges",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_structured_bindings_ranges",
        "start_line": 1112
      }
    },
    {
      "node_id": 5740,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all modern C++ features create proper relationships.",
        "end_line": 1601,
        "is_exported": false,
        "name": "test_cpp_modern_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_modern_features.test_cpp_modern_comprehensive",
        "start_line": 1402
      }
    },
    {
      "node_id": 5741,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test vector operations and methods.",
        "end_line": 181,
        "is_exported": false,
        "name": "test_vector_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.test_vector_operations",
        "start_line": 36
      }
    },
    {
      "node_id": 5742,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test iterator patterns and methods.",
        "end_line": 582,
        "is_exported": false,
        "name": "test_iterator_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.test_iterator_patterns",
        "start_line": 366
      }
    },
    {
      "node_id": 5743,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with collections examples.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_collections_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.rust_collections_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5744,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test HashMap operations and methods.",
        "end_line": 363,
        "is_exported": false,
        "name": "test_hashmap_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.test_hashmap_operations",
        "start_line": 184
      }
    },
    {
      "node_id": 5745,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test other collection types like HashSet, BTreeMap, etc.",
        "end_line": 796,
        "is_exported": false,
        "name": "test_other_collections",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.test_other_collections",
        "start_line": 585
      }
    },
    {
      "node_id": 5746,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test functional programming patterns with collections.",
        "end_line": 1026,
        "is_exported": false,
        "name": "test_functional_programming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_collections_iterators.test_functional_programming",
        "start_line": 799
      }
    },
    {
      "node_id": 5747,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with constexpr and compile-time programming patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_constexpr_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constexpr_compile_time.cpp_constexpr_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5748,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic constexpr functions and variables.",
        "end_line": 392,
        "is_exported": false,
        "name": "test_basic_constexpr",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constexpr_compile_time.test_basic_constexpr",
        "start_line": 30
      }
    },
    {
      "node_id": 5749,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test constexpr if and template metaprogramming.",
        "end_line": 705,
        "is_exported": false,
        "name": "test_constexpr_if_and_templates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constexpr_compile_time.test_constexpr_if_and_templates",
        "start_line": 395
      }
    },
    {
      "node_id": 5750,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all constexpr and compile-time patterns create proper relationships.",
        "end_line": 852,
        "is_exported": false,
        "name": "test_cpp_constexpr_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_constexpr_compile_time.test_cpp_constexpr_comprehensive",
        "start_line": 708
      }
    },
    {
      "node_id": 5751,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic C++ class declaration parsing.",
        "end_line": 224,
        "is_exported": false,
        "name": "test_basic_class_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.test_basic_class_declarations",
        "start_line": 34
      }
    },
    {
      "node_id": 5752,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic C++ namespace parsing and qualified names.",
        "end_line": 569,
        "is_exported": false,
        "name": "test_basic_namespaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.test_basic_namespaces",
        "start_line": 379
      }
    },
    {
      "node_id": 5753,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with basic syntax patterns.",
        "end_line": 31,
        "is_exported": false,
        "name": "cpp_basic_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.cpp_basic_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5754,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++ member function calls and method relationships.",
        "end_line": 758,
        "is_exported": false,
        "name": "test_basic_member_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.test_basic_member_functions",
        "start_line": 572
      }
    },
    {
      "node_id": 5755,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic C++ function declaration parsing.",
        "end_line": 376,
        "is_exported": false,
        "name": "test_basic_function_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.test_basic_function_declarations",
        "start_line": 227
      }
    },
    {
      "node_id": 5756,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all basic C++ patterns create proper relationships.",
        "end_line": 967,
        "is_exported": false,
        "name": "test_cpp_basic_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_basic_syntax.test_cpp_basic_comprehensive",
        "start_line": 761
      }
    },
    {
      "node_id": 5757,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with a complex Python project structure.",
        "end_line": 106,
        "is_exported": false,
        "name": "complex_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_complex_cross_file_calls.complex_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5758,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Tests that GraphUpdater correctly identifies complex cross-file function calls\n    including calls to functions with short names, functions in different packages,\n    and method calls across modules.",
        "end_line": 191,
        "is_exported": false,
        "name": "test_complex_cross_file_function_calls",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_complex_cross_file_calls.test_complex_cross_file_function_calls",
        "start_line": 109
      }
    },
    {
      "node_id": 5759,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Specifically tests that functions with short names (like 'short') are correctly\n    resolved across files, which was a problem with the previous heuristic implementation.",
        "end_line": 247,
        "is_exported": false,
        "name": "test_cross_file_calls_with_short_names",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_complex_cross_file_calls.test_cross_file_calls_with_short_names",
        "start_line": 194
      }
    },
    {
      "node_id": 5760,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test rest parameters in function definitions.",
        "end_line": 718,
        "is_exported": false,
        "name": "test_rest_parameters",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.test_rest_parameters",
        "start_line": 458
      }
    },
    {
      "node_id": 5761,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test spread operator usage in arrays.",
        "end_line": 214,
        "is_exported": false,
        "name": "test_spread_in_arrays",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.test_spread_in_arrays",
        "start_line": 41
      }
    },
    {
      "node_id": 5762,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with spread/rest patterns.",
        "end_line": 38,
        "is_exported": false,
        "name": "javascript_spread_rest_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.javascript_spread_rest_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5763,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test destructuring combined with spread and rest operators.",
        "end_line": 1014,
        "is_exported": false,
        "name": "test_destructuring_with_spread_rest",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.test_destructuring_with_spread_rest",
        "start_line": 721
      }
    },
    {
      "node_id": 5764,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test spread operator usage in objects.",
        "end_line": 455,
        "is_exported": false,
        "name": "test_spread_in_objects",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.test_spread_in_objects",
        "start_line": 217
      }
    },
    {
      "node_id": 5765,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all spread/rest patterns are covered.",
        "end_line": 1172,
        "is_exported": false,
        "name": "test_spread_rest_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_spread_rest.test_spread_rest_comprehensive",
        "start_line": 1017
      }
    },
    {
      "node_id": 5766,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a C++ project for testing lambda captures.",
        "end_line": 19,
        "is_exported": false,
        "name": "cpp_lambda_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambda_captures.cpp_lambda_project",
        "start_line": 15
      }
    },
    {
      "node_id": 5767,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Validate comprehensive lambda capture parsing.",
        "end_line": 293,
        "is_exported": false,
        "name": "test_lambda_validation_complete",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambda_captures.test_lambda_validation_complete",
        "start_line": 225
      }
    },
    {
      "node_id": 5768,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++17/20 generalized capture patterns.",
        "end_line": 222,
        "is_exported": false,
        "name": "test_generalized_captures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambda_captures.test_generalized_captures",
        "start_line": 103
      }
    },
    {
      "node_id": 5769,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic lambda capture patterns.",
        "end_line": 100,
        "is_exported": false,
        "name": "test_basic_lambda_captures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_lambda_captures.test_basic_lambda_captures",
        "start_line": 22
      }
    },
    {
      "node_id": 5770,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that proper DEFINES relationships are created between parent and child functions.",
        "end_line": 257,
        "is_exported": false,
        "name": "test_nested_function_parent_child_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions.test_nested_function_parent_child_relationships",
        "start_line": 142
      }
    },
    {
      "node_id": 5771,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with nested functions test cases.",
        "end_line": 92,
        "is_exported": false,
        "name": "nested_functions_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions.nested_functions_project",
        "start_line": 14
      }
    },
    {
      "node_id": 5772,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that functions inside class methods are properly handled.\n\n    Note: Functions inside methods are currently treated as methods rather than nested functions.",
        "end_line": 394,
        "is_exported": false,
        "name": "test_function_in_class_method",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions.test_function_in_class_method",
        "start_line": 350
      }
    },
    {
      "node_id": 5773,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that nested functions are properly identified with correct qualified names.",
        "end_line": 139,
        "is_exported": false,
        "name": "test_nested_function_definitions_are_created",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions.test_nested_function_definitions_are_created",
        "start_line": 95
      }
    },
    {
      "node_id": 5774,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that function calls are properly tracked, including calls between functions.",
        "end_line": 347,
        "is_exported": false,
        "name": "test_function_calls_are_tracked",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_nested_functions.test_function_calls_are_tracked",
        "start_line": 260
      }
    },
    {
      "node_id": 5775,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Java class parsing including inheritance and interfaces.",
        "end_line": 201,
        "is_exported": false,
        "name": "test_basic_java_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_basic_java_classes",
        "start_line": 34
      }
    },
    {
      "node_id": 5776,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java generics and collection handling.",
        "end_line": 444,
        "is_exported": false,
        "name": "test_java_generics_and_collections",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_generics_and_collections",
        "start_line": 323
      }
    },
    {
      "node_id": 5777,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java inner and nested class parsing.",
        "end_line": 658,
        "is_exported": false,
        "name": "test_java_inner_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_inner_classes",
        "start_line": 552
      }
    },
    {
      "node_id": 5778,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive Java project structure.",
        "end_line": 31,
        "is_exported": false,
        "name": "java_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.java_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5779,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java enum and annotation parsing.",
        "end_line": 320,
        "is_exported": false,
        "name": "test_java_enums_and_annotations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_enums_and_annotations",
        "start_line": 204
      }
    },
    {
      "node_id": 5780,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java static and final modifier parsing.",
        "end_line": 549,
        "is_exported": false,
        "name": "test_java_static_and_final",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_static_and_final",
        "start_line": 447
      }
    },
    {
      "node_id": 5781,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java lambda expression and functional interface parsing.",
        "end_line": 799,
        "is_exported": false,
        "name": "test_java_lambda_expressions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_lambda_expressions",
        "start_line": 661
      }
    },
    {
      "node_id": 5782,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java exception handling and custom exception parsing.",
        "end_line": 938,
        "is_exported": false,
        "name": "test_java_exception_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_comprehensive.test_java_exception_handling",
        "start_line": 802
      }
    },
    {
      "node_id": 5783,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.mark.parametrize"
        ],
        "docstring": "Import mapping for relative and dotted require paths.",
        "end_line": 63,
        "is_exported": false,
        "name": "test_lua_imports_paths",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_imports_paths.test_lua_imports_paths",
        "start_line": 21
      }
    },
    {
      "node_id": 5784,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++20 spaceship operator functionality.",
        "end_line": 185,
        "is_exported": false,
        "name": "test_spaceship_operator",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship.test_spaceship_operator",
        "start_line": 90
      }
    },
    {
      "node_id": 5785,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a C++ project for testing format and spaceship operator.",
        "end_line": 19,
        "is_exported": false,
        "name": "cpp_format_spaceship_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship.cpp_format_spaceship_project",
        "start_line": 15
      }
    },
    {
      "node_id": 5786,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic std::format functionality.",
        "end_line": 87,
        "is_exported": false,
        "name": "test_format_library_basics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship.test_format_library_basics",
        "start_line": 22
      }
    },
    {
      "node_id": 5787,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Complete test demonstrating format and spaceship operator features.",
        "end_line": 285,
        "is_exported": false,
        "name": "test_format_spaceship_complete",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship.test_format_spaceship_complete",
        "start_line": 272
      }
    },
    {
      "node_id": 5788,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test integration of format library and spaceship operator.",
        "end_line": 269,
        "is_exported": false,
        "name": "test_format_spaceship_integration",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_format_spaceship.test_format_spaceship_integration",
        "start_line": 188
      }
    },
    {
      "node_id": 5789,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with friend relationships.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_friend_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_friend_functions.cpp_friend_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5790,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test friend templates and template specializations.",
        "end_line": 788,
        "is_exported": false,
        "name": "test_friend_templates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_friend_functions.test_friend_templates",
        "start_line": 439
      }
    },
    {
      "node_id": 5791,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all friend relationship features create proper relationships.",
        "end_line": 1025,
        "is_exported": false,
        "name": "test_cpp_friend_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_friend_functions.test_cpp_friend_comprehensive",
        "start_line": 791
      }
    },
    {
      "node_id": 5792,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test friend functions and their access privileges.",
        "end_line": 436,
        "is_exported": false,
        "name": "test_friend_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_friend_functions.test_friend_functions",
        "start_line": 30
      }
    },
    {
      "node_id": 5793,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test atomic operations and memory ordering.",
        "end_line": 989,
        "is_exported": false,
        "name": "test_atomics_and_memory_ordering",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.test_atomics_and_memory_ordering",
        "start_line": 633
      }
    },
    {
      "node_id": 5794,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic thread creation and management.",
        "end_line": 285,
        "is_exported": false,
        "name": "test_thread_basics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.test_thread_basics",
        "start_line": 30
      }
    },
    {
      "node_id": 5795,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with concurrency patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_concurrency_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.cpp_concurrency_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5796,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test mutex and lock mechanisms.",
        "end_line": 630,
        "is_exported": false,
        "name": "test_mutex_and_locks",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.test_mutex_and_locks",
        "start_line": 288
      }
    },
    {
      "node_id": 5797,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test condition variables, futures, and promises.",
        "end_line": 1412,
        "is_exported": false,
        "name": "test_condition_variables_and_futures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.test_condition_variables_and_futures",
        "start_line": 992
      }
    },
    {
      "node_id": 5798,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all concurrency patterns create proper relationships.",
        "end_line": 1932,
        "is_exported": false,
        "name": "test_cpp_concurrency_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_concurrency.test_cpp_concurrency_comprehensive",
        "start_line": 1415
      }
    },
    {
      "node_id": 5799,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test JavaScript hoisting behavior for variables and functions.",
        "end_line": 850,
        "is_exported": false,
        "name": "test_hoisting_behavior",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.test_hoisting_behavior",
        "start_line": 557
      }
    },
    {
      "node_id": 5800,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic closure patterns and variable capture.",
        "end_line": 270,
        "is_exported": false,
        "name": "test_basic_closures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.test_basic_closures",
        "start_line": 35
      }
    },
    {
      "node_id": 5801,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all closure and scoping patterns.",
        "end_line": 32,
        "is_exported": false,
        "name": "javascript_closures_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.javascript_closures_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5802,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test JavaScript variable scoping rules (var, let, const).",
        "end_line": 554,
        "is_exported": false,
        "name": "test_variable_scoping",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.test_variable_scoping",
        "start_line": 273
      }
    },
    {
      "node_id": 5803,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test module patterns using IIFE and closures.",
        "end_line": 1231,
        "is_exported": false,
        "name": "test_module_patterns_iife",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.test_module_patterns_iife",
        "start_line": 853
      }
    },
    {
      "node_id": 5804,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all closure and scoping patterns create proper relationships.",
        "end_line": 1452,
        "is_exported": false,
        "name": "test_closures_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_closures_scoping.test_closures_comprehensive",
        "start_line": 1234
      }
    },
    {
      "node_id": 5805,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined OS operation wrapper functions.",
        "end_line": 343,
        "is_exported": false,
        "name": "test_os_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_os_module_functions",
        "start_line": 250
      }
    },
    {
      "node_id": 5806,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined string processing functions.",
        "end_line": 162,
        "is_exported": false,
        "name": "test_string_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_string_module_functions",
        "start_line": 83
      }
    },
    {
      "node_id": 5807,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined debug utility wrapper functions.",
        "end_line": 552,
        "is_exported": false,
        "name": "test_debug_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_debug_module_functions",
        "start_line": 453
      }
    },
    {
      "node_id": 5808,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined math wrapper functions.",
        "end_line": 80,
        "is_exported": false,
        "name": "test_math_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_math_module_functions",
        "start_line": 8
      }
    },
    {
      "node_id": 5809,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined IO operation wrapper functions.",
        "end_line": 450,
        "is_exported": false,
        "name": "test_io_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_io_module_functions",
        "start_line": 346
      }
    },
    {
      "node_id": 5810,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined table manipulation functions.",
        "end_line": 247,
        "is_exported": false,
        "name": "test_table_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_table_module_functions",
        "start_line": 165
      }
    },
    {
      "node_id": 5811,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined package management wrapper functions.",
        "end_line": 664,
        "is_exported": false,
        "name": "test_package_module_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_package_module_functions",
        "start_line": 555
      }
    },
    {
      "node_id": 5812,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test user-defined wrapper functions for built-in operations.",
        "end_line": 830,
        "is_exported": false,
        "name": "test_builtin_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_stdlib.test_builtin_functions",
        "start_line": 667
      }
    },
    {
      "node_id": 5813,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test arithmetic metamethods (__add, __sub, __mul, etc.).",
        "end_line": 127,
        "is_exported": false,
        "name": "test_lua_arithmetic_metamethods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables.test_lua_arithmetic_metamethods",
        "start_line": 10
      }
    },
    {
      "node_id": 5814,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test __index and __newindex metamethods.",
        "end_line": 411,
        "is_exported": false,
        "name": "test_lua_index_metamethods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables.test_lua_index_metamethods",
        "start_line": 263
      }
    },
    {
      "node_id": 5815,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test __call metamethod.",
        "end_line": 594,
        "is_exported": false,
        "name": "test_lua_call_metamethod",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables.test_lua_call_metamethod",
        "start_line": 414
      }
    },
    {
      "node_id": 5816,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test comparison metamethods (__eq, __lt, __le).",
        "end_line": 260,
        "is_exported": false,
        "name": "test_lua_comparison_metamethods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables.test_lua_comparison_metamethods",
        "start_line": 130
      }
    },
    {
      "node_id": 5817,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test weak reference patterns with metatables.",
        "end_line": 814,
        "is_exported": false,
        "name": "test_lua_weak_references",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_metatables.test_lua_weak_references",
        "start_line": 597
      }
    },
    {
      "node_id": 5818,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust module system and crate organization.",
        "end_line": 785,
        "is_exported": false,
        "name": "test_rust_modules_and_crates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_modules_and_crates",
        "start_line": 601
      }
    },
    {
      "node_id": 5819,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust struct, enum, and union declarations.",
        "end_line": 387,
        "is_exported": false,
        "name": "test_rust_structs_enums_unions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_structs_enums_unions",
        "start_line": 190
      }
    },
    {
      "node_id": 5820,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust pattern matching with match expressions and if let.",
        "end_line": 1256,
        "is_exported": false,
        "name": "test_rust_pattern_matching",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_pattern_matching",
        "start_line": 1004
      }
    },
    {
      "node_id": 5821,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust macro definitions and usage.",
        "end_line": 1741,
        "is_exported": false,
        "name": "test_rust_macros",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_macros",
        "start_line": 1492
      }
    },
    {
      "node_id": 5822,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust error handling with Result, Option, and ? operator.",
        "end_line": 2320,
        "is_exported": false,
        "name": "test_rust_error_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_error_handling",
        "start_line": 2015
      }
    },
    {
      "node_id": 5823,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive Rust project structure.",
        "end_line": 38,
        "is_exported": false,
        "name": "rust_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.rust_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5824,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust trait definitions and implementations.",
        "end_line": 598,
        "is_exported": false,
        "name": "test_rust_traits_and_implementations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_traits_and_implementations",
        "start_line": 390
      }
    },
    {
      "node_id": 5825,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Rust function parsing including async, const, and unsafe functions.",
        "end_line": 187,
        "is_exported": false,
        "name": "test_basic_rust_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_basic_rust_functions",
        "start_line": 41
      }
    },
    {
      "node_id": 5826,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust generics, lifetimes, and advanced type features.",
        "end_line": 1001,
        "is_exported": false,
        "name": "test_rust_generics_and_lifetimes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_generics_and_lifetimes",
        "start_line": 788
      }
    },
    {
      "node_id": 5827,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust closures and functional programming features.",
        "end_line": 1489,
        "is_exported": false,
        "name": "test_rust_closures_and_lambdas",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_closures_and_lambdas",
        "start_line": 1259
      }
    },
    {
      "node_id": 5828,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Rust import system including use statements and external crates.",
        "end_line": 2012,
        "is_exported": false,
        "name": "test_rust_imports_and_use_statements",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_imports_and_use_statements",
        "start_line": 1744
      }
    },
    {
      "node_id": 5829,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive integration test combining all Rust language features.",
        "end_line": 2690,
        "is_exported": false,
        "name": "test_rust_comprehensive_integration",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_comprehensive_integration",
        "start_line": 2323
      }
    },
    {
      "node_id": 5830,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced Rust edge cases including complex lifetimes, generics, FFI, async, and more.",
        "end_line": 3519,
        "is_exported": false,
        "name": "test_rust_advanced_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust.test_rust_advanced_edge_cases",
        "start_line": 2693
      }
    },
    {
      "node_id": 5831,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex lambda expression edge cases.",
        "end_line": 1223,
        "is_exported": false,
        "name": "test_lambda_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_lambda_edge_cases",
        "start_line": 887
      }
    },
    {
      "node_id": 5832,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex anonymous class patterns.",
        "end_line": 556,
        "is_exported": false,
        "name": "test_anonymous_classes_complex",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_anonymous_classes_complex",
        "start_line": 211
      }
    },
    {
      "node_id": 5833,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing nested structures.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_nested_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.java_nested_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5834,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test local classes defined within methods.",
        "end_line": 884,
        "is_exported": false,
        "name": "test_local_classes_in_methods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_local_classes_in_methods",
        "start_line": 559
      }
    },
    {
      "node_id": 5835,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test deeply nested class structures.",
        "end_line": 208,
        "is_exported": false,
        "name": "test_deeply_nested_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_deeply_nested_classes",
        "start_line": 32
      }
    },
    {
      "node_id": 5836,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test nested classes in builder pattern implementation.",
        "end_line": 1588,
        "is_exported": false,
        "name": "test_builder_pattern_nested",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_builder_pattern_nested",
        "start_line": 1226
      }
    },
    {
      "node_id": 5837,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test nested classes in visitor pattern implementation.",
        "end_line": 2063,
        "is_exported": false,
        "name": "test_visitor_pattern_nested",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_nested_structures.test_visitor_pattern_nested",
        "start_line": 1591
      }
    },
    {
      "node_id": 5838,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test compiler-specific attributes and non-standard extensions.",
        "end_line": 748,
        "is_exported": false,
        "name": "test_compiler_specific_attributes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes.test_compiler_specific_attributes",
        "start_line": 366
      }
    },
    {
      "node_id": 5839,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with attribute patterns.",
        "end_line": 32,
        "is_exported": false,
        "name": "cpp_attributes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes.cpp_attributes_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5840,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex attribute combinations and edge cases.",
        "end_line": 1102,
        "is_exported": false,
        "name": "test_attribute_combinations_and_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes.test_attribute_combinations_and_edge_cases",
        "start_line": 751
      }
    },
    {
      "node_id": 5841,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test combining all C++ attribute patterns.",
        "end_line": 1301,
        "is_exported": false,
        "name": "test_cpp_attributes_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes.test_cpp_attributes_comprehensive",
        "start_line": 1105
      }
    },
    {
      "node_id": 5842,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test standard C++ attributes parsing and relationship tracking.",
        "end_line": 363,
        "is_exported": false,
        "name": "test_standard_attributes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_attributes.test_standard_attributes",
        "start_line": 35
      }
    },
    {
      "node_id": 5843,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test arrow functions assigned in constructors - should have correct nested qualified names.",
        "end_line": 284,
        "is_exported": false,
        "name": "test_arrow_functions_in_constructors",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names.test_arrow_functions_in_constructors",
        "start_line": 125
      }
    },
    {
      "node_id": 5844,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a temporary project with nested functions test cases.",
        "end_line": 33,
        "is_exported": false,
        "name": "nested_functions_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names.nested_functions_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5845,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test CommonJS exports defined inside functions - should have correct nested qualified names.",
        "end_line": 515,
        "is_exported": false,
        "name": "test_commonjs_exports_in_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names.test_commonjs_exports_in_functions",
        "start_line": 380
      }
    },
    {
      "node_id": 5846,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that object methods defined inside functions have correct qualified names.",
        "end_line": 122,
        "is_exported": false,
        "name": "test_object_methods_inside_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names.test_object_methods_inside_functions",
        "start_line": 36
      }
    },
    {
      "node_id": 5847,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test ES6 export functions defined inside other functions - should be nested.",
        "end_line": 377,
        "is_exported": false,
        "name": "test_export_functions_in_modules",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_nested_function_qualified_names.test_export_functions_in_modules",
        "start_line": 287
      }
    },
    {
      "node_id": 5848,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex struct relationships and nested types.",
        "end_line": 507,
        "is_exported": false,
        "name": "test_complex_struct_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_complex_struct_relationships",
        "start_line": 355
      }
    },
    {
      "node_id": 5849,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test enum definition parsing and variant extraction.",
        "end_line": 220,
        "is_exported": false,
        "name": "test_enum_definitions_and_variants",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_enum_definitions_and_variants",
        "start_line": 122
      }
    },
    {
      "node_id": 5850,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for structs and enums testing.",
        "end_line": 32,
        "is_exported": false,
        "name": "rust_structs_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.rust_structs_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5851,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test pattern matching and destructuring in various contexts.",
        "end_line": 352,
        "is_exported": false,
        "name": "test_pattern_matching_destructuring",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_pattern_matching_destructuring",
        "start_line": 223
      }
    },
    {
      "node_id": 5852,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic struct definition parsing and field extraction.",
        "end_line": 119,
        "is_exported": false,
        "name": "test_basic_struct_definitions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_basic_struct_definitions",
        "start_line": 35
      }
    },
    {
      "node_id": 5853,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test struct definitions with derive attributes and custom implementations.",
        "end_line": 640,
        "is_exported": false,
        "name": "test_struct_derive_attributes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_struct_derive_attributes",
        "start_line": 510
      }
    },
    {
      "node_id": 5854,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced enum pattern matching and complex enum structures.",
        "end_line": 849,
        "is_exported": false,
        "name": "test_enum_pattern_matching_advanced",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_structs_enums.test_enum_pattern_matching_advanced",
        "start_line": 643
      }
    },
    {
      "node_id": 5855,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.4 attributes: <close> and <const> variable declarations.",
        "end_line": 216,
        "is_exported": false,
        "name": "test_lua_54_attributes_syntax",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_modern_features.test_lua_54_attributes_syntax",
        "start_line": 10
      }
    },
    {
      "node_id": 5856,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.4 numerical for loop semantic changes.",
        "end_line": 847,
        "is_exported": false,
        "name": "test_lua_54_numerical_for_loops",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_modern_features.test_lua_54_numerical_for_loops",
        "start_line": 665
      }
    },
    {
      "node_id": 5857,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.4 enhanced standard library functions.",
        "end_line": 662,
        "is_exported": false,
        "name": "test_lua_54_enhanced_stdlib",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_modern_features.test_lua_54_enhanced_stdlib",
        "start_line": 430
      }
    },
    {
      "node_id": 5858,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua 5.4 enhanced metamethod behavior changes.",
        "end_line": 427,
        "is_exported": false,
        "name": "test_lua_54_enhanced_metamethods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_modern_features.test_lua_54_enhanced_metamethods",
        "start_line": 219
      }
    },
    {
      "node_id": 5859,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test class template parsing and specialization.",
        "end_line": 714,
        "is_exported": false,
        "name": "test_class_templates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates.test_class_templates",
        "start_line": 296
      }
    },
    {
      "node_id": 5860,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with template patterns.",
        "end_line": 26,
        "is_exported": false,
        "name": "cpp_templates_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates.cpp_templates_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5861,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test function template parsing and instantiation.",
        "end_line": 293,
        "is_exported": false,
        "name": "test_function_templates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates.test_function_templates",
        "start_line": 29
      }
    },
    {
      "node_id": 5862,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all template patterns create proper relationships.",
        "end_line": 1315,
        "is_exported": false,
        "name": "test_cpp_templates_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates.test_cpp_templates_comprehensive",
        "start_line": 1088
      }
    },
    {
      "node_id": 5863,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced template metaprogramming patterns.",
        "end_line": 1085,
        "is_exported": false,
        "name": "test_template_metaprogramming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_templates.test_template_metaprogramming",
        "start_line": 717
      }
    },
    {
      "node_id": 5864,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of Unicode identifiers in Java.",
        "end_line": 394,
        "is_exported": false,
        "name": "test_unicode_identifiers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_unicode_identifiers",
        "start_line": 269
      }
    },
    {
      "node_id": 5865,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of empty classes and interfaces.",
        "end_line": 133,
        "is_exported": false,
        "name": "test_empty_classes_and_interfaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_empty_classes_and_interfaces",
        "start_line": 32
      }
    },
    {
      "node_id": 5866,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of deeply nested generic types.",
        "end_line": 674,
        "is_exported": false,
        "name": "test_deeply_nested_generics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_deeply_nested_generics",
        "start_line": 521
      }
    },
    {
      "node_id": 5867,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of syntactically valid but unusual Java code.",
        "end_line": 1027,
        "is_exported": false,
        "name": "test_malformed_but_valid_syntax",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_malformed_but_valid_syntax",
        "start_line": 892
      }
    },
    {
      "node_id": 5868,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing with various comment edge cases.",
        "end_line": 1332,
        "is_exported": false,
        "name": "test_comment_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_comment_edge_cases",
        "start_line": 1190
      }
    },
    {
      "node_id": 5869,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of package and import edge cases.",
        "end_line": 1591,
        "is_exported": false,
        "name": "test_package_and_import_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_package_and_import_edge_cases",
        "start_line": 1423
      }
    },
    {
      "node_id": 5870,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex generic variance scenarios.",
        "end_line": 2079,
        "is_exported": false,
        "name": "test_generic_variance_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_generic_variance_edge_cases",
        "start_line": 1853
      }
    },
    {
      "node_id": 5871,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project structure for edge case testing.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_edge_cases_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.java_edge_cases_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5872,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of single-line vs multi-line Java constructs.",
        "end_line": 266,
        "is_exported": false,
        "name": "test_single_line_vs_multiline_constructs",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_single_line_vs_multiline_constructs",
        "start_line": 136
      }
    },
    {
      "node_id": 5873,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of very long qualified names and deep package structures.",
        "end_line": 518,
        "is_exported": false,
        "name": "test_long_qualified_names",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_long_qualified_names",
        "start_line": 397
      }
    },
    {
      "node_id": 5874,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of Java syntax edge cases.",
        "end_line": 889,
        "is_exported": false,
        "name": "test_parsing_edge_cases_syntax",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_parsing_edge_cases_syntax",
        "start_line": 677
      }
    },
    {
      "node_id": 5875,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of boundary value literals and extreme values.",
        "end_line": 1187,
        "is_exported": false,
        "name": "test_boundary_value_literals",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_boundary_value_literals",
        "start_line": 1030
      }
    },
    {
      "node_id": 5876,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing with various whitespace edge cases.",
        "end_line": 1420,
        "is_exported": false,
        "name": "test_whitespace_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_whitespace_edge_cases",
        "start_line": 1335
      }
    },
    {
      "node_id": 5877,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex modifier combinations.",
        "end_line": 1850,
        "is_exported": false,
        "name": "test_modifier_combinations_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_modifier_combinations_edge_cases",
        "start_line": 1594
      }
    },
    {
      "node_id": 5878,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of annotation edge cases.",
        "end_line": 2341,
        "is_exported": false,
        "name": "test_annotation_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_annotation_edge_cases",
        "start_line": 2082
      }
    },
    {
      "node_id": 5879,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parsing of complex operator and expression edge cases.",
        "end_line": 2608,
        "is_exported": false,
        "name": "test_operator_and_expression_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_edge_cases.test_operator_and_expression_edge_cases",
        "start_line": 2344
      }
    },
    {
      "node_id": 5880,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++20 consteval immediate functions.",
        "end_line": 720,
        "is_exported": false,
        "name": "test_consteval_immediate_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval.test_consteval_immediate_functions",
        "start_line": 368
      }
    },
    {
      "node_id": 5881,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with designated initializers and consteval patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_designated_consteval_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval.cpp_designated_consteval_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5882,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++20 designated initializers.",
        "end_line": 365,
        "is_exported": false,
        "name": "test_designated_initializers",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval.test_designated_initializers",
        "start_line": 30
      }
    },
    {
      "node_id": 5883,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Mark comprehensive modern C++ testing as complete.",
        "end_line": 1075,
        "is_exported": false,
        "name": "test_comprehensive_modern_cpp_complete",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval.test_comprehensive_modern_cpp_complete",
        "start_line": 1065
      }
    },
    {
      "node_id": 5884,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++14/17/20 lambda init captures and generalized capture.",
        "end_line": 1062,
        "is_exported": false,
        "name": "test_lambda_init_captures",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_designated_init_consteval.test_lambda_init_captures",
        "start_line": 723
      }
    },
    {
      "node_id": 5885,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test stream operators and function call operators.",
        "end_line": 907,
        "is_exported": false,
        "name": "test_stream_function_call_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.test_stream_function_call_operators",
        "start_line": 628
      }
    },
    {
      "node_id": 5886,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test arithmetic operator overloading.",
        "end_line": 321,
        "is_exported": false,
        "name": "test_arithmetic_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.test_arithmetic_operators",
        "start_line": 30
      }
    },
    {
      "node_id": 5887,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with operator overloading.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_operators_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.cpp_operators_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5888,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test subscript and increment/decrement operators.",
        "end_line": 1324,
        "is_exported": false,
        "name": "test_subscript_increment_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.test_subscript_increment_operators",
        "start_line": 910
      }
    },
    {
      "node_id": 5889,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test comparison operator overloading.",
        "end_line": 625,
        "is_exported": false,
        "name": "test_comparison_operators",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.test_comparison_operators",
        "start_line": 324
      }
    },
    {
      "node_id": 5890,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all operator overloading patterns create proper relationships.",
        "end_line": 1491,
        "is_exported": false,
        "name": "test_cpp_operators_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_operators_overloading.test_cpp_operators_comprehensive",
        "start_line": 1327
      }
    },
    {
      "node_id": 5891,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test mixin patterns and prototype composition.",
        "end_line": 1050,
        "is_exported": false,
        "name": "test_prototype_mixins_and_composition",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_prototype_mixins_and_composition",
        "start_line": 730
      }
    },
    {
      "node_id": 5892,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Object.create() patterns and prototype-based inheritance.",
        "end_line": 496,
        "is_exported": false,
        "name": "test_object_create_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_object_create_patterns",
        "start_line": 251
      }
    },
    {
      "node_id": 5893,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with prototype patterns.",
        "end_line": 49,
        "is_exported": false,
        "name": "javascript_prototypes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.javascript_prototypes_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5894,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test constructor functions and prototype method definitions.",
        "end_line": 248,
        "is_exported": false,
        "name": "test_constructor_functions_and_prototypes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_constructor_functions_and_prototypes",
        "start_line": 52
      }
    },
    {
      "node_id": 5895,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test prototype chain traversal and method resolution.",
        "end_line": 727,
        "is_exported": false,
        "name": "test_prototype_chain_and_method_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_prototype_chain_and_method_resolution",
        "start_line": 499
      }
    },
    {
      "node_id": 5896,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test edge cases and unusual prototype patterns.",
        "end_line": 1312,
        "is_exported": false,
        "name": "test_prototype_patterns_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_prototype_patterns_edge_cases",
        "start_line": 1053
      }
    },
    {
      "node_id": 5897,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all prototype patterns create proper relationships.",
        "end_line": 1450,
        "is_exported": false,
        "name": "test_prototype_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_prototypes.test_prototype_comprehensive",
        "start_line": 1315
      }
    },
    {
      "node_id": 5898,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java ExecutorService and thread pool parsing.",
        "end_line": 843,
        "is_exported": false,
        "name": "test_executor_service_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_executor_service_patterns",
        "start_line": 593
      }
    },
    {
      "node_id": 5899,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java volatile field parsing.",
        "end_line": 360,
        "is_exported": false,
        "name": "test_volatile_fields",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_volatile_fields",
        "start_line": 186
      }
    },
    {
      "node_id": 5900,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing concurrency features.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_concurrency_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.java_concurrency_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5901,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java concurrent collections parsing.",
        "end_line": 590,
        "is_exported": false,
        "name": "test_concurrent_collections",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_concurrent_collections",
        "start_line": 363
      }
    },
    {
      "node_id": 5902,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java synchronized methods and blocks parsing.",
        "end_line": 183,
        "is_exported": false,
        "name": "test_synchronized_methods_blocks",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_synchronized_methods_blocks",
        "start_line": 32
      }
    },
    {
      "node_id": 5903,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java CompletableFuture parsing.",
        "end_line": 1100,
        "is_exported": false,
        "name": "test_completable_future_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_completable_future_patterns",
        "start_line": 846
      }
    },
    {
      "node_id": 5904,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java locks and conditions parsing.",
        "end_line": 1356,
        "is_exported": false,
        "name": "test_locks_and_conditions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_concurrency.test_locks_and_conditions",
        "start_line": 1103
      }
    },
    {
      "node_id": 5905,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test arrow functions and lexical this binding.",
        "end_line": 755,
        "is_exported": false,
        "name": "test_arrow_functions_lexical_this",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.test_arrow_functions_lexical_this",
        "start_line": 487
      }
    },
    {
      "node_id": 5906,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test 'this' binding in various contexts.",
        "end_line": 267,
        "is_exported": false,
        "name": "test_this_in_different_contexts",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.test_this_in_different_contexts",
        "start_line": 44
      }
    },
    {
      "node_id": 5907,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with this binding patterns.",
        "end_line": 41,
        "is_exported": false,
        "name": "javascript_this_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.javascript_this_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5908,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test bind(), call(), and apply() method usage.",
        "end_line": 484,
        "is_exported": false,
        "name": "test_bind_call_apply_methods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.test_bind_call_apply_methods",
        "start_line": 270
      }
    },
    {
      "node_id": 5909,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test this binding in callbacks and event handlers.",
        "end_line": 1080,
        "is_exported": false,
        "name": "test_this_in_callbacks_and_events",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.test_this_in_callbacks_and_events",
        "start_line": 758
      }
    },
    {
      "node_id": 5910,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all this binding patterns are covered.",
        "end_line": 1238,
        "is_exported": false,
        "name": "test_this_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_this_binding.test_this_comprehensive",
        "start_line": 1083
      }
    },
    {
      "node_id": 5911,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test distinction between system <> and local \"\" includes.",
        "end_line": 630,
        "is_exported": false,
        "name": "test_system_vs_local_includes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_system_vs_local_includes",
        "start_line": 490
      }
    },
    {
      "node_id": 5912,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test local header include parsing and relationship creation.",
        "end_line": 316,
        "is_exported": false,
        "name": "test_local_header_includes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_local_header_includes",
        "start_line": 200
      }
    },
    {
      "node_id": 5913,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with all include patterns.",
        "end_line": 81,
        "is_exported": false,
        "name": "cpp_includes_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.cpp_includes_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5914,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test standard library include parsing and relationship creation.",
        "end_line": 197,
        "is_exported": false,
        "name": "test_standard_library_includes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_standard_library_includes",
        "start_line": 84
      }
    },
    {
      "node_id": 5915,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test conditional include patterns with preprocessor directives.",
        "end_line": 487,
        "is_exported": false,
        "name": "test_conditional_includes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_conditional_includes",
        "start_line": 319
      }
    },
    {
      "node_id": 5916,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test handling of include guards and #pragma once.",
        "end_line": 770,
        "is_exported": false,
        "name": "test_include_guards_and_pragma_once",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_include_guards_and_pragma_once",
        "start_line": 633
      }
    },
    {
      "node_id": 5917,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all C++ include patterns create proper relationships.",
        "end_line": 956,
        "is_exported": false,
        "name": "test_cpp_includes_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_includes.test_cpp_includes_comprehensive",
        "start_line": 773
      }
    },
    {
      "node_id": 5918,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Set up a temporary directory with a project that has imported class method calls.",
        "end_line": 122,
        "is_exported": false,
        "name": "class_method_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imported_class_method_calls.class_method_project",
        "start_line": 19
      }
    },
    {
      "node_id": 5919,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Tests that GraphUpdater correctly identifies method calls on imported class instances\n    across different files and modules.",
        "end_line": 215,
        "is_exported": false,
        "name": "test_imported_class_method_calls_are_detected",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imported_class_method_calls.test_imported_class_method_calls_are_detected",
        "start_line": 125
      }
    },
    {
      "node_id": 5920,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Tests that method calls on objects created from imported classes are detected,\n    including chained method calls and method calls in complex expressions.",
        "end_line": 277,
        "is_exported": false,
        "name": "test_cross_file_object_method_chaining",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_imported_class_method_calls.test_cross_file_object_method_chaining",
        "start_line": 218
      }
    },
    {
      "node_id": 5921,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test file I/O operations.",
        "end_line": 81,
        "is_exported": false,
        "name": "test_file_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io.test_file_operations",
        "start_line": 8
      }
    },
    {
      "node_id": 5922,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test file positioning and information calls.",
        "end_line": 250,
        "is_exported": false,
        "name": "test_file_positioning_and_info",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io.test_file_positioning_and_info",
        "start_line": 165
      }
    },
    {
      "node_id": 5923,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test data serialization patterns.",
        "end_line": 367,
        "is_exported": false,
        "name": "test_serialization_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io.test_serialization_patterns",
        "start_line": 253
      }
    },
    {
      "node_id": 5924,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test different file reading modes.",
        "end_line": 162,
        "is_exported": false,
        "name": "test_file_reading_modes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io.test_file_reading_modes",
        "start_line": 84
      }
    },
    {
      "node_id": 5925,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test binary file operations.",
        "end_line": 456,
        "is_exported": false,
        "name": "test_binary_file_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_file_io.test_binary_file_operations",
        "start_line": 370
      }
    },
    {
      "node_id": 5926,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java text blocks parsing (Java 15+).",
        "end_line": 641,
        "is_exported": false,
        "name": "test_java_text_blocks",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_text_blocks",
        "start_line": 481
      }
    },
    {
      "node_id": 5927,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java sealed classes parsing (Java 17+).",
        "end_line": 318,
        "is_exported": false,
        "name": "test_java_sealed_classes",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_sealed_classes",
        "start_line": 160
      }
    },
    {
      "node_id": 5928,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing modern features.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_modern_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.java_modern_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5929,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java switch expressions parsing (Java 14+).",
        "end_line": 478,
        "is_exported": false,
        "name": "test_java_switch_expressions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_switch_expressions",
        "start_line": 321
      }
    },
    {
      "node_id": 5930,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java record parsing (Java 14+).",
        "end_line": 157,
        "is_exported": false,
        "name": "test_java_records",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_records",
        "start_line": 32
      }
    },
    {
      "node_id": 5931,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java var keyword parsing (Java 10+).",
        "end_line": 788,
        "is_exported": false,
        "name": "test_java_var_keyword",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_var_keyword",
        "start_line": 644
      }
    },
    {
      "node_id": 5932,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Java instanceof pattern matching (Java 16+).",
        "end_line": 942,
        "is_exported": false,
        "name": "test_java_instanceof_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_modern_features.test_java_instanceof_patterns",
        "start_line": 791
      }
    },
    {
      "node_id": 5933,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test async function parsing and async/await patterns.",
        "end_line": 433,
        "is_exported": false,
        "name": "test_async_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_async_functions",
        "start_line": 271
      }
    },
    {
      "node_id": 5934,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test traditional function declaration parsing.",
        "end_line": 157,
        "is_exported": false,
        "name": "test_function_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_function_declarations",
        "start_line": 35
      }
    },
    {
      "node_id": 5935,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test higher-order functions (functions that take or return functions).",
        "end_line": 746,
        "is_exported": false,
        "name": "test_higher_order_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_higher_order_functions",
        "start_line": 579
      }
    },
    {
      "node_id": 5936,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive JavaScript project with all function patterns.",
        "end_line": 32,
        "is_exported": false,
        "name": "javascript_functions_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.javascript_functions_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5937,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test IIFE (Immediately Invoked Function Expression) parsing.",
        "end_line": 576,
        "is_exported": false,
        "name": "test_immediately_invoked_function_expressions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_immediately_invoked_function_expressions",
        "start_line": 436
      }
    },
    {
      "node_id": 5938,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test arrow function parsing and various arrow function patterns.",
        "end_line": 268,
        "is_exported": false,
        "name": "test_arrow_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_arrow_functions",
        "start_line": 160
      }
    },
    {
      "node_id": 5939,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test object method definitions and class method parsing.",
        "end_line": 943,
        "is_exported": false,
        "name": "test_method_definitions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_method_definitions",
        "start_line": 749
      }
    },
    {
      "node_id": 5940,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all function types create proper relationships.",
        "end_line": 1081,
        "is_exported": false,
        "name": "test_function_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_functions.test_function_comprehensive",
        "start_line": 946
      }
    },
    {
      "node_id": 5941,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test benchmarking and measurement patterns.",
        "end_line": 332,
        "is_exported": false,
        "name": "test_benchmarking_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.test_benchmarking_patterns",
        "start_line": 40
      }
    },
    {
      "node_id": 5942,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test parallel processing with Rayon.",
        "end_line": 925,
        "is_exported": false,
        "name": "test_parallel_processing_rayon",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.test_parallel_processing_rayon",
        "start_line": 610
      }
    },
    {
      "node_id": 5943,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project with performance examples.",
        "end_line": 37,
        "is_exported": false,
        "name": "rust_performance_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.rust_performance_project",
        "start_line": 16
      }
    },
    {
      "node_id": 5944,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test memory optimization patterns.",
        "end_line": 1264,
        "is_exported": false,
        "name": "test_memory_optimization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.test_memory_optimization",
        "start_line": 928
      }
    },
    {
      "node_id": 5945,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test SIMD and vectorization patterns.",
        "end_line": 607,
        "is_exported": false,
        "name": "test_simd_vectorization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.test_simd_vectorization",
        "start_line": 335
      }
    },
    {
      "node_id": 5946,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test profiling and optimization tooling patterns.",
        "end_line": 1684,
        "is_exported": false,
        "name": "test_profiling_optimization_tools",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_performance_optimization.test_profiling_optimization_tools",
        "start_line": 1267
      }
    },
    {
      "node_id": 5947,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test conditional compilation directives.",
        "end_line": 604,
        "is_exported": false,
        "name": "test_conditional_compilation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor.test_conditional_compilation",
        "start_line": 280
      }
    },
    {
      "node_id": 5948,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with preprocessor directives.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_preprocessor_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor.cpp_preprocessor_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5949,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test #pragma directives and include guards.",
        "end_line": 913,
        "is_exported": false,
        "name": "test_pragma_directives",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor.test_pragma_directives",
        "start_line": 607
      }
    },
    {
      "node_id": 5950,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all preprocessor features create proper relationships.",
        "end_line": 1151,
        "is_exported": false,
        "name": "test_cpp_preprocessor_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor.test_cpp_preprocessor_comprehensive",
        "start_line": 916
      }
    },
    {
      "node_id": 5951,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test #define macros including object-like and function-like macros.",
        "end_line": 277,
        "is_exported": false,
        "name": "test_define_macros",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_preprocessor.test_define_macros",
        "start_line": 30
      }
    },
    {
      "node_id": 5952,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex configuration management scenario.",
        "end_line": 616,
        "is_exported": false,
        "name": "test_configuration_management_scenario",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_configuration_management_scenario",
        "start_line": 425
      }
    },
    {
      "node_id": 5953,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua database ORM scenario.",
        "end_line": 285,
        "is_exported": false,
        "name": "test_database_orm_scenario",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_database_orm_scenario",
        "start_line": 144
      }
    },
    {
      "node_id": 5954,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua web framework scenario.",
        "end_line": 141,
        "is_exported": false,
        "name": "test_web_framework_scenario",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_web_framework_scenario",
        "start_line": 8
      }
    },
    {
      "node_id": 5955,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex data processing pipeline.",
        "end_line": 809,
        "is_exported": false,
        "name": "test_data_processing_pipeline",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_data_processing_pipeline",
        "start_line": 619
      }
    },
    {
      "node_id": 5956,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Lua game engine scenario.",
        "end_line": 422,
        "is_exported": false,
        "name": "test_game_engine_scenario",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_game_engine_scenario",
        "start_line": 288
      }
    },
    {
      "node_id": 5957,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test microservice architecture scenario.",
        "end_line": 1016,
        "is_exported": false,
        "name": "test_microservice_architecture",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_lua_complex_scenarios.test_microservice_architecture",
        "start_line": 812
      }
    },
    {
      "node_id": 5958,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic type annotations on variables, parameters, and return types.",
        "end_line": 168,
        "is_exported": false,
        "name": "test_basic_type_annotations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.test_basic_type_annotations",
        "start_line": 36
      }
    },
    {
      "node_id": 5959,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test generic types, constraints, and generic functions/classes.",
        "end_line": 699,
        "is_exported": false,
        "name": "test_generic_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.test_generic_types",
        "start_line": 413
      }
    },
    {
      "node_id": 5960,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive TypeScript project with all type patterns.",
        "end_line": 33,
        "is_exported": false,
        "name": "typescript_types_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.typescript_types_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5961,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test interface definitions and type aliases.",
        "end_line": 410,
        "is_exported": false,
        "name": "test_interfaces_and_type_aliases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.test_interfaces_and_type_aliases",
        "start_line": 171
      }
    },
    {
      "node_id": 5962,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test TypeScript utility types like Partial, Required, Pick, Omit, etc.",
        "end_line": 960,
        "is_exported": false,
        "name": "test_utility_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.test_utility_types",
        "start_line": 702
      }
    },
    {
      "node_id": 5963,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all TypeScript type features create proper relationships.",
        "end_line": 1123,
        "is_exported": false,
        "name": "test_type_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_typescript_types.test_type_comprehensive",
        "start_line": 963
      }
    },
    {
      "node_id": 5964,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project for testing Project Loom features.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_loom_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_virtual_threads_loom.java_loom_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5965,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test scoped values (replacement for ThreadLocal in Project Loom).",
        "end_line": 822,
        "is_exported": false,
        "name": "test_scoped_values",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_virtual_threads_loom.test_scoped_values",
        "start_line": 554
      }
    },
    {
      "node_id": 5966,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test structured concurrency patterns (Java 19+ incubating).",
        "end_line": 551,
        "is_exported": false,
        "name": "test_structured_concurrency",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_virtual_threads_loom.test_structured_concurrency",
        "start_line": 262
      }
    },
    {
      "node_id": 5967,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic virtual thread usage patterns.",
        "end_line": 259,
        "is_exported": false,
        "name": "test_virtual_threads_basics",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_virtual_threads_loom.test_virtual_threads_basics",
        "start_line": 32
      }
    },
    {
      "node_id": 5968,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test exhaustive pattern matching on enums with complex variants.",
        "end_line": 206,
        "is_exported": false,
        "name": "test_exhaustive_enum_matching",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.test_exhaustive_enum_matching",
        "start_line": 36
      }
    },
    {
      "node_id": 5969,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test pattern guards, range patterns, and conditional matching.",
        "end_line": 704,
        "is_exported": false,
        "name": "test_pattern_guards_and_ranges",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.test_pattern_guards_and_ranges",
        "start_line": 494
      }
    },
    {
      "node_id": 5970,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Rust project structure for pattern matching testing.",
        "end_line": 33,
        "is_exported": false,
        "name": "rust_pattern_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.rust_pattern_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5971,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test if let, while let, and other pattern matching constructs.",
        "end_line": 983,
        "is_exported": false,
        "name": "test_advanced_if_let_while_let",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.test_advanced_if_let_while_let",
        "start_line": 707
      }
    },
    {
      "node_id": 5972,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test complex destructuring patterns for structs, tuples, and arrays.",
        "end_line": 491,
        "is_exported": false,
        "name": "test_destructuring_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.test_destructuring_patterns",
        "start_line": 209
      }
    },
    {
      "node_id": 5973,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test pattern matching within macros and macro patterns.",
        "end_line": 1279,
        "is_exported": false,
        "name": "test_macro_pattern_matching",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_rust_pattern_matching.test_macro_pattern_matching",
        "start_line": 986
      }
    },
    {
      "node_id": 5974,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with error handling patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_error_handling_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_error_handling.cpp_error_handling_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5975,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all error handling patterns create proper relationships.",
        "end_line": 970,
        "is_exported": false,
        "name": "test_cpp_error_handling_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_error_handling.test_cpp_error_handling_comprehensive",
        "start_line": 863
      }
    },
    {
      "node_id": 5976,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic exception handling with try/catch/throw.",
        "end_line": 452,
        "is_exported": false,
        "name": "test_basic_exception_handling",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_error_handling.test_basic_exception_handling",
        "start_line": 30
      }
    },
    {
      "node_id": 5977,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test RAII (Resource Acquisition Is Initialization) patterns.",
        "end_line": 860,
        "is_exported": false,
        "name": "test_raii_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_error_handling.test_raii_patterns",
        "start_line": 455
      }
    },
    {
      "node_id": 5978,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test single inheritance patterns and virtual functions.",
        "end_line": 343,
        "is_exported": false,
        "name": "test_single_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.test_single_inheritance",
        "start_line": 32
      }
    },
    {
      "node_id": 5979,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test abstract classes and interface-like patterns.",
        "end_line": 1129,
        "is_exported": false,
        "name": "test_abstract_classes_and_interfaces",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.test_abstract_classes_and_interfaces",
        "start_line": 719
      }
    },
    {
      "node_id": 5980,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with inheritance patterns.",
        "end_line": 29,
        "is_exported": false,
        "name": "cpp_inheritance_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.cpp_inheritance_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5981,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all inheritance patterns create proper relationships.",
        "end_line": 1442,
        "is_exported": false,
        "name": "test_cpp_inheritance_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.test_cpp_inheritance_comprehensive",
        "start_line": 1132
      }
    },
    {
      "node_id": 5982,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test multiple inheritance patterns and virtual base classes.",
        "end_line": 716,
        "is_exported": false,
        "name": "test_multiple_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.test_multiple_inheritance",
        "start_line": 346
      }
    },
    {
      "node_id": 5983,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test edge cases in C++ inheritance parsing including complex templates and namespaces.",
        "end_line": 1720,
        "is_exported": false,
        "name": "test_cpp_inheritance_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_classes_inheritance.test_cpp_inheritance_edge_cases",
        "start_line": 1445
      }
    },
    {
      "node_id": 5984,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that decorator pattern relationships are correctly captured.",
        "end_line": 925,
        "is_exported": false,
        "name": "test_decorator_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_decorator_pattern_relationships",
        "start_line": 696
      }
    },
    {
      "node_id": 5985,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that observer pattern relationships are correctly captured.",
        "end_line": 417,
        "is_exported": false,
        "name": "test_observer_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_observer_pattern_relationships",
        "start_line": 206
      }
    },
    {
      "node_id": 5986,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a Java project structure for complex relationship testing.",
        "end_line": 29,
        "is_exported": false,
        "name": "java_complex_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.java_complex_project",
        "start_line": 17
      }
    },
    {
      "node_id": 5987,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that builder pattern relationships are correctly captured.",
        "end_line": 203,
        "is_exported": false,
        "name": "test_builder_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_builder_pattern_relationships",
        "start_line": 32
      }
    },
    {
      "node_id": 5988,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that factory pattern relationships are correctly captured.",
        "end_line": 693,
        "is_exported": false,
        "name": "test_factory_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_factory_pattern_relationships",
        "start_line": 420
      }
    },
    {
      "node_id": 5989,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that strategy pattern relationships are correctly captured.",
        "end_line": 1139,
        "is_exported": false,
        "name": "test_strategy_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_strategy_pattern_relationships",
        "start_line": 928
      }
    },
    {
      "node_id": 5990,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that command pattern relationships are correctly captured.",
        "end_line": 1444,
        "is_exported": false,
        "name": "test_command_pattern_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_java_complex_relationships.test_command_pattern_relationships",
        "start_line": 1142
      }
    },
    {
      "node_id": 5991,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a comprehensive C++ project with template metaprogramming patterns.",
        "end_line": 27,
        "is_exported": false,
        "name": "cpp_metaprogramming_project",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_template_metaprogramming.cpp_metaprogramming_project",
        "start_line": 18
      }
    },
    {
      "node_id": 5992,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic template metaprogramming techniques.",
        "end_line": 385,
        "is_exported": false,
        "name": "test_basic_metaprogramming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_template_metaprogramming.test_basic_metaprogramming",
        "start_line": 30
      }
    },
    {
      "node_id": 5993,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test advanced template metaprogramming patterns.",
        "end_line": 753,
        "is_exported": false,
        "name": "test_advanced_metaprogramming",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_template_metaprogramming.test_advanced_metaprogramming",
        "start_line": 388
      }
    },
    {
      "node_id": 5994,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Comprehensive test ensuring all metaprogramming patterns create proper relationships.",
        "end_line": 860,
        "is_exported": false,
        "name": "test_cpp_metaprogramming_comprehensive",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_cpp_template_metaprogramming.test_cpp_metaprogramming_comprehensive",
        "start_line": 756
      }
    },
    {
      "node_id": 5995,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Utility to clean up common LLM formatting artifacts from a Cypher query.",
        "end_line": 35,
        "is_exported": false,
        "name": "_clean_cypher_response",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm._clean_cypher_response",
        "start_line": 28
      }
    },
    {
      "node_id": 5996,
      "labels": [
        "Function"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory function to create the main RAG orchestrator agent.",
        "end_line": 175,
        "is_exported": false,
        "name": "create_rag_orchestrator",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm.create_rag_orchestrator",
        "start_line": 122
      }
    },
    {
      "node_id": 5997,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_treesitter_operators.py",
        "path": "test_treesitter_operators.py"
      }
    },
    {
      "node_id": 5998,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".yaml",
        "name": "docker-compose.yaml",
        "path": "docker-compose.yaml"
      }
    },
    {
      "node_id": 5999,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": ".DS_Store",
        "path": ".DS_Store"
      }
    },
    {
      "node_id": 6000,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": "LICENSE",
        "path": "LICENSE"
      }
    },
    {
      "node_id": 6001,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".lock",
        "name": "uv.lock",
        "path": "uv.lock"
      }
    },
    {
      "node_id": 6002,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".yaml",
        "name": ".pre-commit-config.yaml",
        "path": ".pre-commit-config.yaml"
      }
    },
    {
      "node_id": 6003,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": "Makefile",
        "path": "Makefile"
      }
    },
    {
      "node_id": 6004,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".toml",
        "name": "pyproject.toml",
        "path": "pyproject.toml"
      }
    },
    {
      "node_id": 6005,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "realtime_updater.py",
        "path": "realtime_updater.py"
      }
    },
    {
      "node_id": 6006,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": ".gitmodules",
        "path": ".gitmodules"
      }
    },
    {
      "node_id": 6007,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".md",
        "name": "README.md",
        "path": "README.md"
      }
    },
    {
      "node_id": 6008,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "build_binary.py",
        "path": "build_binary.py"
      }
    },
    {
      "node_id": 6009,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": ".gitignore",
        "path": ".gitignore"
      }
    },
    {
      "node_id": 6010,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": ".env",
        "path": ".env"
      }
    },
    {
      "node_id": 6011,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".md",
        "name": "CONTRIBUTING.md",
        "path": "CONTRIBUTING.md"
      }
    },
    {
      "node_id": 6012,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": "",
        "name": ".python-version",
        "path": ".python-version"
      }
    },
    {
      "node_id": 6013,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "main.py",
        "path": "main.py"
      }
    },
    {
      "node_id": 6014,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "language_config.py",
        "path": "codebase_rag/language_config.py"
      }
    },
    {
      "node_id": 6015,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "config.py",
        "path": "codebase_rag/config.py"
      }
    },
    {
      "node_id": 6016,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "graph_updater.py",
        "path": "codebase_rag/graph_updater.py"
      }
    },
    {
      "node_id": 6017,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "graph_loader.py",
        "path": "codebase_rag/graph_loader.py"
      }
    },
    {
      "node_id": 6018,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "__init__.py",
        "path": "codebase_rag/__init__.py"
      }
    },
    {
      "node_id": 6019,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "prompts.py",
        "path": "codebase_rag/prompts.py"
      }
    },
    {
      "node_id": 6020,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "parser_loader.py",
        "path": "codebase_rag/parser_loader.py"
      }
    },
    {
      "node_id": 6021,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "schemas.py",
        "path": "codebase_rag/schemas.py"
      }
    },
    {
      "node_id": 6022,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "main.py",
        "path": "codebase_rag/main.py"
      }
    },
    {
      "node_id": 6023,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".txt",
        "name": "tree-sitter.txt",
        "path": "optimize/tree-sitter.txt"
      }
    },
    {
      "node_id": 6024,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".sh",
        "name": "code_to_text.sh",
        "path": "optimize/code_to_text.sh"
      }
    },
    {
      "node_id": 6025,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".pdf",
        "name": "EXPERT_PYTHON_PROGRAMMING_FOURTH_EDITION.pdf",
        "path": "optimize/EXPERT_PYTHON_PROGRAMMING_FOURTH_EDITION.pdf"
      }
    },
    {
      "node_id": 6026,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".txt",
        "name": "tree-sitter-cpp.txt",
        "path": "optimize/tree-sitter-cpp.txt"
      }
    },
    {
      "node_id": 6027,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "graph_export_example.py",
        "path": "examples/graph_export_example.py"
      }
    },
    {
      "node_id": 6028,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".png",
        "name": "logo-dark-any.png",
        "path": "assets/logo-dark-any.png"
      }
    },
    {
      "node_id": 6029,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".png",
        "name": "logo-light-any.png",
        "path": "assets/logo-light-any.png"
      }
    },
    {
      "node_id": 6030,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "call_processor.py",
        "path": "codebase_rag/parsers/call_processor.py"
      }
    },
    {
      "node_id": 6031,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "java_type_inference.py",
        "path": "codebase_rag/parsers/java_type_inference.py"
      }
    },
    {
      "node_id": 6032,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "constants.py",
        "path": "codebase_rag/parsers/constants.py"
      }
    },
    {
      "node_id": 6033,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "type_inference.py",
        "path": "codebase_rag/parsers/type_inference.py"
      }
    },
    {
      "node_id": 6034,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "__init__.py",
        "path": "codebase_rag/parsers/__init__.py"
      }
    },
    {
      "node_id": 6035,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "factory.py",
        "path": "codebase_rag/parsers/factory.py"
      }
    },
    {
      "node_id": 6036,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "structure_processor.py",
        "path": "codebase_rag/parsers/structure_processor.py"
      }
    },
    {
      "node_id": 6037,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "utils.py",
        "path": "codebase_rag/parsers/utils.py"
      }
    },
    {
      "node_id": 6038,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "definition_processor.py",
        "path": "codebase_rag/parsers/definition_processor.py"
      }
    },
    {
      "node_id": 6039,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "rust_utils.py",
        "path": "codebase_rag/parsers/rust_utils.py"
      }
    },
    {
      "node_id": 6040,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "lua_utils.py",
        "path": "codebase_rag/parsers/lua_utils.py"
      }
    },
    {
      "node_id": 6041,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "import_processor.py",
        "path": "codebase_rag/parsers/import_processor.py"
      }
    },
    {
      "node_id": 6042,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "python_utils.py",
        "path": "codebase_rag/parsers/python_utils.py"
      }
    },
    {
      "node_id": 6043,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "cpp_utils.py",
        "path": "codebase_rag/parsers/cpp_utils.py"
      }
    },
    {
      "node_id": 6044,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "java_utils.py",
        "path": "codebase_rag/parsers/java_utils.py"
      }
    },
    {
      "node_id": 6045,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "file_editor.py",
        "path": "codebase_rag/tools/file_editor.py"
      }
    },
    {
      "node_id": 6046,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "shell_command.py",
        "path": "codebase_rag/tools/shell_command.py"
      }
    },
    {
      "node_id": 6047,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "file_reader.py",
        "path": "codebase_rag/tools/file_reader.py"
      }
    },
    {
      "node_id": 6048,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "document_analyzer.py",
        "path": "codebase_rag/tools/document_analyzer.py"
      }
    },
    {
      "node_id": 6049,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "__init__.py",
        "path": "codebase_rag/tools/__init__.py"
      }
    },
    {
      "node_id": 6050,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "file_writer.py",
        "path": "codebase_rag/tools/file_writer.py"
      }
    },
    {
      "node_id": 6051,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "language.py",
        "path": "codebase_rag/tools/language.py"
      }
    },
    {
      "node_id": 6052,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "code_retrieval.py",
        "path": "codebase_rag/tools/code_retrieval.py"
      }
    },
    {
      "node_id": 6053,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "directory_lister.py",
        "path": "codebase_rag/tools/directory_lister.py"
      }
    },
    {
      "node_id": 6054,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "codebase_query.py",
        "path": "codebase_rag/tools/codebase_query.py"
      }
    },
    {
      "node_id": 6055,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_advanced_types.py",
        "path": "codebase_rag/tests/test_rust_advanced_types.py"
      }
    },
    {
      "node_id": 6056,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_functions.py",
        "path": "codebase_rag/tests/test_lua_functions.py"
      }
    },
    {
      "node_id": 6057,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_import_parsing.py",
        "path": "codebase_rag/tests/test_import_parsing.py"
      }
    },
    {
      "node_id": 6058,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_main_smoke.py",
        "path": "codebase_rag/tests/test_main_smoke.py"
      }
    },
    {
      "node_id": 6059,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_streams_functional.py",
        "path": "codebase_rag/tests/test_java_streams_functional.py"
      }
    },
    {
      "node_id": 6060,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_move_semantics.py",
        "path": "codebase_rag/tests/test_cpp_move_semantics.py"
      }
    },
    {
      "node_id": 6061,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_reflection_annotations.py",
        "path": "codebase_rag/tests/test_java_reflection_annotations.py"
      }
    },
    {
      "node_id": 6062,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_stl_usage.py",
        "path": "codebase_rag/tests/test_cpp_stl_usage.py"
      }
    },
    {
      "node_id": 6063,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_namespaces.py",
        "path": "codebase_rag/tests/test_cpp_namespaces.py"
      }
    },
    {
      "node_id": 6064,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_inheritance.py",
        "path": "codebase_rag/tests/test_python_inheritance.py"
      }
    },
    {
      "node_id": 6065,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_import_distance_calculation.py",
        "path": "codebase_rag/tests/test_import_distance_calculation.py"
      }
    },
    {
      "node_id": 6066,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_destructuring.py",
        "path": "codebase_rag/tests/test_javascript_destructuring.py"
      }
    },
    {
      "node_id": 6067,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_oop_patterns.py",
        "path": "codebase_rag/tests/test_lua_oop_patterns.py"
      }
    },
    {
      "node_id": 6068,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_multilang_import_parsing.py",
        "path": "codebase_rag/tests/test_multilang_import_parsing.py"
      }
    },
    {
      "node_id": 6069,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_casting_operators.py",
        "path": "codebase_rag/tests/test_cpp_casting_operators.py"
      }
    },
    {
      "node_id": 6070,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "conftest.py",
        "path": "codebase_rag/tests/conftest.py"
      }
    },
    {
      "node_id": 6071,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_return_type_inference.py",
        "path": "codebase_rag/tests/test_python_return_type_inference.py"
      }
    },
    {
      "node_id": 6072,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_modules.py",
        "path": "codebase_rag/tests/test_cpp_modules.py"
      }
    },
    {
      "node_id": 6073,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_environment.py",
        "path": "codebase_rag/tests/test_lua_environment.py"
      }
    },
    {
      "node_id": 6074,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_lifetimes_advanced.py",
        "path": "codebase_rag/tests/test_rust_lifetimes_advanced.py"
      }
    },
    {
      "node_id": 6075,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_coroutines.py",
        "path": "codebase_rag/tests/test_cpp_coroutines.py"
      }
    },
    {
      "node_id": 6076,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_real_world.py",
        "path": "codebase_rag/tests/test_java_real_world.py"
      }
    },
    {
      "node_id": 6077,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_modules_visibility.py",
        "path": "codebase_rag/tests/test_rust_modules_visibility.py"
      }
    },
    {
      "node_id": 6078,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_class_method_relationship.py",
        "path": "codebase_rag/tests/test_python_class_method_relationship.py"
      }
    },
    {
      "node_id": 6079,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_graph_updater_integration.py",
        "path": "codebase_rag/tests/test_graph_updater_integration.py"
      }
    },
    {
      "node_id": 6080,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_54_edge_cases.py",
        "path": "codebase_rag/tests/test_lua_54_edge_cases.py"
      }
    },
    {
      "node_id": 6081,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_trie_optimization.py",
        "path": "codebase_rag/tests/test_trie_optimization.py"
      }
    },
    {
      "node_id": 6082,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_functions_methods.py",
        "path": "codebase_rag/tests/test_lua_functions_methods.py"
      }
    },
    {
      "node_id": 6083,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_comprehensive.py",
        "path": "codebase_rag/tests/test_lua_comprehensive.py"
      }
    },
    {
      "node_id": 6084,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_imports.py",
        "path": "codebase_rag/tests/test_javascript_imports.py"
      }
    },
    {
      "node_id": 6085,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_advanced_types.py",
        "path": "codebase_rag/tests/test_typescript_advanced_types.py"
      }
    },
    {
      "node_id": 6086,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_imports.py",
        "path": "codebase_rag/tests/test_java_imports.py"
      }
    },
    {
      "node_id": 6087,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_trait_objects.py",
        "path": "codebase_rag/tests/test_rust_trait_objects.py"
      }
    },
    {
      "node_id": 6088,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_relationship_validation.py",
        "path": "codebase_rag/tests/test_java_relationship_validation.py"
      }
    },
    {
      "node_id": 6089,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_imports.py",
        "path": "codebase_rag/tests/test_python_imports.py"
      }
    },
    {
      "node_id": 6090,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_namespaces_modules.py",
        "path": "codebase_rag/tests/test_typescript_namespaces_modules.py"
      }
    },
    {
      "node_id": 6091,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_standard_library_imports.py",
        "path": "codebase_rag/tests/test_python_standard_library_imports.py"
      }
    },
    {
      "node_id": 6092,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_concepts.py",
        "path": "codebase_rag/tests/test_cpp_concepts.py"
      }
    },
    {
      "node_id": 6093,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_web_networking.py",
        "path": "codebase_rag/tests/test_rust_web_networking.py"
      }
    },
    {
      "node_id": 6094,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_coroutines.py",
        "path": "codebase_rag/tests/test_lua_coroutines.py"
      }
    },
    {
      "node_id": 6095,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_closures_functions.py",
        "path": "codebase_rag/tests/test_rust_closures_functions.py"
      }
    },
    {
      "node_id": 6096,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_memory_management.py",
        "path": "codebase_rag/tests/test_rust_memory_management.py"
      }
    },
    {
      "node_id": 6097,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_error_handling.py",
        "path": "codebase_rag/tests/test_lua_error_handling.py"
      }
    },
    {
      "node_id": 6098,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_string_patterns.py",
        "path": "codebase_rag/tests/test_lua_string_patterns.py"
      }
    },
    {
      "node_id": 6099,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_object_patterns.py",
        "path": "codebase_rag/tests/test_javascript_object_patterns.py"
      }
    },
    {
      "node_id": 6100,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_closures.py",
        "path": "codebase_rag/tests/test_lua_closures.py"
      }
    },
    {
      "node_id": 6101,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_imports.py",
        "path": "codebase_rag/tests/test_lua_imports.py"
      }
    },
    {
      "node_id": 6102,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_macros_metaprogramming.py",
        "path": "codebase_rag/tests/test_rust_macros_metaprogramming.py"
      }
    },
    {
      "node_id": 6103,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_ranges_views.py",
        "path": "codebase_rag/tests/test_cpp_ranges_views.py"
      }
    },
    {
      "node_id": 6104,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_table_manipulation.py",
        "path": "codebase_rag/tests/test_lua_table_manipulation.py"
      }
    },
    {
      "node_id": 6105,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_unsafe_ffi.py",
        "path": "codebase_rag/tests/test_rust_unsafe_ffi.py"
      }
    },
    {
      "node_id": 6106,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_declaration_files.py",
        "path": "codebase_rag/tests/test_typescript_declaration_files.py"
      }
    },
    {
      "node_id": 6107,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_context_managers.py",
        "path": "codebase_rag/tests/test_python_context_managers.py"
      }
    },
    {
      "node_id": 6108,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_structural_relationships.py",
        "path": "codebase_rag/tests/test_structural_relationships.py"
      }
    },
    {
      "node_id": 6109,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_advanced_oop.py",
        "path": "codebase_rag/tests/test_java_advanced_oop.py"
      }
    },
    {
      "node_id": 6110,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_error_handling.py",
        "path": "codebase_rag/tests/test_javascript_error_handling.py"
      }
    },
    {
      "node_id": 6111,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_collections_frameworks.py",
        "path": "codebase_rag/tests/test_java_collections_frameworks.py"
      }
    },
    {
      "node_id": 6112,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_constructor_destructor.py",
        "path": "codebase_rag/tests/test_cpp_constructor_destructor.py"
      }
    },
    {
      "node_id": 6113,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_relative_import_resolution.py",
        "path": "codebase_rag/tests/test_python_relative_import_resolution.py"
      }
    },
    {
      "node_id": 6114,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_method_calls.py",
        "path": "codebase_rag/tests/test_java_method_calls.py"
      }
    },
    {
      "node_id": 6115,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_classes.py",
        "path": "codebase_rag/tests/test_typescript_classes.py"
      }
    },
    {
      "node_id": 6116,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_smart_pointers.py",
        "path": "codebase_rag/tests/test_cpp_smart_pointers.py"
      }
    },
    {
      "node_id": 6117,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_comprehensive.py",
        "path": "codebase_rag/tests/test_cpp_comprehensive.py"
      }
    },
    {
      "node_id": 6118,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_traits_generics.py",
        "path": "codebase_rag/tests/test_rust_traits_generics.py"
      }
    },
    {
      "node_id": 6119,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_lambdas_functional.py",
        "path": "codebase_rag/tests/test_cpp_lambdas_functional.py"
      }
    },
    {
      "node_id": 6120,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_classes.py",
        "path": "codebase_rag/tests/test_javascript_classes.py"
      }
    },
    {
      "node_id": 6121,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_async_patterns.py",
        "path": "codebase_rag/tests/test_javascript_async_patterns.py"
      }
    },
    {
      "node_id": 6122,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_decorators.py",
        "path": "codebase_rag/tests/test_typescript_decorators.py"
      }
    },
    {
      "node_id": 6123,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_smart_pointers.py",
        "path": "codebase_rag/tests/test_rust_smart_pointers.py"
      }
    },
    {
      "node_id": 6124,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_error_handling_advanced.py",
        "path": "codebase_rag/tests/test_rust_error_handling_advanced.py"
      }
    },
    {
      "node_id": 6125,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_modules.py",
        "path": "codebase_rag/tests/test_java_modules.py"
      }
    },
    {
      "node_id": 6126,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_decorators.py",
        "path": "codebase_rag/tests/test_python_decorators.py"
      }
    },
    {
      "node_id": 6127,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_concurrency_async.py",
        "path": "codebase_rag/tests/test_rust_concurrency_async.py"
      }
    },
    {
      "node_id": 6128,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_modules.py",
        "path": "codebase_rag/tests/test_javascript_modules.py"
      }
    },
    {
      "node_id": 6129,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_edge_cases.py",
        "path": "codebase_rag/tests/test_lua_edge_cases.py"
      }
    },
    {
      "node_id": 6130,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_realtime_updater.py",
        "path": "codebase_rag/tests/test_realtime_updater.py"
      }
    },
    {
      "node_id": 6131,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_enums.py",
        "path": "codebase_rag/tests/test_typescript_enums.py"
      }
    },
    {
      "node_id": 6132,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_real_world.py",
        "path": "codebase_rag/tests/test_python_real_world.py"
      }
    },
    {
      "node_id": 6133,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_memory_management.py",
        "path": "codebase_rag/tests/test_cpp_memory_management.py"
      }
    },
    {
      "node_id": 6134,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_modern_features.py",
        "path": "codebase_rag/tests/test_cpp_modern_features.py"
      }
    },
    {
      "node_id": 6135,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_collections_iterators.py",
        "path": "codebase_rag/tests/test_rust_collections_iterators.py"
      }
    },
    {
      "node_id": 6136,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_constexpr_compile_time.py",
        "path": "codebase_rag/tests/test_cpp_constexpr_compile_time.py"
      }
    },
    {
      "node_id": 6137,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_basic_syntax.py",
        "path": "codebase_rag/tests/test_cpp_basic_syntax.py"
      }
    },
    {
      "node_id": 6138,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_complex_cross_file_calls.py",
        "path": "codebase_rag/tests/test_complex_cross_file_calls.py"
      }
    },
    {
      "node_id": 6139,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_spread_rest.py",
        "path": "codebase_rag/tests/test_javascript_spread_rest.py"
      }
    },
    {
      "node_id": 6140,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_lambda_captures.py",
        "path": "codebase_rag/tests/test_cpp_lambda_captures.py"
      }
    },
    {
      "node_id": 6141,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_nested_functions.py",
        "path": "codebase_rag/tests/test_python_nested_functions.py"
      }
    },
    {
      "node_id": 6142,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_comprehensive.py",
        "path": "codebase_rag/tests/test_java_comprehensive.py"
      }
    },
    {
      "node_id": 6143,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_imports_paths.py",
        "path": "codebase_rag/tests/test_lua_imports_paths.py"
      }
    },
    {
      "node_id": 6144,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_call_resolution_fallback.py",
        "path": "codebase_rag/tests/test_python_call_resolution_fallback.py"
      }
    },
    {
      "node_id": 6145,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_format_spaceship.py",
        "path": "codebase_rag/tests/test_cpp_format_spaceship.py"
      }
    },
    {
      "node_id": 6146,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_wildcard_import_resolution.py",
        "path": "codebase_rag/tests/test_python_wildcard_import_resolution.py"
      }
    },
    {
      "node_id": 6147,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_friend_functions.py",
        "path": "codebase_rag/tests/test_cpp_friend_functions.py"
      }
    },
    {
      "node_id": 6148,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_concurrency.py",
        "path": "codebase_rag/tests/test_cpp_concurrency.py"
      }
    },
    {
      "node_id": 6149,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_path_resolution.py",
        "path": "codebase_rag/tests/test_javascript_path_resolution.py"
      }
    },
    {
      "node_id": 6150,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_closures_scoping.py",
        "path": "codebase_rag/tests/test_javascript_closures_scoping.py"
      }
    },
    {
      "node_id": 6151,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_stdlib.py",
        "path": "codebase_rag/tests/test_lua_stdlib.py"
      }
    },
    {
      "node_id": 6152,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_metatables.py",
        "path": "codebase_rag/tests/test_lua_metatables.py"
      }
    },
    {
      "node_id": 6153,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust.py",
        "path": "codebase_rag/tests/test_rust.py"
      }
    },
    {
      "node_id": 6154,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_nested_structures.py",
        "path": "codebase_rag/tests/test_java_nested_structures.py"
      }
    },
    {
      "node_id": 6155,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_attributes.py",
        "path": "codebase_rag/tests/test_cpp_attributes.py"
      }
    },
    {
      "node_id": 6156,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_nested_function_qualified_names.py",
        "path": "codebase_rag/tests/test_nested_function_qualified_names.py"
      }
    },
    {
      "node_id": 6157,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_structs_enums.py",
        "path": "codebase_rag/tests/test_rust_structs_enums.py"
      }
    },
    {
      "node_id": 6158,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_modern_features.py",
        "path": "codebase_rag/tests/test_lua_modern_features.py"
      }
    },
    {
      "node_id": 6159,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_templates.py",
        "path": "codebase_rag/tests/test_cpp_templates.py"
      }
    },
    {
      "node_id": 6160,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_edge_cases.py",
        "path": "codebase_rag/tests/test_java_edge_cases.py"
      }
    },
    {
      "node_id": 6161,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_designated_init_consteval.py",
        "path": "codebase_rag/tests/test_cpp_designated_init_consteval.py"
      }
    },
    {
      "node_id": 6162,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_operators_overloading.py",
        "path": "codebase_rag/tests/test_cpp_operators_overloading.py"
      }
    },
    {
      "node_id": 6163,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_prototypes.py",
        "path": "codebase_rag/tests/test_javascript_prototypes.py"
      }
    },
    {
      "node_id": 6164,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_concurrency.py",
        "path": "codebase_rag/tests/test_java_concurrency.py"
      }
    },
    {
      "node_id": 6165,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_this_binding.py",
        "path": "codebase_rag/tests/test_javascript_this_binding.py"
      }
    },
    {
      "node_id": 6166,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_includes.py",
        "path": "codebase_rag/tests/test_cpp_includes.py"
      }
    },
    {
      "node_id": 6167,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_python_imported_class_method_calls.py",
        "path": "codebase_rag/tests/test_python_imported_class_method_calls.py"
      }
    },
    {
      "node_id": 6168,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_file_io.py",
        "path": "codebase_rag/tests/test_lua_file_io.py"
      }
    },
    {
      "node_id": 6169,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_modern_features.py",
        "path": "codebase_rag/tests/test_java_modern_features.py"
      }
    },
    {
      "node_id": 6170,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_javascript_functions.py",
        "path": "codebase_rag/tests/test_javascript_functions.py"
      }
    },
    {
      "node_id": 6171,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_performance_optimization.py",
        "path": "codebase_rag/tests/test_rust_performance_optimization.py"
      }
    },
    {
      "node_id": 6172,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_preprocessor.py",
        "path": "codebase_rag/tests/test_cpp_preprocessor.py"
      }
    },
    {
      "node_id": 6173,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_lua_complex_scenarios.py",
        "path": "codebase_rag/tests/test_lua_complex_scenarios.py"
      }
    },
    {
      "node_id": 6174,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_typescript_types.py",
        "path": "codebase_rag/tests/test_typescript_types.py"
      }
    },
    {
      "node_id": 6175,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_virtual_threads_loom.py",
        "path": "codebase_rag/tests/test_java_virtual_threads_loom.py"
      }
    },
    {
      "node_id": 6176,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_rust_pattern_matching.py",
        "path": "codebase_rag/tests/test_rust_pattern_matching.py"
      }
    },
    {
      "node_id": 6177,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_error_handling.py",
        "path": "codebase_rag/tests/test_cpp_error_handling.py"
      }
    },
    {
      "node_id": 6178,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_classes_inheritance.py",
        "path": "codebase_rag/tests/test_cpp_classes_inheritance.py"
      }
    },
    {
      "node_id": 6179,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_java_complex_relationships.py",
        "path": "codebase_rag/tests/test_java_complex_relationships.py"
      }
    },
    {
      "node_id": 6180,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "test_cpp_template_metaprogramming.py",
        "path": "codebase_rag/tests/test_cpp_template_metaprogramming.py"
      }
    },
    {
      "node_id": 6181,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "graph_service.py",
        "path": "codebase_rag/services/graph_service.py"
      }
    },
    {
      "node_id": 6182,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "__init__.py",
        "path": "codebase_rag/services/__init__.py"
      }
    },
    {
      "node_id": 6183,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".py",
        "name": "llm.py",
        "path": "codebase_rag/services/llm.py"
      }
    },
    {
      "node_id": 6184,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".yml",
        "name": "claude-code-review.yml",
        "path": ".github/workflows/claude-code-review.yml"
      }
    },
    {
      "node_id": 6185,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".yml",
        "name": "claude.yml",
        "path": ".github/workflows/claude.yml"
      }
    },
    {
      "node_id": 6186,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".yml",
        "name": "build-binaries.yml",
        "path": ".github/workflows/build-binaries.yml"
      }
    },
    {
      "node_id": 6187,
      "labels": [
        "File"
      ],
      "properties": {
        "extension": ".md",
        "name": "todo.md",
        "path": ".github/ISSUE_TEMPLATE/todo.md"
      }
    },
    {
      "node_id": 6188,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "loguru"
      }
    },
    {
      "node_id": 6189,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pydantic-ai-slim"
      }
    },
    {
      "node_id": 6190,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pydantic-settings"
      }
    },
    {
      "node_id": 6191,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pymgclient"
      }
    },
    {
      "node_id": 6192,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "python-dotenv"
      }
    },
    {
      "node_id": 6193,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "toml"
      }
    },
    {
      "node_id": 6194,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-python"
      }
    },
    {
      "node_id": 6195,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter"
      }
    },
    {
      "node_id": 6196,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "watchdog"
      }
    },
    {
      "node_id": 6197,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "typer"
      }
    },
    {
      "node_id": 6198,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "rich"
      }
    },
    {
      "node_id": 6199,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "prompt-toolkit"
      }
    },
    {
      "node_id": 6200,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "diff-match-patch"
      }
    },
    {
      "node_id": 6201,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "click"
      }
    },
    {
      "node_id": 6202,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pytest-xdist"
      }
    },
    {
      "node_id": 6203,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pytest"
      }
    },
    {
      "node_id": 6204,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pytest-asyncio"
      }
    },
    {
      "node_id": 6205,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "ruff"
      }
    },
    {
      "node_id": 6206,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "mypy"
      }
    },
    {
      "node_id": 6207,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "pre-commit"
      }
    },
    {
      "node_id": 6208,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-javascript"
      }
    },
    {
      "node_id": 6209,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-typescript"
      }
    },
    {
      "node_id": 6210,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-rust"
      }
    },
    {
      "node_id": 6211,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-go"
      }
    },
    {
      "node_id": 6212,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-scala"
      }
    },
    {
      "node_id": 6213,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-java"
      }
    },
    {
      "node_id": 6214,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-cpp"
      }
    },
    {
      "node_id": 6215,
      "labels": [
        "ExternalPackage"
      ],
      "properties": {
        "name": "tree-sitter-lua"
      }
    },
    {
      "node_id": 6216,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles file system events and updates the graph accordingly.",
        "end_line": 81,
        "is_exported": false,
        "name": "CodeChangeEventHandler",
        "qualified_name": "code-graph-rag.realtime_updater.CodeChangeEventHandler",
        "start_line": 18
      }
    },
    {
      "node_id": 6217,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [
          "dataclass"
        ],
        "docstring": "Configuration for language-specific Tree-sitter parsing.",
        "end_line": 72,
        "is_exported": false,
        "name": "LanguageConfig",
        "qualified_name": "code-graph-rag.codebase_rag.language_config.LanguageConfig",
        "start_line": 43
      }
    },
    {
      "node_id": 6218,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Application Configuration using Pydantic for robust validation and type-safety.\n    All settings are loaded from environment variables or a .env file.",
        "end_line": 118,
        "is_exported": false,
        "name": "AppConfig",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig",
        "start_line": 23
      }
    },
    {
      "node_id": 6219,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Trie data structure optimized for function qualified name lookups.",
        "end_line": 151,
        "is_exported": false,
        "name": "FunctionRegistryTrie",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie",
        "start_line": 23
      }
    },
    {
      "node_id": 6220,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Memory-aware AST cache with automatic cleanup to prevent memory leaks.\n\n    Uses LRU eviction strategy and monitors memory usage to maintain\n    reasonable memory consumption during long-running analysis sessions.",
        "end_line": 225,
        "is_exported": false,
        "name": "BoundedASTCache",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache",
        "start_line": 154
      }
    },
    {
      "node_id": 6221,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parses code using Tree-sitter and updates the graph.",
        "end_line": 411,
        "is_exported": false,
        "name": "GraphUpdater",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater",
        "start_line": 228
      }
    },
    {
      "node_id": 6222,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a node in the exported graph.",
        "end_line": 17,
        "is_exported": false,
        "name": "GraphNode",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphNode",
        "start_line": 12
      }
    },
    {
      "node_id": 6223,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a relationship in the exported graph.",
        "end_line": 27,
        "is_exported": false,
        "name": "GraphRelationship",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphRelationship",
        "start_line": 21
      }
    },
    {
      "node_id": 6224,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Utility class for loading and working with exported graph data.",
        "end_line": 184,
        "is_exported": false,
        "name": "GraphLoader",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader",
        "start_line": 30
      }
    },
    {
      "node_id": 6225,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for results returned from the knowledge graph tool.",
        "end_line": 32,
        "is_exported": false,
        "name": "GraphData",
        "qualified_name": "code-graph-rag.codebase_rag.schemas.GraphData",
        "start_line": 6
      }
    },
    {
      "node_id": 6226,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for shell command results.",
        "end_line": 53,
        "is_exported": false,
        "name": "ShellCommandResult",
        "qualified_name": "code-graph-rag.codebase_rag.schemas.ShellCommandResult",
        "start_line": 48
      }
    },
    {
      "node_id": 6227,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for code snippet results.",
        "end_line": 45,
        "is_exported": false,
        "name": "CodeSnippet",
        "qualified_name": "code-graph-rag.codebase_rag.schemas.CodeSnippet",
        "start_line": 35
      }
    },
    {
      "node_id": 6228,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles processing of function and method calls.",
        "end_line": 1077,
        "is_exported": false,
        "name": "CallProcessor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor",
        "start_line": 20
      }
    },
    {
      "node_id": 6229,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles precise type inference for Java using tree-sitter AST analysis.",
        "end_line": 1146,
        "is_exported": false,
        "name": "JavaTypeInferenceEngine",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine",
        "start_line": 21
      }
    },
    {
      "node_id": 6230,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles type inference for local variables and method returns.",
        "end_line": 1298,
        "is_exported": false,
        "name": "TypeInferenceEngine",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine",
        "start_line": 21
      }
    },
    {
      "node_id": 6231,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Protocol for AST cache implementations.",
        "end_line": 24,
        "is_exported": false,
        "name": "ASTCacheProtocol",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol",
        "start_line": 17
      }
    },
    {
      "node_id": 6232,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Factory for creating processor instances with proper dependency injection.",
        "end_line": 143,
        "is_exported": false,
        "name": "ProcessorFactory",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory",
        "start_line": 27
      }
    },
    {
      "node_id": 6233,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles identification and processing of project structure.",
        "end_line": 143,
        "is_exported": false,
        "name": "StructureProcessor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor.StructureProcessor",
        "start_line": 12
      }
    },
    {
      "node_id": 6234,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles processing of function, class, and method definitions.",
        "end_line": 2611,
        "is_exported": false,
        "name": "DefinitionProcessor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor",
        "start_line": 36
      }
    },
    {
      "node_id": 6235,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles parsing and processing of import statements.",
        "end_line": 859,
        "is_exported": false,
        "name": "ImportProcessor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor",
        "start_line": 21
      }
    },
    {
      "node_id": 6236,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Type definition for Java class information.",
        "end_line": 21,
        "is_exported": false,
        "name": "JavaClassInfo",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.JavaClassInfo",
        "start_line": 13
      }
    },
    {
      "node_id": 6237,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Type definition for Java field information.",
        "end_line": 42,
        "is_exported": false,
        "name": "JavaFieldInfo",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.JavaFieldInfo",
        "start_line": 36
      }
    },
    {
      "node_id": 6238,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Type definition for Java annotation information.",
        "end_line": 49,
        "is_exported": false,
        "name": "JavaAnnotationInfo",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.JavaAnnotationInfo",
        "start_line": 45
      }
    },
    {
      "node_id": 6239,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Type definition for Java method information.",
        "end_line": 33,
        "is_exported": false,
        "name": "JavaMethodInfo",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_utils.JavaMethodInfo",
        "start_line": 24
      }
    },
    {
      "node_id": 6240,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "end_line": 20,
        "is_exported": false,
        "name": "FunctionMatch",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FunctionMatch",
        "start_line": 15
      }
    },
    {
      "node_id": 6241,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for file edit results.",
        "end_line": 47,
        "is_exported": false,
        "name": "EditResult",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.EditResult",
        "start_line": 42
      }
    },
    {
      "node_id": 6242,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "end_line": 468,
        "is_exported": false,
        "name": "FileEditor",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor",
        "start_line": 50
      }
    },
    {
      "node_id": 6243,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Service to execute shell commands.",
        "end_line": 197,
        "is_exported": false,
        "name": "ShellCommander",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.ShellCommander",
        "start_line": 106
      }
    },
    {
      "node_id": 6244,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for file read results.",
        "end_line": 13,
        "is_exported": false,
        "name": "FileReadResult",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.FileReadResult",
        "start_line": 8
      }
    },
    {
      "node_id": 6245,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Service to read file content from the filesystem.",
        "end_line": 86,
        "is_exported": false,
        "name": "FileReader",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.FileReader",
        "start_line": 16
      }
    },
    {
      "node_id": 6246,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Placeholder client that raises NotImplementedError for unsupported providers.",
        "end_line": 21,
        "is_exported": false,
        "name": "_NotSupportedClient",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer._NotSupportedClient",
        "start_line": 15
      }
    },
    {
      "node_id": 6247,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "A tool to perform multimodal analysis on documents like PDFs\n    by making a direct call to the Gemini API.",
        "end_line": 152,
        "is_exported": false,
        "name": "DocumentAnalyzer",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer.DocumentAnalyzer",
        "start_line": 24
      }
    },
    {
      "node_id": 6248,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Data model for file creation results.",
        "end_line": 13,
        "is_exported": false,
        "name": "FileCreationResult",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.FileCreationResult",
        "start_line": 8
      }
    },
    {
      "node_id": 6249,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Service to write file content to the filesystem.",
        "end_line": 50,
        "is_exported": false,
        "name": "FileWriter",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.FileWriter",
        "start_line": 16
      }
    },
    {
      "node_id": 6250,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Service to retrieve code snippets using the graph and filesystem.",
        "end_line": 85,
        "is_exported": false,
        "name": "CodeRetriever",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval.CodeRetriever",
        "start_line": 10
      }
    },
    {
      "node_id": 6251,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "end_line": 59,
        "is_exported": false,
        "name": "DirectoryLister",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister.DirectoryLister",
        "start_line": 8
      }
    },
    {
      "node_id": 6252,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Custom exception for graph query failures.",
        "end_line": 15,
        "is_exported": false,
        "name": "GraphQueryError",
        "qualified_name": "code-graph-rag.codebase_rag.tools.codebase_query.GraphQueryError",
        "start_line": 12
      }
    },
    {
      "node_id": 6253,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test import parsing functionality across different languages.",
        "end_line": 235,
        "is_exported": false,
        "name": "TestImportParsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing",
        "start_line": 13
      }
    },
    {
      "node_id": 6254,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test the _calculate_import_distance method for correct sibling module handling.",
        "end_line": 196,
        "is_exported": false,
        "name": "TestImportDistanceCalculation",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation",
        "start_line": 16
      }
    },
    {
      "node_id": 6255,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test the Trie optimization for function registry lookups.",
        "end_line": 183,
        "is_exported": false,
        "name": "TestTrieOptimization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization",
        "start_line": 10
      }
    },
    {
      "node_id": 6256,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test import resolution for standard library vs local modules.",
        "end_line": 403,
        "is_exported": false,
        "name": "TestStandardLibraryImports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports",
        "start_line": 17
      }
    },
    {
      "node_id": 6257,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import resolution for Python modules.",
        "end_line": 215,
        "is_exported": false,
        "name": "TestRelativeImportResolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution",
        "start_line": 17
      }
    },
    {
      "node_id": 6258,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test the fallback logic in function call resolution.",
        "end_line": 209,
        "is_exported": false,
        "name": "TestCallResolutionFallback",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback",
        "start_line": 17
      }
    },
    {
      "node_id": 6259,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test wildcard import resolution for all supported languages.",
        "end_line": 360,
        "is_exported": false,
        "name": "TestWildcardImportResolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution",
        "start_line": 17
      }
    },
    {
      "node_id": 6260,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test cases for JavaScript module path resolution logic.",
        "end_line": 137,
        "is_exported": false,
        "name": "TestJavaScriptPathResolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution",
        "start_line": 10
      }
    },
    {
      "node_id": 6261,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handles all communication and query execution with the Memgraph database.",
        "end_line": 232,
        "is_exported": false,
        "name": "MemgraphIngestor",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor",
        "start_line": 9
      }
    },
    {
      "node_id": 6262,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Custom exception for LLM generation failures.",
        "end_line": 25,
        "is_exported": false,
        "name": "LLMGenerationError",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm.LLMGenerationError",
        "start_line": 22
      }
    },
    {
      "node_id": 6263,
      "labels": [
        "Class"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Generates Cypher queries from natural language.",
        "end_line": 119,
        "is_exported": false,
        "name": "CypherGenerator",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm.CypherGenerator",
        "start_line": 38
      }
    },
    {
      "node_id": 6264,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 26,
        "name": "__init__",
        "qualified_name": "code-graph-rag.realtime_updater.CodeChangeEventHandler.__init__",
        "start_line": 21
      }
    },
    {
      "node_id": 6265,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if the file path is relevant for processing.",
        "end_line": 33,
        "name": "_is_relevant",
        "qualified_name": "code-graph-rag.realtime_updater.CodeChangeEventHandler._is_relevant",
        "start_line": 28
      }
    },
    {
      "node_id": 6266,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "A single dispatch method to handle all file system events.",
        "end_line": 81,
        "name": "dispatch",
        "qualified_name": "code-graph-rag.realtime_updater.CodeChangeEventHandler.dispatch",
        "start_line": 35
      }
    },
    {
      "node_id": 6267,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Validate that required API keys are set for the providers being used.",
        "end_line": 94,
        "name": "validate_for_usage",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig.validate_for_usage",
        "start_line": 68
      }
    },
    {
      "node_id": 6268,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Set the active orchestrator model.",
        "end_line": 114,
        "name": "set_orchestrator_model",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig.set_orchestrator_model",
        "start_line": 112
      }
    },
    {
      "node_id": 6269,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Set the active cypher model.",
        "end_line": 118,
        "name": "set_cypher_model",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig.set_cypher_model",
        "start_line": 116
      }
    },
    {
      "node_id": 6270,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Determines the active orchestrator model ID.",
        "end_line": 102,
        "name": "active_orchestrator_model",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig.active_orchestrator_model",
        "start_line": 97
      }
    },
    {
      "node_id": 6271,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Determines the active cypher model ID.",
        "end_line": 110,
        "name": "active_cypher_model",
        "qualified_name": "code-graph-rag.codebase_rag.config.AppConfig.active_cypher_model",
        "start_line": 105
      }
    },
    {
      "node_id": 6272,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get function type by exact qualified name.",
        "end_line": 49,
        "name": "get",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.get",
        "start_line": 47
      }
    },
    {
      "node_id": 6273,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get function type by qualified name.",
        "end_line": 57,
        "name": "__getitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__getitem__",
        "start_line": 55
      }
    },
    {
      "node_id": 6274,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Remove qualified name from registry and clean up trie structure.\n\n        Performs proper cleanup of the trie to prevent memory leaks during\n        long-running sessions with file deletions/updates.",
        "end_line": 76,
        "name": "__delitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__delitem__",
        "start_line": 63
      }
    },
    {
      "node_id": 6275,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return all qualified names.",
        "end_line": 113,
        "name": "keys",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.keys",
        "start_line": 111
      }
    },
    {
      "node_id": 6276,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return number of entries.",
        "end_line": 121,
        "name": "__len__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__len__",
        "start_line": 119
      }
    },
    {
      "node_id": 6277,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 144,
        "name": "dfs",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.dfs",
        "start_line": 136
      }
    },
    {
      "node_id": 6278,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 28,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__init__",
        "start_line": 26
      }
    },
    {
      "node_id": 6279,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Insert a function into the trie.",
        "end_line": 45,
        "name": "insert",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.insert",
        "start_line": 30
      }
    },
    {
      "node_id": 6280,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if qualified name exists in registry.",
        "end_line": 53,
        "name": "__contains__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__contains__",
        "start_line": 51
      }
    },
    {
      "node_id": 6281,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Set function type for qualified name.",
        "end_line": 61,
        "name": "__setitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.__setitem__",
        "start_line": 59
      }
    },
    {
      "node_id": 6282,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively clean up empty trie nodes.\n\n        Args:\n            parts: Remaining parts of the qualified name path\n            node: Current trie node\n\n        Returns:\n            True if current node is empty and can be deleted",
        "end_line": 109,
        "name": "_cleanup_trie_path",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie._cleanup_trie_path",
        "start_line": 78
      }
    },
    {
      "node_id": 6283,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return all (qualified_name, type) pairs.",
        "end_line": 117,
        "name": "items",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.items",
        "start_line": 115
      }
    },
    {
      "node_id": 6284,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find all qualified names that start with prefix and end with suffix.",
        "end_line": 147,
        "name": "find_with_prefix_and_suffix",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.find_with_prefix_and_suffix",
        "start_line": 123
      }
    },
    {
      "node_id": 6285,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find all qualified names ending with the given suffix.",
        "end_line": 151,
        "name": "find_ending_with",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.FunctionRegistryTrie.find_ending_with",
        "start_line": 149
      }
    },
    {
      "node_id": 6286,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Add or update an AST cache entry with automatic cleanup.",
        "end_line": 182,
        "name": "__setitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.__setitem__",
        "start_line": 172
      }
    },
    {
      "node_id": 6287,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Remove entry from cache.",
        "end_line": 194,
        "name": "__delitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.__delitem__",
        "start_line": 191
      }
    },
    {
      "node_id": 6288,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return all cache items.",
        "end_line": 202,
        "name": "items",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.items",
        "start_line": 200
      }
    },
    {
      "node_id": 6289,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initialize the bounded AST cache.\n\n        Args:\n            max_entries: Maximum number of AST entries to cache\n            max_memory_mb: Soft memory limit in MB for cache eviction",
        "end_line": 170,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.__init__",
        "start_line": 161
      }
    },
    {
      "node_id": 6290,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if key exists in cache.",
        "end_line": 198,
        "name": "__contains__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.__contains__",
        "start_line": 196
      }
    },
    {
      "node_id": 6291,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get AST cache entry and mark as recently used.",
        "end_line": 189,
        "name": "__getitem__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache.__getitem__",
        "start_line": 184
      }
    },
    {
      "node_id": 6292,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Enforce cache size and memory limits by evicting old entries.",
        "end_line": 215,
        "name": "_enforce_limits",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache._enforce_limits",
        "start_line": 204
      }
    },
    {
      "node_id": 6293,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if we should evict entries due to memory pressure.",
        "end_line": 225,
        "name": "_should_evict_for_memory",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.BoundedASTCache._should_evict_for_memory",
        "start_line": 217
      }
    },
    {
      "node_id": 6294,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Removes all state associated with a file from the updater's memory.",
        "end_line": 358,
        "name": "remove_file_from_state",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater.remove_file_from_state",
        "start_line": 318
      }
    },
    {
      "node_id": 6295,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Add parser references to query objects for processors.",
        "end_line": 291,
        "name": "_prepare_queries_with_parsers",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater._prepare_queries_with_parsers",
        "start_line": 281
      }
    },
    {
      "node_id": 6296,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 257,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater.__init__",
        "start_line": 231
      }
    },
    {
      "node_id": 6297,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Orchestrates the parsing and ingestion process.",
        "end_line": 316,
        "name": "run",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater.run",
        "start_line": 293
      }
    },
    {
      "node_id": 6298,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a file is a dependency file that should be processed for external dependencies.",
        "end_line": 279,
        "name": "_is_dependency_file",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater._is_dependency_file",
        "start_line": 259
      }
    },
    {
      "node_id": 6299,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Second pass: Efficiently processes all files, parses them, and caches their ASTs.",
        "end_line": 402,
        "name": "_process_files",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater._process_files",
        "start_line": 360
      }
    },
    {
      "node_id": 6300,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if file path should be skipped based on ignore patterns.",
        "end_line": 368,
        "name": "should_skip_path",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater.should_skip_path",
        "start_line": 363
      }
    },
    {
      "node_id": 6301,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Third pass: Process function calls using the cached ASTs.",
        "end_line": 411,
        "name": "_process_function_calls",
        "qualified_name": "code-graph-rag.codebase_rag.graph_updater.GraphUpdater._process_function_calls",
        "start_line": 404
      }
    },
    {
      "node_id": 6302,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build index for a specific property.",
        "end_line": 104,
        "name": "_build_property_index",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader._build_property_index",
        "start_line": 94
      }
    },
    {
      "node_id": 6303,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find all nodes with a specific label. O(1) lookup.",
        "end_line": 134,
        "name": "find_nodes_by_label",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.find_nodes_by_label",
        "start_line": 130
      }
    },
    {
      "node_id": 6304,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get a node by its ID. O(1) lookup.",
        "end_line": 148,
        "name": "get_node_by_id",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.get_node_by_id",
        "start_line": 144
      }
    },
    {
      "node_id": 6305,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get outgoing relationships for a specific node. O(1) lookup.",
        "end_line": 160,
        "name": "get_outgoing_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.get_outgoing_relationships",
        "start_line": 156
      }
    },
    {
      "node_id": 6306,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Initialize the loader with an exported graph file.",
        "end_line": 45,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.__init__",
        "start_line": 33
      }
    },
    {
      "node_id": 6307,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get all relationships.",
        "end_line": 120,
        "name": "relationships",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.relationships",
        "start_line": 115
      }
    },
    {
      "node_id": 6308,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get all nodes.",
        "end_line": 112,
        "name": "nodes",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.nodes",
        "start_line": 107
      }
    },
    {
      "node_id": 6309,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Load the graph data from file and build performance indexes.",
        "end_line": 92,
        "name": "load",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.load",
        "start_line": 47
      }
    },
    {
      "node_id": 6310,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get metadata about the export.",
        "end_line": 128,
        "name": "metadata",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.metadata",
        "start_line": 123
      }
    },
    {
      "node_id": 6311,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find nodes by property value. O(1) lookup after first use.",
        "end_line": 142,
        "name": "find_node_by_property",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.find_node_by_property",
        "start_line": 136
      }
    },
    {
      "node_id": 6312,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get all relationships (incoming and outgoing) for a node. O(1) lookup.",
        "end_line": 154,
        "name": "get_relationships_for_node",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.get_relationships_for_node",
        "start_line": 150
      }
    },
    {
      "node_id": 6313,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get incoming relationships for a specific node. O(1) lookup.",
        "end_line": 166,
        "name": "get_incoming_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.get_incoming_relationships",
        "start_line": 162
      }
    },
    {
      "node_id": 6314,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get a summary of the graph structure.",
        "end_line": 184,
        "name": "summary",
        "qualified_name": "code-graph-rag.codebase_rag.graph_loader.GraphLoader.summary",
        "start_line": 168
      }
    },
    {
      "node_id": 6315,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "field_validator",
          "classmethod"
        ],
        "end_line": 30,
        "name": "_format_results",
        "qualified_name": "code-graph-rag.codebase_rag.schemas.GraphData._format_results",
        "start_line": 15
      }
    },
    {
      "node_id": 6316,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find and ingest function calls within a caller node.",
        "end_line": 401,
        "name": "_ingest_function_calls",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._ingest_function_calls",
        "start_line": 323
      }
    },
    {
      "node_id": 6317,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this appears to be a method chain with parentheses (not just obj.method).",
        "end_line": 831,
        "name": "_is_method_chain",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._is_method_chain",
        "start_line": 822
      }
    },
    {
      "node_id": 6318,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process nested call expressions within a call node's function expression.",
        "end_line": 428,
        "name": "_process_nested_calls_in_node",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._process_nested_calls_in_node",
        "start_line": 403
      }
    },
    {
      "node_id": 6319,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve chained method calls like obj.method().other_method().",
        "end_line": 892,
        "name": "_resolve_chained_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_chained_call",
        "start_line": 833
      }
    },
    {
      "node_id": 6320,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process calls within class methods.",
        "end_line": 223,
        "name": "_process_calls_in_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._process_calls_in_classes",
        "start_line": 170
      }
    },
    {
      "node_id": 6321,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process function calls in a specific file using its cached AST.",
        "end_line": 128,
        "name": "process_calls_in_file",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor.process_calls_in_file",
        "start_line": 107
      }
    },
    {
      "node_id": 6322,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extracts the name of the function or method being called.",
        "end_line": 309,
        "name": "_get_call_target_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._get_call_target_name",
        "start_line": 234
      }
    },
    {
      "node_id": 6323,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively find and process call expressions in a node tree.",
        "end_line": 469,
        "name": "_find_and_process_nested_calls",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._find_and_process_nested_calls",
        "start_line": 430
      }
    },
    {
      "node_id": 6324,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve super calls to parent class methods (JavaScript/TypeScript patterns).",
        "end_line": 943,
        "name": "_resolve_super_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_super_call",
        "start_line": 894
      }
    },
    {
      "node_id": 6325,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for nested functions.",
        "end_line": 1043,
        "name": "_build_nested_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._build_nested_qualified_name",
        "start_line": 1010
      }
    },
    {
      "node_id": 6326,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process calls within top-level functions.",
        "end_line": 168,
        "name": "_process_calls_in_functions",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._process_calls_in_functions",
        "start_line": 130
      }
    },
    {
      "node_id": 6327,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process top-level calls in the module (like IIFE calls).",
        "end_line": 232,
        "name": "_process_module_level_calls",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._process_module_level_calls",
        "start_line": 225
      }
    },
    {
      "node_id": 6328,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the target name for IIFE calls like (function(){})().",
        "end_line": 321,
        "name": "_get_iife_target_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._get_iife_target_name",
        "start_line": 311
      }
    },
    {
      "node_id": 6329,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a function call to its qualified name and type.",
        "end_line": 717,
        "name": "_resolve_function_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_function_call",
        "start_line": 471
      }
    },
    {
      "node_id": 6330,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a method by looking up the inheritance chain.",
        "end_line": 975,
        "name": "_resolve_inherited_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_inherited_method",
        "start_line": 945
      }
    },
    {
      "node_id": 6331,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a function is actually a method inside a class.",
        "end_line": 1055,
        "name": "_is_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._is_method",
        "start_line": 1045
      }
    },
    {
      "node_id": 6332,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve built-in JavaScript method calls that don't exist in user code.",
        "end_line": 752,
        "name": "_resolve_builtin_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_builtin_call",
        "start_line": 719
      }
    },
    {
      "node_id": 6333,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 105,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor.__init__",
        "start_line": 89
      }
    },
    {
      "node_id": 6334,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve C++ operator calls to built-in operator functions.",
        "end_line": 820,
        "name": "_resolve_cpp_operator_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_cpp_operator_call",
        "start_line": 754
      }
    },
    {
      "node_id": 6335,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Calculate the 'distance' between a candidate function and the calling module.\n        Lower values indicate more likely imports (closer modules, common prefixes).",
        "end_line": 1002,
        "name": "_calculate_import_distance",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._calculate_import_distance",
        "start_line": 977
      }
    },
    {
      "node_id": 6336,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convert a simple class name to its fully qualified name.",
        "end_line": 1008,
        "name": "_resolve_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_class_name",
        "start_line": 1004
      }
    },
    {
      "node_id": 6337,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve Java method calls using the JavaTypeInferenceEngine.",
        "end_line": 1077,
        "name": "_resolve_java_method_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.call_processor.CallProcessor._resolve_java_method_call",
        "start_line": 1057
      }
    },
    {
      "node_id": 6338,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively traverse AST to find local variable declarations.",
        "end_line": 160,
        "name": "_traverse_for_local_variables",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._traverse_for_local_variables",
        "start_line": 151
      }
    },
    {
      "node_id": 6339,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a variable_declarator node to extract variable name and infer actual type.",
        "end_line": 227,
        "name": "_process_variable_declarator",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._process_variable_declarator",
        "start_line": 193
      }
    },
    {
      "node_id": 6340,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process Java assignment expressions to infer types.",
        "end_line": 303,
        "name": "_process_java_assignment",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._process_java_assignment",
        "start_line": 282
      }
    },
    {
      "node_id": 6341,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the return type of a method in a specific class using AST analysis.",
        "end_line": 473,
        "name": "_find_method_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_method_return_type",
        "start_line": 450
      }
    },
    {
      "node_id": 6342,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a Java method invocation to its qualified name and type.\n\n        This is the main entry point for precise method call resolution.\n\n        Args:\n            call_node: The method_invocation AST node\n            local_var_types: Map of variable names to types in current scope\n            module_qn: Qualified name of current module\n\n        Returns:\n            Tuple of (method_type, method_qualified_name) or None if not resolvable",
        "end_line": 754,
        "name": "resolve_java_method_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine.resolve_java_method_call",
        "start_line": 696
      }
    },
    {
      "node_id": 6343,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 46,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine.__init__",
        "start_line": 24
      }
    },
    {
      "node_id": 6344,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build a comprehensive map of variable names to their types within a Java scope.\n\n        This analyzes:\n        - Method parameters (formal_parameter nodes)\n        - Local variable declarations (local_variable_declaration nodes)\n        - Field declarations in the containing class\n        - Constructor assignments\n\n        Args:\n            scope_node: The AST node representing the scope (method, constructor, etc.)\n            module_qn: Qualified name of the current module\n\n        Returns:\n            Dictionary mapping variable names to their fully qualified type names",
        "end_line": 96,
        "name": "build_java_variable_type_map",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine.build_java_variable_type_map",
        "start_line": 48
      }
    },
    {
      "node_id": 6345,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a local_variable_declaration node to extract type information.",
        "end_line": 191,
        "name": "_process_java_variable_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._process_java_variable_declaration",
        "start_line": 162
      }
    },
    {
      "node_id": 6346,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze field declarations from the containing class for 'this' references.",
        "end_line": 262,
        "name": "_analyze_java_class_fields",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._analyze_java_class_fields",
        "start_line": 229
      }
    },
    {
      "node_id": 6347,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract variable reference from left side of assignment.",
        "end_line": 321,
        "name": "_extract_java_variable_reference",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._extract_java_variable_reference",
        "start_line": 305
      }
    },
    {
      "node_id": 6348,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find method return type by traversing the AST.",
        "end_line": 498,
        "name": "_find_method_return_type_in_ast",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_method_return_type_in_ast",
        "start_line": 475
      }
    },
    {
      "node_id": 6349,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve the type of a Java object reference using tree-sitter analysis.",
        "end_line": 798,
        "name": "_resolve_java_object_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._resolve_java_object_type",
        "start_line": 756
      }
    },
    {
      "node_id": 6350,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze formal parameters using tree-sitter field access.",
        "end_line": 143,
        "name": "_analyze_java_parameters",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._analyze_java_parameters",
        "start_line": 98
      }
    },
    {
      "node_id": 6351,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Search for a specific method in a class body and return its return type.",
        "end_line": 516,
        "name": "_search_methods_in_class_body",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._search_methods_in_class_body",
        "start_line": 500
      }
    },
    {
      "node_id": 6352,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a Java type name to its fully qualified name.",
        "end_line": 680,
        "name": "_resolve_java_type_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._resolve_java_type_name",
        "start_line": 632
      }
    },
    {
      "node_id": 6353,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find an inherited method using precise tree-sitter inheritance traversal.",
        "end_line": 877,
        "name": "_find_inherited_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_inherited_method",
        "start_line": 862
      }
    },
    {
      "node_id": 6354,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get all interfaces implemented by a class using tree-sitter AST analysis.",
        "end_line": 917,
        "name": "_get_implemented_interfaces",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._get_implemented_interfaces",
        "start_line": 896
      }
    },
    {
      "node_id": 6355,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze local variable declarations using tree-sitter traversal.",
        "end_line": 149,
        "name": "_analyze_java_local_variables",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._analyze_java_local_variables",
        "start_line": 145
      }
    },
    {
      "node_id": 6356,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Fallback heuristics for common Java patterns when AST analysis fails.",
        "end_line": 540,
        "name": "_heuristic_method_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._heuristic_method_return_type",
        "start_line": 518
      }
    },
    {
      "node_id": 6357,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the Java class that contains the given node.",
        "end_line": 694,
        "name": "_find_containing_java_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_containing_java_class",
        "start_line": 682
      }
    },
    {
      "node_id": 6358,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find a method in implemented interfaces using precise tree-sitter analysis.",
        "end_line": 894,
        "name": "_find_interface_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_interface_method",
        "start_line": 879
      }
    },
    {
      "node_id": 6359,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find implemented interfaces using precise tree-sitter AST traversal.",
        "end_line": 945,
        "name": "_find_interfaces_using_ast",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_interfaces_using_ast",
        "start_line": 919
      }
    },
    {
      "node_id": 6360,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze constructor assignments for field initialization patterns.",
        "end_line": 269,
        "name": "_analyze_java_constructor_assignments",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._analyze_java_constructor_assignments",
        "start_line": 264
      }
    },
    {
      "node_id": 6361,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer Java type from various expression types.",
        "end_line": 366,
        "name": "_infer_java_type_from_expression",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._infer_java_type_from_expression",
        "start_line": 323
      }
    },
    {
      "node_id": 6362,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Look up the type of a field in a Java class.",
        "end_line": 580,
        "name": "_lookup_java_field_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._lookup_java_field_type",
        "start_line": 542
      }
    },
    {
      "node_id": 6363,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively traverse AST using tree-sitter to find enhanced for statements.",
        "end_line": 1076,
        "name": "_traverse_for_enhanced_for_loops",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._traverse_for_enhanced_for_loops",
        "start_line": 1067
      }
    },
    {
      "node_id": 6364,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively traverse to find assignment expressions.",
        "end_line": 280,
        "name": "_traverse_for_assignments",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._traverse_for_assignments",
        "start_line": 271
      }
    },
    {
      "node_id": 6365,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer return type of a Java method invocation.",
        "end_line": 387,
        "name": "_infer_java_method_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._infer_java_method_return_type",
        "start_line": 368
      }
    },
    {
      "node_id": 6366,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Look up the type of a variable by analyzing the module scope.",
        "end_line": 630,
        "name": "_lookup_variable_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._lookup_variable_type",
        "start_line": 582
      }
    },
    {
      "node_id": 6367,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process enhanced for statement using tree-sitter field access.",
        "end_line": 1121,
        "name": "_process_enhanced_for_statement",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._process_enhanced_for_statement",
        "start_line": 1078
      }
    },
    {
      "node_id": 6368,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the type of a specific field in a class using tree-sitter AST analysis.",
        "end_line": 1146,
        "name": "_find_field_type_in_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_field_type_in_class",
        "start_line": 1123
      }
    },
    {
      "node_id": 6369,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer type of field access expressions.",
        "end_line": 411,
        "name": "_infer_java_field_access_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._infer_java_field_access_type",
        "start_line": 389
      }
    },
    {
      "node_id": 6370,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the parent class of a given class using actual inheritance data.",
        "end_line": 810,
        "name": "_find_parent_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_parent_class",
        "start_line": 800
      }
    },
    {
      "node_id": 6371,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve an instance method call on a specific object type using tree-sitter.",
        "end_line": 847,
        "name": "_resolve_instance_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._resolve_instance_method",
        "start_line": 827
      }
    },
    {
      "node_id": 6372,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract interface names from the interfaces list using tree-sitter.",
        "end_line": 962,
        "name": "_extract_interface_names",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._extract_interface_names",
        "start_line": 947
      }
    },
    {
      "node_id": 6373,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively traverse AST using tree-sitter to find class declarations.",
        "end_line": 1005,
        "name": "_traverse_for_class_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._traverse_for_class_declarations",
        "start_line": 988
      }
    },
    {
      "node_id": 6374,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find superclass using precise tree-sitter AST traversal.",
        "end_line": 1059,
        "name": "_find_superclass_using_ast",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_superclass_using_ast",
        "start_line": 1030
      }
    },
    {
      "node_id": 6375,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve the return type of a Java method call using AST analysis.",
        "end_line": 448,
        "name": "_resolve_java_method_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._resolve_java_method_return_type",
        "start_line": 413
      }
    },
    {
      "node_id": 6376,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a static method call or local method call using tree-sitter.",
        "end_line": 825,
        "name": "_resolve_static_or_local_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._resolve_static_or_local_method",
        "start_line": 812
      }
    },
    {
      "node_id": 6377,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find a method with any parameter signature using function registry.",
        "end_line": 860,
        "name": "_find_method_with_any_signature",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._find_method_with_any_signature",
        "start_line": 849
      }
    },
    {
      "node_id": 6378,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract current class name from AST context using precise tree-sitter traversal.",
        "end_line": 986,
        "name": "_get_current_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._get_current_class_name",
        "start_line": 964
      }
    },
    {
      "node_id": 6379,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get the superclass name using precise tree-sitter AST analysis.",
        "end_line": 1028,
        "name": "_get_superclass_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._get_superclass_name",
        "start_line": 1007
      }
    },
    {
      "node_id": 6380,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze enhanced for loops using tree-sitter to extract loop variable types.",
        "end_line": 1065,
        "name": "_analyze_java_enhanced_for_loops",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.java_type_inference.JavaTypeInferenceEngine._analyze_java_enhanced_for_loops",
        "start_line": 1061
      }
    },
    {
      "node_id": 6381,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convert a simple class name to its fully qualified name.",
        "end_line": 209,
        "name": "_resolve_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._resolve_class_name",
        "start_line": 205
      }
    },
    {
      "node_id": 6382,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process an assignment node to infer variable types.",
        "end_line": 584,
        "name": "_process_assignment_for_type_inference",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._process_assignment_for_type_inference",
        "start_line": 564
      }
    },
    {
      "node_id": 6383,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the return type of a method call by analyzing the method's implementation.",
        "end_line": 848,
        "name": "_infer_method_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_method_return_type",
        "start_line": 821
      }
    },
    {
      "node_id": 6384,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively find all return statements in a node.",
        "end_line": 1154,
        "name": "_find_return_statements",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_return_statements",
        "start_line": 1148
      }
    },
    {
      "node_id": 6385,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build a map of local variable names to their inferred types within a function.\n        This enables resolution of instance method calls like user.get_name().",
        "end_line": 110,
        "name": "build_local_variable_type_map",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine.build_local_variable_type_map",
        "start_line": 63
      }
    },
    {
      "node_id": 6386,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer types from loop variables in comprehensions and for loops.",
        "end_line": 216,
        "name": "_infer_loop_variable_types",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_loop_variable_types",
        "start_line": 211
      }
    },
    {
      "node_id": 6387,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract variable name from assignment left side (handles simple cases).",
        "end_line": 593,
        "name": "_extract_variable_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._extract_variable_name",
        "start_line": 586
      }
    },
    {
      "node_id": 6388,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a method call like 'self.manager.create_user' to its qualified name.",
        "end_line": 903,
        "name": "_resolve_method_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._resolve_method_qualified_name",
        "start_line": 850
      }
    },
    {
      "node_id": 6389,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze a return expression to infer its type.",
        "end_line": 1222,
        "name": "_analyze_return_expression",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_return_expression",
        "start_line": 1156
      }
    },
    {
      "node_id": 6390,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze a comprehension to infer loop variable types.",
        "end_line": 245,
        "name": "_analyze_comprehension",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_comprehension",
        "start_line": 238
      }
    },
    {
      "node_id": 6391,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze a for-in clause in a comprehension.",
        "end_line": 271,
        "name": "_analyze_for_in_clause",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_for_in_clause",
        "start_line": 260
      }
    },
    {
      "node_id": 6392,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Traverse AST for simple assignments (constructors, literals) only.",
        "end_line": 499,
        "name": "_traverse_for_assignments_simple",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._traverse_for_assignments_simple",
        "start_line": 489
      }
    },
    {
      "node_id": 6393,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer return type of a method call via static analysis.",
        "end_line": 692,
        "name": "_infer_method_call_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_method_call_return_type",
        "start_line": 678
      }
    },
    {
      "node_id": 6394,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer return type for chained method calls like obj.method().other_method().",
        "end_line": 774,
        "name": "_infer_chained_call_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_chained_call_return_type",
        "start_line": 764
      }
    },
    {
      "node_id": 6395,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a method on a specific class.",
        "end_line": 951,
        "name": "_resolve_class_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._resolve_class_method",
        "start_line": 905
      }
    },
    {
      "node_id": 6396,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find a class by name in the current module's scope.",
        "end_line": 1032,
        "name": "_find_class_in_scope",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_class_in_scope",
        "start_line": 1006
      }
    },
    {
      "node_id": 6397,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build local variable type map for JavaScript/TypeScript using tree-sitter locals query.",
        "end_line": 1258,
        "name": "_build_js_local_variable_type_map",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._build_js_local_variable_type_map",
        "start_line": 1224
      }
    },
    {
      "node_id": 6398,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 45,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine.__init__",
        "start_line": 24
      }
    },
    {
      "node_id": 6399,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Lazy-loaded Java type inference engine.",
        "end_line": 61,
        "name": "java_type_inference",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine.java_type_inference",
        "start_line": 48
      }
    },
    {
      "node_id": 6400,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze a for loop to infer loop variable types.",
        "end_line": 258,
        "name": "_analyze_for_loop",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_for_loop",
        "start_line": 247
      }
    },
    {
      "node_id": 6401,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer loop variable type from the iterable.",
        "end_line": 292,
        "name": "_infer_loop_var_from_iterable",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_loop_var_from_iterable",
        "start_line": 273
      }
    },
    {
      "node_id": 6402,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Traverse AST for complex assignments (method calls) using existing variable types.",
        "end_line": 511,
        "name": "_traverse_for_assignments_complex",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._traverse_for_assignments_complex",
        "start_line": 501
      }
    },
    {
      "node_id": 6403,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this appears to be a method chain with parentheses.",
        "end_line": 701,
        "name": "_is_method_chain",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._is_method_chain",
        "start_line": 694
      }
    },
    {
      "node_id": 6404,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the return type of a complex expression like 'user.method(args)'.",
        "end_line": 796,
        "name": "_infer_expression_return_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_expression_return_type",
        "start_line": 776
      }
    },
    {
      "node_id": 6405,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the type of an instance attribute like self.manager.",
        "end_line": 1004,
        "name": "_infer_attribute_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_attribute_type",
        "start_line": 953
      }
    },
    {
      "node_id": 6406,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the AST node for a method by its qualified name.",
        "end_line": 1065,
        "name": "_find_method_ast_node",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_method_ast_node",
        "start_line": 1034
      }
    },
    {
      "node_id": 6407,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the type of a JavaScript variable from its definition.",
        "end_line": 1290,
        "name": "_infer_js_variable_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_js_variable_type",
        "start_line": 1260
      }
    },
    {
      "node_id": 6408,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer types from function parameters when possible.",
        "end_line": 148,
        "name": "_infer_parameter_types",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_parameter_types",
        "start_line": 112
      }
    },
    {
      "node_id": 6409,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find and analyze list/dict/set comprehensions.",
        "end_line": 226,
        "name": "_find_comprehensions",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_comprehensions",
        "start_line": 218
      }
    },
    {
      "node_id": 6410,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer types for instance variables by analyzing assignments.",
        "end_line": 340,
        "name": "_infer_instance_variable_types",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_instance_variable_types",
        "start_line": 332
      }
    },
    {
      "node_id": 6411,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze assignments to self.attribute to determine instance variable types.",
        "end_line": 445,
        "name": "_analyze_self_assignments",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_self_assignments",
        "start_line": 416
      }
    },
    {
      "node_id": 6412,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process simple assignments (constructors, literals) to infer variable types.",
        "end_line": 533,
        "name": "_process_assignment_simple",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._process_assignment_simple",
        "start_line": 513
      }
    },
    {
      "node_id": 6413,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer type from complex expressions (method calls) using existing variable types.",
        "end_line": 669,
        "name": "_infer_type_from_expression_complex",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_type_from_expression_complex",
        "start_line": 654
      }
    },
    {
      "node_id": 6414,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get method return type by analyzing its AST implementation.",
        "end_line": 806,
        "name": "_get_method_return_type_from_ast",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._get_method_return_type_from_ast",
        "start_line": 798
      }
    },
    {
      "node_id": 6415,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer a parameter's type by matching its name against available class\n        definitions in the current scope (local and imported).",
        "end_line": 203,
        "name": "_infer_type_from_parameter_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_type_from_parameter_name",
        "start_line": 150
      }
    },
    {
      "node_id": 6416,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find and analyze for loops.",
        "end_line": 236,
        "name": "_find_for_loops",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_for_loops",
        "start_line": 228
      }
    },
    {
      "node_id": 6417,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze instance variable assignments from the class's __init__ method.",
        "end_line": 360,
        "name": "_analyze_class_init_assignments",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_class_init_assignments",
        "start_line": 342
      }
    },
    {
      "node_id": 6418,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer element type from a variable that holds a list.",
        "end_line": 461,
        "name": "_infer_variable_element_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_variable_element_type",
        "start_line": 447
      }
    },
    {
      "node_id": 6419,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process complex assignments (method calls) using existing variable types.",
        "end_line": 562,
        "name": "_process_assignment_complex",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._process_assignment_complex",
        "start_line": 535
      }
    },
    {
      "node_id": 6420,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the full method call text from an attribute node.",
        "end_line": 676,
        "name": "_extract_full_method_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._extract_full_method_call",
        "start_line": 671
      }
    },
    {
      "node_id": 6421,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the type of an object from a method call.",
        "end_line": 819,
        "name": "_extract_object_type_from_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._extract_object_type_from_call",
        "start_line": 808
      }
    },
    {
      "node_id": 6422,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build local variable type map for Java using JavaTypeInferenceEngine.",
        "end_line": 1298,
        "name": "_build_java_local_variable_type_map",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._build_java_local_variable_type_map",
        "start_line": 1292
      }
    },
    {
      "node_id": 6423,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the element type of an iterable.",
        "end_line": 313,
        "name": "_infer_iterable_element_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_iterable_element_type",
        "start_line": 294
      }
    },
    {
      "node_id": 6424,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the class node that contains the given method node.",
        "end_line": 377,
        "name": "_find_containing_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_containing_class",
        "start_line": 362
      }
    },
    {
      "node_id": 6425,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer element type by analyzing method return types.",
        "end_line": 472,
        "name": "_infer_method_return_element_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_method_return_element_type",
        "start_line": 463
      }
    },
    {
      "node_id": 6426,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer type from the right-hand side of an assignment.",
        "end_line": 627,
        "name": "_infer_type_from_expression",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_type_from_expression",
        "start_line": 595
      }
    },
    {
      "node_id": 6427,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer return type for chained method calls like obj.method().other_method().",
        "end_line": 737,
        "name": "_infer_chained_call_return_type_fixed",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_chained_call_return_type_fixed",
        "start_line": 703
      }
    },
    {
      "node_id": 6428,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find a specific method within a class in the AST.",
        "end_line": 1121,
        "name": "_find_method_in_ast",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_method_in_ast",
        "start_line": 1067
      }
    },
    {
      "node_id": 6429,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer element type from a list literal.",
        "end_line": 330,
        "name": "_infer_list_element_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_list_element_type",
        "start_line": 315
      }
    },
    {
      "node_id": 6430,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the __init__ method within a class node.",
        "end_line": 414,
        "name": "_find_init_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._find_init_method",
        "start_line": 379
      }
    },
    {
      "node_id": 6431,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze Repository class to determine what type of items it stores.",
        "end_line": 487,
        "name": "_analyze_repository_item_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_repository_item_type",
        "start_line": 474
      }
    },
    {
      "node_id": 6432,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer type from simple expressions (constructors, literals) only.",
        "end_line": 652,
        "name": "_infer_type_from_expression_simple",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_type_from_expression_simple",
        "start_line": 629
      }
    },
    {
      "node_id": 6433,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Infer the type of an object expression for chained calls.",
        "end_line": 762,
        "name": "_infer_object_type_for_chained_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._infer_object_type_for_chained_call",
        "start_line": 739
      }
    },
    {
      "node_id": 6434,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Analyze return statements in a method to infer return type.",
        "end_line": 1146,
        "name": "_analyze_method_return_statements",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.type_inference.TypeInferenceEngine._analyze_method_return_statements",
        "start_line": 1123
      }
    },
    {
      "node_id": 6435,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 22,
        "name": "__delitem__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol.__delitem__",
        "start_line": 22
      }
    },
    {
      "node_id": 6436,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 20,
        "name": "__setitem__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol.__setitem__",
        "start_line": 20
      }
    },
    {
      "node_id": 6437,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 23,
        "name": "__contains__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol.__contains__",
        "start_line": 23
      }
    },
    {
      "node_id": 6438,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 24,
        "name": "items",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol.items",
        "start_line": 24
      }
    },
    {
      "node_id": 6439,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 21,
        "name": "__getitem__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ASTCacheProtocol.__getitem__",
        "start_line": 21
      }
    },
    {
      "node_id": 6440,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 56,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.__init__",
        "start_line": 30
      }
    },
    {
      "node_id": 6441,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get or create the structure processor.",
        "end_line": 97,
        "name": "structure_processor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.structure_processor",
        "start_line": 88
      }
    },
    {
      "node_id": 6442,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get the current repo path dynamically.",
        "end_line": 67,
        "name": "repo_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.repo_path",
        "start_line": 59
      }
    },
    {
      "node_id": 6443,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get or create the import processor.",
        "end_line": 85,
        "name": "import_processor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.import_processor",
        "start_line": 77
      }
    },
    {
      "node_id": 6444,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get the current project name dynamically.",
        "end_line": 74,
        "name": "project_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.project_name",
        "start_line": 70
      }
    },
    {
      "node_id": 6445,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get or create the definition processor.",
        "end_line": 112,
        "name": "definition_processor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.definition_processor",
        "start_line": 100
      }
    },
    {
      "node_id": 6446,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get or create the type inference engine.",
        "end_line": 128,
        "name": "type_inference",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.type_inference",
        "start_line": 115
      }
    },
    {
      "node_id": 6447,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get or create the call processor.",
        "end_line": 143,
        "name": "call_processor",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.factory.ProcessorFactory.call_processor",
        "start_line": 131
      }
    },
    {
      "node_id": 6448,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 27,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor.StructureProcessor.__init__",
        "start_line": 15
      }
    },
    {
      "node_id": 6449,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a generic (non-parseable) file and create appropriate nodes/relationships.",
        "end_line": 143,
        "name": "process_generic_file",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor.StructureProcessor.process_generic_file",
        "start_line": 111
      }
    },
    {
      "node_id": 6450,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "First pass: Efficiently walks the directory to find all packages and folders.",
        "end_line": 109,
        "name": "identify_structure",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor.StructureProcessor.identify_structure",
        "start_line": 29
      }
    },
    {
      "node_id": 6451,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if directory should be skipped based on ignore patterns.",
        "end_line": 34,
        "name": "should_skip_dir",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.structure_processor.StructureProcessor.should_skip_dir",
        "start_line": 32
      }
    },
    {
      "node_id": 6452,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse composer.json for PHP dependencies.",
        "end_line": 369,
        "name": "_parse_composer_json",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_composer_json",
        "start_line": 354
      }
    },
    {
      "node_id": 6453,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract and ingest all functions (including nested ones).",
        "end_line": 689,
        "name": "_ingest_all_functions",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_all_functions",
        "start_line": 588
      }
    },
    {
      "node_id": 6454,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for nested functions.\n\n        Args:\n            skip_classes: If True, skip class nodes in the path (used for object literal methods)",
        "end_line": 762,
        "name": "_build_nested_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_nested_qualified_name",
        "start_line": 698
      }
    },
    {
      "node_id": 6455,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process C++20 module declarations and create appropriate Module nodes.",
        "end_line": 940,
        "name": "_ingest_cpp_module_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_cpp_module_declarations",
        "start_line": 841
      }
    },
    {
      "node_id": 6456,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Recursively find module-related declarations.",
        "end_line": 871,
        "name": "find_module_declarations",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.find_module_declarations",
        "start_line": 848
      }
    },
    {
      "node_id": 6457,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if method overrides parent class methods using BFS traversal.",
        "end_line": 1292,
        "name": "_check_method_overrides",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._check_method_overrides",
        "start_line": 1257
      }
    },
    {
      "node_id": 6458,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect JavaScript prototype inheritance patterns using tree-sitter queries.",
        "end_line": 1575,
        "name": "_ingest_prototype_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_prototype_inheritance",
        "start_line": 1560
      }
    },
    {
      "node_id": 6459,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect and ingest ES6 export statements as function definitions.",
        "end_line": 2183,
        "name": "_ingest_es6_exports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_es6_exports",
        "start_line": 2107
      }
    },
    {
      "node_id": 6460,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 56,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.__init__",
        "start_line": 39
      }
    },
    {
      "node_id": 6461,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse .csproj files for .NET dependencies.",
        "end_line": 387,
        "name": "_parse_csproj",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_csproj",
        "start_line": 371
      }
    },
    {
      "node_id": 6462,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract and ingest top-level functions. (Legacy method, replaced by _ingest_all_functions)",
        "end_line": 696,
        "name": "_ingest_top_level_functions",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_top_level_functions",
        "start_line": 691
      }
    },
    {
      "node_id": 6463,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for classes inside inline modules.",
        "end_line": 784,
        "name": "_build_nested_qualified_name_for_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_nested_qualified_name_for_class",
        "start_line": 764
      }
    },
    {
      "node_id": 6464,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find C++ exported classes that are misclassified as function_definition due to Tree-sitter grammar limitations.",
        "end_line": 978,
        "name": "_find_cpp_exported_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._find_cpp_exported_classes",
        "start_line": 942
      }
    },
    {
      "node_id": 6465,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse C++ base class clause to extract all parent classes with full template support.",
        "end_line": 1333,
        "name": "_parse_cpp_base_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_cpp_base_classes",
        "start_line": 1294
      }
    },
    {
      "node_id": 6466,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect prototype inheritance links (Child.prototype = Object.create(Parent.prototype)).",
        "end_line": 1644,
        "name": "_ingest_prototype_inheritance_links",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_prototype_inheritance_links",
        "start_line": 1577
      }
    },
    {
      "node_id": 6467,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect arrow functions in assignment expressions and object literals.",
        "end_line": 2365,
        "name": "_ingest_assignment_arrow_functions",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_assignment_arrow_functions",
        "start_line": 2185
      }
    },
    {
      "node_id": 6468,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse pyproject.toml for Python dependencies.",
        "end_line": 252,
        "name": "_parse_pyproject_toml",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_pyproject_toml",
        "start_line": 224
      }
    },
    {
      "node_id": 6469,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse package.json for Node.js dependencies.",
        "end_line": 286,
        "name": "_parse_package_json",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_package_json",
        "start_line": 267
      }
    },
    {
      "node_id": 6470,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Generate a synthetic name for anonymous functions (IIFEs, callbacks, etc.).",
        "end_line": 578,
        "name": "_generate_anonymous_function_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._generate_anonymous_function_name",
        "start_line": 556
      }
    },
    {
      "node_id": 6471,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 975,
        "name": "traverse_for_exported_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.traverse_for_exported_classes",
        "start_line": 946
      }
    },
    {
      "node_id": 6472,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract and ingest classes and their methods.",
        "end_line": 1241,
        "name": "_ingest_classes_and_methods",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_classes_and_methods",
        "start_line": 980
      }
    },
    {
      "node_id": 6473,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract parent class names from a class definition.",
        "end_line": 1508,
        "name": "_extract_parent_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_parent_classes",
        "start_line": 1364
      }
    },
    {
      "node_id": 6474,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a JavaScript/TypeScript parent class name to its fully qualified name.",
        "end_line": 1552,
        "name": "_resolve_js_ts_parent_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._resolve_js_ts_parent_class",
        "start_line": 1535
      }
    },
    {
      "node_id": 6475,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this method is a static method inside a class definition.",
        "end_line": 2378,
        "name": "_is_static_method_in_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_static_method_in_class",
        "start_line": 2367
      }
    },
    {
      "node_id": 6476,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Determine the node type for inheritance relationships.\n        Returns the type from the function registry, defaulting to \"Class\".",
        "end_line": 64,
        "name": "_get_node_type_for_inheritance",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._get_node_type_for_inheritance",
        "start_line": 58
      }
    },
    {
      "node_id": 6477,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse requirements.txt for Python dependencies.",
        "end_line": 265,
        "name": "_parse_requirements_txt",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_requirements_txt",
        "start_line": 254
      }
    },
    {
      "node_id": 6478,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Cargo.toml for Rust dependencies.",
        "end_line": 306,
        "name": "_parse_cargo_toml",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_cargo_toml",
        "start_line": 288
      }
    },
    {
      "node_id": 6479,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name from Lua assignment patterns like Calculator.divide = function().",
        "end_line": 586,
        "name": "_extract_lua_assignment_function_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_lua_assignment_function_name",
        "start_line": 580
      }
    },
    {
      "node_id": 6480,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process OVERRIDES relationships for all methods after collection is complete.",
        "end_line": 1255,
        "name": "process_all_method_overrides",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.process_all_method_overrides",
        "start_line": 1243
      }
    },
    {
      "node_id": 6481,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract parent classes from mixin call expressions like Swimmable(Animal).",
        "end_line": 1533,
        "name": "_extract_mixin_parent_classes",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_mixin_parent_classes",
        "start_line": 1510
      }
    },
    {
      "node_id": 6482,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Convert a simple class name to its fully qualified name.",
        "end_line": 1558,
        "name": "_resolve_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._resolve_class_name",
        "start_line": 1554
      }
    },
    {
      "node_id": 6483,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this method is inside a class definition (static or instance).",
        "end_line": 2388,
        "name": "_is_method_in_class",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_method_in_class",
        "start_line": 2380
      }
    },
    {
      "node_id": 6484,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the object variable name that contains this method, using proper tree-sitter traversal.",
        "end_line": 2453,
        "name": "_find_object_name_for_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._find_object_name_for_method",
        "start_line": 2437
      }
    },
    {
      "node_id": 6485,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Create an IMPLEMENTS relationship between a class and an interface.",
        "end_line": 2611,
        "name": "_create_implements_relationship",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._create_implements_relationship",
        "start_line": 2603
      }
    },
    {
      "node_id": 6486,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse various dependency files for external package dependencies.",
        "end_line": 207,
        "name": "process_dependencies",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.process_dependencies",
        "start_line": 182
      }
    },
    {
      "node_id": 6487,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Create an INHERITS relationship between child and parent entities.\n        Determines the parent type automatically from the function registry.",
        "end_line": 78,
        "name": "_create_inheritance_relationship",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._create_inheritance_relationship",
        "start_line": 66
      }
    },
    {
      "node_id": 6488,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the base class name from C++ inheritance text, handling templates and namespaces.",
        "end_line": 1348,
        "name": "_extract_cpp_base_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_cpp_base_class_name",
        "start_line": 1335
      }
    },
    {
      "node_id": 6489,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a single variable declarator to extract CommonJS destructuring imports.",
        "end_line": 1849,
        "name": "_process_variable_declarator_for_commonjs",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._process_variable_declarator_for_commonjs",
        "start_line": 1775
      }
    },
    {
      "node_id": 6490,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect and ingest methods defined in object literals.",
        "end_line": 2003,
        "name": "_ingest_object_literal_methods",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_object_literal_methods",
        "start_line": 1896
      }
    },
    {
      "node_id": 6491,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build proper qualified name for object literal methods using tree-sitter traversal.\n\n        Skips intermediate object variable names to get semantic nesting like:\n        - createApiClient.get (not createApiClient.client.get)\n        - ServiceFactory.createService.process (not ServiceFactory.createService.{obj}.process)",
        "end_line": 2511,
        "name": "_build_object_method_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_object_method_qualified_name",
        "start_line": 2455
      }
    },
    {
      "node_id": 6492,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract implemented interface names from a Java class definition.",
        "end_line": 2582,
        "name": "_extract_implemented_interfaces",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_implemented_interfaces",
        "start_line": 2567
      }
    },
    {
      "node_id": 6493,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parses a file, ingests its structure and definitions,\n        and returns the AST for caching.",
        "end_line": 180,
        "name": "process_file",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor.process_file",
        "start_line": 80
      }
    },
    {
      "node_id": 6494,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extracts the package name and the rest of the spec from a PEP 508 string.",
        "end_line": 222,
        "name": "_extract_pep508_package_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_pep508_package_name",
        "start_line": 209
      }
    },
    {
      "node_id": 6495,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve a superclass name from a type_identifier node.",
        "end_line": 1362,
        "name": "_resolve_superclass_from_type_identifier",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._resolve_superclass_from_type_identifier",
        "start_line": 1350
      }
    },
    {
      "node_id": 6496,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Process a single CommonJS import (either shorthand or aliased).",
        "end_line": 1894,
        "name": "_process_commonjs_import",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._process_commonjs_import",
        "start_line": 1851
      }
    },
    {
      "node_id": 6497,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect and ingest CommonJS exports as function definitions.",
        "end_line": 2105,
        "name": "_ingest_commonjs_exports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_commonjs_exports",
        "start_line": 2005
      }
    },
    {
      "node_id": 6498,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build proper qualified name for arrow functions in assignments using tree-sitter traversal.\n\n        Handles cases like:\n        - this.fetchUser = () => {} in constructor\n        - this.retry = () => {} in method",
        "end_line": 2565,
        "name": "_build_assignment_arrow_function_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_assignment_arrow_function_qualified_name",
        "start_line": 2513
      }
    },
    {
      "node_id": 6499,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract interface names from Java interfaces clause using tree-sitter.",
        "end_line": 2601,
        "name": "_extract_java_interface_names",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_java_interface_names",
        "start_line": 2584
      }
    },
    {
      "node_id": 6500,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this function is an object literal method inside a class method.",
        "end_line": 2407,
        "name": "_is_inside_method_with_object_literals",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_inside_method_with_object_literals",
        "start_line": 2390
      }
    },
    {
      "node_id": 6501,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if this export statement is inside a function body.",
        "end_line": 2435,
        "name": "_is_export_inside_function",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_export_inside_function",
        "start_line": 2420
      }
    },
    {
      "node_id": 6502,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse go.mod for Go dependencies.",
        "end_line": 335,
        "name": "_parse_go_mod",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_go_mod",
        "start_line": 308
      }
    },
    {
      "node_id": 6503,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Add a dependency to the graph.",
        "end_line": 409,
        "name": "_add_dependency",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._add_dependency",
        "start_line": 389
      }
    },
    {
      "node_id": 6504,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract decorator names from a decorated node.",
        "end_line": 444,
        "name": "_extract_decorators",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_decorators",
        "start_line": 427
      }
    },
    {
      "node_id": 6505,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the underlying class type from a template declaration.",
        "end_line": 489,
        "name": "_extract_template_class_type",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_template_class_type",
        "start_line": 477
      }
    },
    {
      "node_id": 6506,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract class name, handling both class declarations and class expressions.",
        "end_line": 534,
        "name": "_extract_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_class_name",
        "start_line": 516
      }
    },
    {
      "node_id": 6507,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for Rust methods, handling impl blocks and modules.",
        "end_line": 793,
        "name": "_build_rust_method_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_rust_method_qualified_name",
        "start_line": 786
      }
    },
    {
      "node_id": 6508,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a function is actually a method inside a class.",
        "end_line": 814,
        "name": "_is_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_method",
        "start_line": 804
      }
    },
    {
      "node_id": 6509,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect prototype method assignments (Constructor.prototype.method = function() {}).",
        "end_line": 1724,
        "name": "_ingest_prototype_method_assignments",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_prototype_method_assignments",
        "start_line": 1646
      }
    },
    {
      "node_id": 6510,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Gemfile for Ruby dependencies.",
        "end_line": 352,
        "name": "_parse_gemfile",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._parse_gemfile",
        "start_line": 337
      }
    },
    {
      "node_id": 6511,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extracts the docstring from a function or class node's body.",
        "end_line": 425,
        "name": "_get_docstring",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._get_docstring",
        "start_line": 411
      }
    },
    {
      "node_id": 6512,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract the name from a decorator node (@decorator or @decorator(...)).",
        "end_line": 475,
        "name": "_get_decorator_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._get_decorator_name",
        "start_line": 446
      }
    },
    {
      "node_id": 6513,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract class name from C++ class/struct/union/enum specifiers.",
        "end_line": 514,
        "name": "_extract_cpp_class_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_cpp_class_name",
        "start_line": 491
      }
    },
    {
      "node_id": 6514,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract function name, handling both regular functions and arrow functions.",
        "end_line": 554,
        "name": "_extract_function_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._extract_function_name",
        "start_line": 536
      }
    },
    {
      "node_id": 6515,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Build qualified name for Rust functions, handling inline modules.",
        "end_line": 802,
        "name": "_build_rust_function_qualified_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._build_rust_function_qualified_name",
        "start_line": 795
      }
    },
    {
      "node_id": 6516,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Determine the parent of a function (Module or another Function).",
        "end_line": 839,
        "name": "_determine_function_parent",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._determine_function_parent",
        "start_line": 816
      }
    },
    {
      "node_id": 6517,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Detect import patterns not handled by the existing import_processor.",
        "end_line": 1773,
        "name": "_ingest_missing_import_patterns",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._ingest_missing_import_patterns",
        "start_line": 1726
      }
    },
    {
      "node_id": 6518,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Check if a method definition is inside a class body.",
        "end_line": 2418,
        "name": "_is_class_method",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.definition_processor.DefinitionProcessor._is_class_method",
        "start_line": 2409
      }
    },
    {
      "node_id": 6519,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse CommonJS require() statements using field-based access.",
        "end_line": 416,
        "name": "_parse_js_require",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_js_require",
        "start_line": 374
      }
    },
    {
      "node_id": 6520,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Java import statements.",
        "end_line": 508,
        "name": "_parse_java_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_java_imports",
        "start_line": 461
      }
    },
    {
      "node_id": 6521,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse C++ #include statements and C++20 module imports.",
        "end_line": 585,
        "name": "_parse_cpp_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_cpp_imports",
        "start_line": 574
      }
    },
    {
      "node_id": 6522,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Lua require-based imports from function_call captures.",
        "end_line": 744,
        "name": "_parse_lua_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_lua_imports",
        "start_line": 721
      }
    },
    {
      "node_id": 6523,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find identifier assigned from the require call (local or global).",
        "end_line": 818,
        "name": "_lua_extract_assignment_lhs",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_extract_assignment_lhs",
        "start_line": 815
      }
    },
    {
      "node_id": 6524,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse JavaScript re-export statements like 'export { name } from './module'.",
        "end_line": 459,
        "name": "_parse_js_reexport",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_js_reexport",
        "start_line": 418
      }
    },
    {
      "node_id": 6525,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Rust use declarations.",
        "end_line": 515,
        "name": "_parse_rust_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_rust_imports",
        "start_line": 510
      }
    },
    {
      "node_id": 6526,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse a single C++ #include statement.",
        "end_line": 629,
        "name": "_parse_cpp_include",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_cpp_include",
        "start_line": 587
      }
    },
    {
      "node_id": 6527,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Find the second identifier assigned from pcall(require, ...) pattern.\n\n        In patterns like: local ok, json = pcall(require, 'json')\n        We want to extract 'json' (the second identifier).",
        "end_line": 827,
        "name": "_lua_extract_pcall_assignment_lhs",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_extract_pcall_assignment_lhs",
        "start_line": 820
      }
    },
    {
      "node_id": 6528,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Generic fallback import parsing for other languages.",
        "end_line": 718,
        "name": "_parse_generic_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_generic_imports",
        "start_line": 710
      }
    },
    {
      "node_id": 6529,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 33,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor.__init__",
        "start_line": 24
      }
    },
    {
      "node_id": 6530,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get the current repo path dynamically.",
        "end_line": 45,
        "name": "repo_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor.repo_path",
        "start_line": 36
      }
    },
    {
      "node_id": 6531,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve relative imports like '.module' or '..parent.module'.",
        "end_line": 264,
        "name": "_resolve_relative_import",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._resolve_relative_import",
        "start_line": 238
      }
    },
    {
      "node_id": 6532,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse a single Rust use declaration using tree-sitter field access.",
        "end_line": 525,
        "name": "_parse_rust_use_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_rust_use_declaration",
        "start_line": 517
      }
    },
    {
      "node_id": 6533,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse a Go import declaration.",
        "end_line": 545,
        "name": "_parse_go_import_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_go_import_declaration",
        "start_line": 535
      }
    },
    {
      "node_id": 6534,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "property"
        ],
        "docstring": "Get the current project name dynamically.",
        "end_line": 53,
        "name": "project_name",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor.project_name",
        "start_line": 48
      }
    },
    {
      "node_id": 6535,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse JavaScript/TypeScript import statements.",
        "end_line": 296,
        "name": "_parse_js_ts_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_js_ts_imports",
        "start_line": 266
      }
    },
    {
      "node_id": 6536,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Go import declarations.",
        "end_line": 533,
        "name": "_parse_go_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_go_imports",
        "start_line": 527
      }
    },
    {
      "node_id": 6537,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse a single Go import spec.",
        "end_line": 572,
        "name": "_parse_go_import_spec",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_go_import_spec",
        "start_line": 547
      }
    },
    {
      "node_id": 6538,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse import statements and build import mapping for the module.",
        "end_line": 107,
        "name": "parse_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor.parse_imports",
        "start_line": 55
      }
    },
    {
      "node_id": 6539,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handle 'import module' statements.",
        "end_line": 160,
        "name": "_handle_python_import_statement",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._handle_python_import_statement",
        "start_line": 117
      }
    },
    {
      "node_id": 6540,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve JavaScript module path to qualified name.",
        "end_line": 319,
        "name": "_resolve_js_module_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._resolve_js_module_path",
        "start_line": 298
      }
    },
    {
      "node_id": 6541,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse C++20 module import statements like 'import <iostream>;'.",
        "end_line": 663,
        "name": "_parse_cpp_module_import",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_cpp_module_import",
        "start_line": 631
      }
    },
    {
      "node_id": 6542,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return True if function_call represents require(...) or require 'x'.",
        "end_line": 752,
        "name": "_lua_is_require_call",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_is_require_call",
        "start_line": 746
      }
    },
    {
      "node_id": 6543,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract first string-like argument from a require call.",
        "end_line": 796,
        "name": "_lua_extract_require_arg",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_extract_require_arg",
        "start_line": 782
      }
    },
    {
      "node_id": 6544,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse Python import statements with full support for all import types.",
        "end_line": 115,
        "name": "_parse_python_imports",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_python_imports",
        "start_line": 109
      }
    },
    {
      "node_id": 6545,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Handle 'from module import name' statements.",
        "end_line": 236,
        "name": "_handle_python_import_from_statement",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._handle_python_import_from_statement",
        "start_line": 162
      }
    },
    {
      "node_id": 6546,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse JavaScript import clause (named, default, namespace imports).",
        "end_line": 372,
        "name": "_parse_js_import_clause",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_js_import_clause",
        "start_line": 321
      }
    },
    {
      "node_id": 6547,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Parse C++20 module declarations and partition imports.",
        "end_line": 708,
        "name": "_parse_cpp_module_declaration",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._parse_cpp_module_declaration",
        "start_line": 665
      }
    },
    {
      "node_id": 6548,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Return True if function_call represents pcall(require, 'module').",
        "end_line": 780,
        "name": "_lua_is_pcall_require",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_is_pcall_require",
        "start_line": 754
      }
    },
    {
      "node_id": 6549,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Extract module path from pcall(require, 'module') pattern.",
        "end_line": 813,
        "name": "_lua_extract_pcall_require_arg",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._lua_extract_pcall_require_arg",
        "start_line": 798
      }
    },
    {
      "node_id": 6550,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolve Lua module path for require. Handles ./ and ../ prefixes.",
        "end_line": 859,
        "name": "_resolve_lua_module_path",
        "qualified_name": "code-graph-rag.codebase_rag.parsers.import_processor.ImportProcessor._resolve_lua_module_path",
        "start_line": 829
      }
    },
    {
      "node_id": 6551,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 56,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.__init__",
        "start_line": 51
      }
    },
    {
      "node_id": 6552,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 203,
        "name": "get_function_source_code",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.get_function_source_code",
        "start_line": 89
      }
    },
    {
      "node_id": 6553,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 75,
        "name": "get_parser",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.get_parser",
        "start_line": 68
      }
    },
    {
      "node_id": 6554,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 145,
        "name": "find_function_nodes",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.find_function_nodes",
        "start_line": 108
      }
    },
    {
      "node_id": 6555,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 271,
        "name": "get_diff",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.get_diff",
        "start_line": 247
      }
    },
    {
      "node_id": 6556,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Display a concise colored diff with limited context.",
        "end_line": 352,
        "name": "_display_colored_diff",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor._display_colored_diff",
        "start_line": 301
      }
    },
    {
      "node_id": 6557,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 87,
        "name": "get_ast",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.get_ast",
        "start_line": 77
      }
    },
    {
      "node_id": 6558,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Gets the file extension, looking past a .tmp suffix if present.",
        "end_line": 66,
        "name": "_get_real_extension",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor._get_real_extension",
        "start_line": 58
      }
    },
    {
      "node_id": 6559,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 245,
        "name": "replace_function_source_code",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.replace_function_source_code",
        "start_line": 205
      }
    },
    {
      "node_id": 6560,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Apply a patch to a file using diff-match-patch.",
        "end_line": 299,
        "name": "apply_patch_to_file",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.apply_patch_to_file",
        "start_line": 273
      }
    },
    {
      "node_id": 6561,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Surgically replace a specific code block in a file using diff-match-patch.",
        "end_line": 423,
        "name": "replace_code_block",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.replace_code_block",
        "start_line": 354
      }
    },
    {
      "node_id": 6562,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Overwrites entire file with new content - use for full file replacement.",
        "end_line": 468,
        "name": "edit_file",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_editor.FileEditor.edit_file",
        "start_line": 425
      }
    },
    {
      "node_id": 6563,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 112,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.ShellCommander.__init__",
        "start_line": 109
      }
    },
    {
      "node_id": 6564,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "timing_decorator"
        ],
        "docstring": "Execute a shell command and return the status code, stdout, and stderr.",
        "end_line": 197,
        "name": "execute",
        "qualified_name": "code-graph-rag.codebase_rag.tools.shell_command.ShellCommander.execute",
        "start_line": 115
      }
    },
    {
      "node_id": 6565,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 33,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.FileReader.__init__",
        "start_line": 19
      }
    },
    {
      "node_id": 6566,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Reads and returns the content of a text-based file.",
        "end_line": 86,
        "name": "read_file",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_reader.FileReader.read_file",
        "start_line": 35
      }
    },
    {
      "node_id": 6567,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 21,
        "name": "__getattr__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer._NotSupportedClient.__getattr__",
        "start_line": 18
      }
    },
    {
      "node_id": 6568,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 52,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer.DocumentAnalyzer.__init__",
        "start_line": 30
      }
    },
    {
      "node_id": 6569,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Reads a document (e.g., PDF), sends it to the Gemini multimodal endpoint\n        with a specific question, and returns the model's analysis.",
        "end_line": 152,
        "name": "analyze",
        "qualified_name": "code-graph-rag.codebase_rag.tools.document_analyzer.DocumentAnalyzer.analyze",
        "start_line": 54
      }
    },
    {
      "node_id": 6570,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 21,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.FileWriter.__init__",
        "start_line": 19
      }
    },
    {
      "node_id": 6571,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Creates or overwrites a file with the given content.",
        "end_line": 50,
        "name": "create_file",
        "qualified_name": "code-graph-rag.codebase_rag.tools.file_writer.FileWriter.create_file",
        "start_line": 23
      }
    },
    {
      "node_id": 6572,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 16,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval.CodeRetriever.__init__",
        "start_line": 13
      }
    },
    {
      "node_id": 6573,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Finds a code snippet by querying the graph for its location.",
        "end_line": 85,
        "name": "find_code_snippet",
        "qualified_name": "code-graph-rag.codebase_rag.tools.code_retrieval.CodeRetriever.find_code_snippet",
        "start_line": 18
      }
    },
    {
      "node_id": 6574,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 10,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister.DirectoryLister.__init__",
        "start_line": 9
      }
    },
    {
      "node_id": 6575,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Lists the contents of a specified directory.",
        "end_line": 30,
        "name": "list_directory_contents",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister.DirectoryLister.list_directory_contents",
        "start_line": 12
      }
    },
    {
      "node_id": 6576,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Resolves the file path relative to the root and ensures it's within\n        the project directory.",
        "end_line": 59,
        "name": "_get_safe_path",
        "qualified_name": "code-graph-rag.codebase_rag.tools.directory_lister.DirectoryLister._get_safe_path",
        "start_line": 32
      }
    },
    {
      "node_id": 6577,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Python import statement parsing.",
        "end_line": 60,
        "name": "test_python_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_python_import_parsing",
        "start_line": 28
      }
    },
    {
      "node_id": 6578,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test integration between import parsing and function registry.",
        "end_line": 91,
        "name": "test_function_registry_integration",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_function_registry_integration",
        "start_line": 82
      }
    },
    {
      "node_id": 6579,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that language-specific import parsing methods exist.",
        "end_line": 129,
        "name": "test_language_specific_import_methods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_language_specific_import_methods",
        "start_line": 111
      }
    },
    {
      "node_id": 6580,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance for testing.",
        "end_line": 26,
        "name": "graph_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.graph_updater",
        "start_line": 17
      }
    },
    {
      "node_id": 6581,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that import mapping works correctly.",
        "end_line": 80,
        "name": "test_import_mapping_functionality",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_import_mapping_functionality",
        "start_line": 62
      }
    },
    {
      "node_id": 6582,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import resolution methods exist.",
        "end_line": 109,
        "name": "test_relative_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_relative_import_resolution",
        "start_line": 93
      }
    },
    {
      "node_id": 6583,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that import processing methods handle edge cases gracefully.",
        "end_line": 152,
        "name": "test_import_processing_doesnt_crash",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_import_processing_doesnt_crash",
        "start_line": 131
      }
    },
    {
      "node_id": 6584,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Python aliased import parsing functionality.",
        "end_line": 235,
        "name": "test_python_alias_import_parsing",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_parsing.TestImportParsing.test_python_alias_import_parsing",
        "start_line": 154
      }
    },
    {
      "node_id": 6585,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that functions in sibling modules receive the proximity bonus.",
        "end_line": 47,
        "name": "test_sibling_module_bonus_for_functions",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_sibling_module_bonus_for_functions",
        "start_line": 28
      }
    },
    {
      "node_id": 6586,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that the distance difference between functions and methods is predictable.",
        "end_line": 95,
        "name": "test_function_vs_method_distance_difference",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_function_vs_method_distance_difference",
        "start_line": 68
      }
    },
    {
      "node_id": 6587,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test distance calculation for candidates in the same module as caller.",
        "end_line": 151,
        "name": "test_same_module_candidates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_same_module_candidates",
        "start_line": 125
      }
    },
    {
      "node_id": 6588,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance with mock dependencies for testing.",
        "end_line": 26,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.mock_updater",
        "start_line": 20
      }
    },
    {
      "node_id": 6589,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that non-sibling modules don't receive the proximity bonus.",
        "end_line": 123,
        "name": "test_non_sibling_modules_no_bonus",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_non_sibling_modules_no_bonus",
        "start_line": 97
      }
    },
    {
      "node_id": 6590,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that methods in sibling modules receive the proximity bonus.",
        "end_line": 66,
        "name": "test_sibling_module_bonus_for_methods",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_sibling_module_bonus_for_methods",
        "start_line": 49
      }
    },
    {
      "node_id": 6591,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test behavior when candidate is not in function registry.",
        "end_line": 165,
        "name": "test_edge_case_missing_from_registry",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_edge_case_missing_from_registry",
        "start_line": 153
      }
    },
    {
      "node_id": 6592,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that the method detection logic correctly identifies methods vs functions.",
        "end_line": 196,
        "name": "test_method_detection_correctness",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_import_distance_calculation.TestImportDistanceCalculation.test_method_detection_correctness",
        "start_line": 167
      }
    },
    {
      "node_id": 6593,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test the optimized prefix+suffix search functionality.",
        "end_line": 73,
        "name": "test_trie_prefix_and_suffix_search",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.test_trie_prefix_and_suffix_search",
        "start_line": 36
      }
    },
    {
      "node_id": 6594,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test basic Trie operations work correctly.",
        "end_line": 34,
        "name": "test_function_registry_trie_basic_operations",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.test_function_registry_trie_basic_operations",
        "start_line": 13
      }
    },
    {
      "node_id": 6595,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that function resolution works correctly with Trie optimization.",
        "end_line": 160,
        "name": "test_function_resolution_with_trie",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.test_function_resolution_with_trie",
        "start_line": 134
      }
    },
    {
      "node_id": 6596,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create GraphUpdater with populated Trie for testing.",
        "end_line": 132,
        "name": "graph_updater_with_trie",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.graph_updater_with_trie",
        "start_line": 108
      }
    },
    {
      "node_id": 6597,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Trie provides performance benefits over naive search.",
        "end_line": 105,
        "name": "test_trie_performance_optimization",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.test_trie_performance_optimization",
        "start_line": 75
      }
    },
    {
      "node_id": 6598,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Trie maintains compatibility with existing dictionary interface.",
        "end_line": 183,
        "name": "test_trie_compatibility_with_existing_code",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_trie_optimization.TestTrieOptimization.test_trie_compatibility_with_existing_code",
        "start_line": 162
      }
    },
    {
      "node_id": 6599,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that standard library imports are not prefixed with project name.",
        "end_line": 79,
        "name": "test_standard_library_imports_not_prefixed",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_standard_library_imports_not_prefixed",
        "start_line": 44
      }
    },
    {
      "node_id": 6600,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that local module imports ARE prefixed with project name.",
        "end_line": 151,
        "name": "test_local_module_imports_are_prefixed",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_local_module_imports_are_prefixed",
        "start_line": 116
      }
    },
    {
      "node_id": 6601,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that imports already prefixed with project name are unchanged.",
        "end_line": 223,
        "name": "test_already_prefixed_imports_unchanged",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_already_prefixed_imports_unchanged",
        "start_line": 188
      }
    },
    {
      "node_id": 6602,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that regular imports of standard library are not prefixed.",
        "end_line": 283,
        "name": "test_regular_import_standard_library",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_regular_import_standard_library",
        "start_line": 260
      }
    },
    {
      "node_id": 6603,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that dotted imports of local modules are correctly handled.",
        "end_line": 335,
        "name": "test_regular_import_dotted_local_module",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_regular_import_dotted_local_module",
        "start_line": 310
      }
    },
    {
      "node_id": 6604,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance with mock dependencies for testing.",
        "end_line": 42,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.mock_updater",
        "start_line": 21
      }
    },
    {
      "node_id": 6605,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that third-party imports are not prefixed with project name.",
        "end_line": 114,
        "name": "test_third_party_imports_not_prefixed",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_third_party_imports_not_prefixed",
        "start_line": 81
      }
    },
    {
      "node_id": 6606,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that local file imports ARE prefixed with project name.",
        "end_line": 186,
        "name": "test_local_file_imports_are_prefixed",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_local_file_imports_are_prefixed",
        "start_line": 153
      }
    },
    {
      "node_id": 6607,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that nested local module imports are correctly prefixed.",
        "end_line": 258,
        "name": "test_nested_local_module_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_nested_local_module_imports",
        "start_line": 225
      }
    },
    {
      "node_id": 6608,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that regular imports of local modules ARE prefixed.",
        "end_line": 308,
        "name": "test_regular_import_local_module",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_regular_import_local_module",
        "start_line": 285
      }
    },
    {
      "node_id": 6609,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that aliased imports of standard library are not prefixed.",
        "end_line": 369,
        "name": "test_aliased_import_standard_library",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_aliased_import_standard_library",
        "start_line": 337
      }
    },
    {
      "node_id": 6610,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that aliased imports of local modules ARE prefixed.",
        "end_line": 403,
        "name": "test_aliased_import_local_module",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_standard_library_imports.TestStandardLibraryImports.test_aliased_import_local_module",
        "start_line": 371
      }
    },
    {
      "node_id": 6611,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test single dot relative import (from .) goes to parent package.",
        "end_line": 57,
        "name": "test_single_dot_relative_import",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_single_dot_relative_import",
        "start_line": 33
      }
    },
    {
      "node_id": 6612,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test triple dot relative import (from ...) goes up three levels.",
        "end_line": 109,
        "name": "test_triple_dot_relative_import",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_triple_dot_relative_import",
        "start_line": 85
      }
    },
    {
      "node_id": 6613,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import without additional module name (from . or from ..).",
        "end_line": 159,
        "name": "test_relative_import_without_module_name",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_relative_import_without_module_name",
        "start_line": 137
      }
    },
    {
      "node_id": 6614,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance with mock dependencies for testing.",
        "end_line": 31,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.mock_updater",
        "start_line": 21
      }
    },
    {
      "node_id": 6615,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import that goes to package root.",
        "end_line": 135,
        "name": "test_relative_import_to_package_root",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_relative_import_to_package_root",
        "start_line": 111
      }
    },
    {
      "node_id": 6616,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test double dot relative import (from ..) goes up two levels.",
        "end_line": 83,
        "name": "test_double_dot_relative_import",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_double_dot_relative_import",
        "start_line": 59
      }
    },
    {
      "node_id": 6617,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import from a shallow module path.",
        "end_line": 187,
        "name": "test_relative_import_edge_case_shallow_module",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_relative_import_edge_case_shallow_module",
        "start_line": 161
      }
    },
    {
      "node_id": 6618,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test relative import with complex nested module path.",
        "end_line": 215,
        "name": "test_relative_import_complex_module_path",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_relative_import_resolution.TestRelativeImportResolution.test_relative_import_complex_module_path",
        "start_line": 189
      }
    },
    {
      "node_id": 6619,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test fallback logic with only one candidate.",
        "end_line": 168,
        "name": "test_fallback_with_single_candidate",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.test_fallback_with_single_candidate",
        "start_line": 147
      }
    },
    {
      "node_id": 6620,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that fallback logic chooses the candidate with lowest import distance.",
        "end_line": 97,
        "name": "test_fallback_chooses_closest_candidate",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.test_fallback_chooses_closest_candidate",
        "start_line": 29
      }
    },
    {
      "node_id": 6621,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance with mock dependencies for testing.",
        "end_line": 27,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.mock_updater",
        "start_line": 21
      }
    },
    {
      "node_id": 6622,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test fallback logic with mix of functions and methods.",
        "end_line": 145,
        "name": "test_fallback_with_mixed_function_types",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.test_fallback_with_mixed_function_types",
        "start_line": 99
      }
    },
    {
      "node_id": 6623,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test fallback logic when no candidates are found.",
        "end_line": 179,
        "name": "test_fallback_with_no_candidates",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.test_fallback_with_no_candidates",
        "start_line": 170
      }
    },
    {
      "node_id": 6624,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that same-module resolution works and bypasses fallback.",
        "end_line": 209,
        "name": "test_same_module_resolution_bypasses_fallback",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_call_resolution_fallback.TestCallResolutionFallback.test_same_module_resolution_bypasses_fallback",
        "start_line": 181
      }
    },
    {
      "node_id": 6625,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that JavaScript namespace imports (import * as utils from './utils') work correctly.",
        "end_line": 117,
        "name": "test_javascript_namespace_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_javascript_namespace_import_resolution",
        "start_line": 95
      }
    },
    {
      "node_id": 6626,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Java wildcard imports (import java.util.*;) work correctly.",
        "end_line": 63,
        "name": "test_java_wildcard_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_java_wildcard_import_resolution",
        "start_line": 29
      }
    },
    {
      "node_id": 6627,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test C++ using namespace directives when properly stored.",
        "end_line": 185,
        "name": "test_cpp_using_namespace_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_cpp_using_namespace_resolution",
        "start_line": 150
      }
    },
    {
      "node_id": 6628,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Go doesn't have wildcard imports (imports all public symbols by default).",
        "end_line": 246,
        "name": "test_go_no_wildcard_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_go_no_wildcard_imports",
        "start_line": 225
      }
    },
    {
      "node_id": 6629,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test handling multiple wildcard imports in the same module.",
        "end_line": 313,
        "name": "test_multiple_wildcard_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_multiple_wildcard_imports",
        "start_line": 275
      }
    },
    {
      "node_id": 6630,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance with mock dependencies for testing.",
        "end_line": 27,
        "name": "mock_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.mock_updater",
        "start_line": 21
      }
    },
    {
      "node_id": 6631,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Python wildcard imports (from module import *) when properly stored.",
        "end_line": 148,
        "name": "test_python_wildcard_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_python_wildcard_import_resolution",
        "start_line": 119
      }
    },
    {
      "node_id": 6632,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Rust wildcard imports (use std::collections::*;) work correctly.",
        "end_line": 93,
        "name": "test_rust_wildcard_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_rust_wildcard_import_resolution",
        "start_line": 65
      }
    },
    {
      "node_id": 6633,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test Scala wildcard imports (import scala.collection._) when properly stored.",
        "end_line": 223,
        "name": "test_scala_wildcard_import_resolution",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_scala_wildcard_import_resolution",
        "start_line": 187
      }
    },
    {
      "node_id": 6634,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that exact imports take priority over wildcard imports.",
        "end_line": 273,
        "name": "test_exact_import_priority_over_wildcard",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_exact_import_priority_over_wildcard",
        "start_line": 248
      }
    },
    {
      "node_id": 6635,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that wildcard imports don't match non-existent functions.",
        "end_line": 334,
        "name": "test_wildcard_with_no_matching_function",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_wildcard_with_no_matching_function",
        "start_line": 315
      }
    },
    {
      "node_id": 6636,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test that Phase 2/3 fallback still works when wildcard doesn't match.",
        "end_line": 360,
        "name": "test_fallback_still_works_after_wildcard_check",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_python_wildcard_import_resolution.TestWildcardImportResolution.test_fallback_still_works_after_wildcard_check",
        "start_line": 336
      }
    },
    {
      "node_id": 6637,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test resolution of same directory (./) imports.",
        "end_line": 58,
        "name": "test_same_directory_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_same_directory_imports",
        "start_line": 42
      }
    },
    {
      "node_id": 6638,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test resolution of complex relative paths with mixed components.",
        "end_line": 95,
        "name": "test_complex_relative_paths",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_complex_relative_paths",
        "start_line": 79
      }
    },
    {
      "node_id": 6639,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [
          "pytest.fixture"
        ],
        "docstring": "Create a GraphUpdater instance for testing.",
        "end_line": 23,
        "name": "graph_updater",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.graph_updater",
        "start_line": 14
      }
    },
    {
      "node_id": 6640,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test resolution of parent directory (../) imports.",
        "end_line": 77,
        "name": "test_parent_directory_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_parent_directory_imports",
        "start_line": 60
      }
    },
    {
      "node_id": 6641,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test resolution of absolute import paths.",
        "end_line": 40,
        "name": "test_absolute_imports",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_absolute_imports",
        "start_line": 25
      }
    },
    {
      "node_id": 6642,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test edge cases and boundary conditions.",
        "end_line": 117,
        "name": "test_edge_cases",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_edge_cases",
        "start_line": 97
      }
    },
    {
      "node_id": 6643,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Test resolution from deeply nested modules.",
        "end_line": 137,
        "name": "test_deeply_nested_modules",
        "qualified_name": "code-graph-rag.codebase_rag.tests.test_javascript_path_resolution.TestJavaScriptPathResolution.test_deeply_nested_modules",
        "start_line": 119
      }
    },
    {
      "node_id": 6644,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 36,
        "name": "__enter__",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.__enter__",
        "start_line": 31
      }
    },
    {
      "node_id": 6645,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 74,
        "name": "_execute_query",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor._execute_query",
        "start_line": 51
      }
    },
    {
      "node_id": 6646,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 94,
        "name": "clean_database",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.clean_database",
        "start_line": 91
      }
    },
    {
      "node_id": 6647,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Adds a node to the buffer.",
        "end_line": 109,
        "name": "ensure_node_batch",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.ensure_node_batch",
        "start_line": 107
      }
    },
    {
      "node_id": 6648,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Flushes the buffered nodes to the database.",
        "end_line": 156,
        "name": "flush_nodes",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.flush_nodes",
        "start_line": 130
      }
    },
    {
      "node_id": 6649,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 185,
        "name": "flush_all",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.flush_all",
        "start_line": 181
      }
    },
    {
      "node_id": 6650,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Executes a write query without returning results.",
        "end_line": 195,
        "name": "execute_write",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.execute_write",
        "start_line": 192
      }
    },
    {
      "node_id": 6651,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 29,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.__init__",
        "start_line": 12
      }
    },
    {
      "node_id": 6652,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 89,
        "name": "_execute_batch",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor._execute_batch",
        "start_line": 76
      }
    },
    {
      "node_id": 6653,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 49,
        "name": "__exit__",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.__exit__",
        "start_line": 38
      }
    },
    {
      "node_id": 6654,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 105,
        "name": "ensure_constraints",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.ensure_constraints",
        "start_line": 96
      }
    },
    {
      "node_id": 6655,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Adds a relationship to the buffer.",
        "end_line": 128,
        "name": "ensure_relationship_batch",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.ensure_relationship_batch",
        "start_line": 111
      }
    },
    {
      "node_id": 6656,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 179,
        "name": "flush_relationships",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.flush_relationships",
        "start_line": 158
      }
    },
    {
      "node_id": 6657,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Executes a query and fetches all results.",
        "end_line": 190,
        "name": "fetch_all",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.fetch_all",
        "start_line": 187
      }
    },
    {
      "node_id": 6658,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Export the entire graph as a dictionary with nodes and relationships.",
        "end_line": 228,
        "name": "export_graph_to_dict",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor.export_graph_to_dict",
        "start_line": 197
      }
    },
    {
      "node_id": 6659,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "docstring": "Get current timestamp in ISO format.",
        "end_line": 232,
        "name": "_get_current_timestamp",
        "qualified_name": "code-graph-rag.codebase_rag.services.graph_service.MemgraphIngestor._get_current_timestamp",
        "start_line": 230
      }
    },
    {
      "node_id": 6660,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 98,
        "name": "__init__",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm.CypherGenerator.__init__",
        "start_line": 41
      }
    },
    {
      "node_id": 6661,
      "labels": [
        "Method"
      ],
      "properties": {
        "decorators": [],
        "end_line": 119,
        "name": "generate",
        "qualified_name": "code-graph-rag.codebase_rag.services.llm.CypherGenerator.generate",
        "start_line": 100
      }
    }
  ],
  "relationships": [
    {
      "from_id": 4997,
      "to_id": 4998,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4998,
      "to_id": 4999,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4998,
      "to_id": 5000,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5001,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5002,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5003,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5004,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 5004,
      "to_id": 5005,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 5004,
      "to_id": 5006,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 5004,
      "to_id": 5007,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5008,
      "type": "CONTAINS_FOLDER",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5009,
      "type": "CONTAINS_PACKAGE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5010,
      "type": "CONTAINS_PACKAGE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5011,
      "type": "CONTAINS_PACKAGE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5012,
      "type": "CONTAINS_PACKAGE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5013,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5014,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5015,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5016,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5017,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5018,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5019,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5020,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5021,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5022,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5023,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5024,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5055,
      "to_id": 5025,
      "type": "IMPORTS",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 5025,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5003,
      "to_id": 5026,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5027,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5028,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5029,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5030,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5031,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5032,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5033,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5034,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5035,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5036,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5037,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5038,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5039,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5040,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 5041,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5042,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5043,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5044,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5045,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5046,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5047,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5048,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5049,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5050,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 5051,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5052,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5053,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5054,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5055,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5056,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5057,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5058,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5059,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5060,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5061,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5062,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5063,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5064,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5065,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5066,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5067,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5068,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5069,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5070,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5071,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5072,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5073,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5074,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5075,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5076,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5077,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5078,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5079,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5080,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5081,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5082,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5083,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5084,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5085,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5086,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5087,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5088,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5089,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5090,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5091,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5092,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5093,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5094,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5095,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5096,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5097,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5098,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5099,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5100,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5101,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5102,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5103,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5104,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5105,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5106,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5107,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5108,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5109,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5110,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5111,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5112,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5113,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5114,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5115,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5116,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5117,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5118,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5119,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5120,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5121,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5122,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5123,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5124,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5125,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5126,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5127,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5128,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5129,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5130,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5131,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5132,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5133,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5134,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5135,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5136,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5137,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5138,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5139,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5140,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5141,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5142,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5143,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5144,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5145,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5146,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5147,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5148,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5149,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5150,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5151,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5152,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5153,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5154,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5155,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5156,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5157,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5158,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5159,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5160,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5161,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5162,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5163,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5164,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5165,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5166,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5167,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5168,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5169,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5170,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5171,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5172,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5173,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5174,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5175,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5176,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 5177,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 5178,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 5179,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 5180,
      "type": "CONTAINS_MODULE",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5181,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5181,
      "to_id": 5181,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5181,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5181,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5182,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5182,
      "to_id": 5182,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5182,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5182,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5183,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5183,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5183,
      "to_id": 5184,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5183,
      "to_id": 5184,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5184,
      "to_id": 5184,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5184,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5185,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5185,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5186,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5186,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5186,
      "to_id": 5187,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5186,
      "to_id": 5187,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5187,
      "to_id": 5187,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5187,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5186,
      "to_id": 5188,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5186,
      "to_id": 5188,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5188,
      "to_id": 5188,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5188,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5189,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5189,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5189,
      "to_id": 5189,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5189,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5190,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5185,
      "to_id": 5190,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5190,
      "to_id": 5190,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5013,
      "to_id": 5190,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 5191,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 5191,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5015,
      "to_id": 5192,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5015,
      "to_id": 5192,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5193,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5193,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5194,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5195,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5195,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 5196,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6266,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6299,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6552,
      "to_id": 5196,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5018,
      "to_id": 5197,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5204,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5996,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5018,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5045,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6267,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6568,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6660,
      "to_id": 5197,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 5198,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5224,
      "to_id": 5198,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 5198,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5198,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5023,
      "to_id": 5199,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5201,
      "to_id": 5199,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5023,
      "to_id": 5199,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5023,
      "to_id": 5200,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5191,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5298,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5299,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5301,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5302,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5303,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5304,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5307,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5309,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5310,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5311,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5312,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5314,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5315,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5316,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5317,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5319,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5320,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5321,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5322,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5324,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5325,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5326,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5327,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5329,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5330,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5331,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5332,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5333,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5334,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5335,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5336,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5338,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5339,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5340,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5342,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5343,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5344,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5345,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5346,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5347,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5349,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5350,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5351,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5352,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5353,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5354,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5355,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5356,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5357,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5358,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5359,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5360,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5361,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5362,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5363,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5365,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5366,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5367,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5370,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5371,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5372,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5374,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5375,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5376,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5378,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5379,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5380,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5381,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5382,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5383,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5384,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5385,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5386,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5388,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5389,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5390,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5392,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5393,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5394,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5395,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5396,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5398,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5399,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5400,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5401,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5402,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5403,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5405,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5406,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5407,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5409,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5411,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5412,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5413,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5414,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5415,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5416,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5417,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5418,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5419,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5420,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5421,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5422,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5423,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5424,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5425,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5426,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5427,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5428,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5429,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5430,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5431,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5432,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5433,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5434,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5435,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5436,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5437,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5438,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5439,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5440,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5441,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5442,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5443,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5444,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5445,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5447,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5448,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5449,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5450,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5451,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5452,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5453,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5454,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5455,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5457,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5458,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5459,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5460,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5461,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5463,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5464,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5465,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5466,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5468,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5469,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5470,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5471,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5472,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5474,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5475,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5476,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5477,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5478,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5479,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5480,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5482,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5483,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5484,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5485,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5486,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5488,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5489,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5490,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5492,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5493,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5494,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5495,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5496,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5498,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5499,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5500,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5501,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5502,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5503,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5504,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5505,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5506,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5508,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5509,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5510,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5511,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5512,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5513,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5515,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5516,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5517,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5518,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5519,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5520,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5521,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5522,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5523,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5524,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5525,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5526,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5527,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5528,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5530,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5531,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5532,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5533,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5534,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5535,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5536,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5537,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5538,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5539,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5541,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5542,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5543,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5545,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5546,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5547,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5548,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5549,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5550,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5551,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5552,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5553,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5554,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5555,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5557,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5558,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5559,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5560,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5562,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5563,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5564,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5565,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5566,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5568,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5569,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5570,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5571,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5572,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5573,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5574,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5575,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5576,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5577,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5580,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5581,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5582,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5583,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5584,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5585,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5586,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5587,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5588,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5589,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5590,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5591,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5593,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5594,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5595,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5596,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5597,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5598,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5599,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5600,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5602,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5603,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5604,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5605,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5606,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5607,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5609,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5610,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5611,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5612,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5613,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5614,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5617,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5618,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5619,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5620,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5622,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5623,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5624,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5625,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5627,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5628,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5629,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5630,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5632,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5633,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5634,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5636,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5638,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5639,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5640,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5642,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5643,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5644,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5646,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5647,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5648,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5649,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5650,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5652,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5653,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5654,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5655,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5656,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5657,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5659,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5660,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5661,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5662,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5663,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5665,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5666,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5667,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5668,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5669,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5671,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5672,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5673,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5674,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5675,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5677,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5678,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5679,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5680,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5682,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5683,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5684,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5685,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5686,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5688,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5689,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5690,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5691,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5692,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5693,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5694,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5696,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5697,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5698,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5699,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5700,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5701,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5702,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5704,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5705,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5706,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5707,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5708,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5716,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5718,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5719,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5720,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5721,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5722,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5723,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5725,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5726,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5727,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5728,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5729,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5731,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5732,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5733,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5734,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5735,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5737,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5738,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5739,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5740,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5741,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5742,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5744,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5745,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5746,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5748,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5749,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5750,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5751,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5752,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5754,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5755,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5756,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5758,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5759,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5760,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5761,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5763,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5764,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5765,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5767,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5768,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5769,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5770,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5772,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5773,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5774,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5775,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5776,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5777,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5779,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5780,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5781,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5782,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5783,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5784,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5786,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5788,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5790,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5791,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5792,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5793,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5794,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5796,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5797,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5798,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5799,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5800,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5802,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5803,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5804,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5805,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5806,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5807,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5808,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5809,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5810,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5811,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5812,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5813,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5814,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5815,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5816,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5817,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5818,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5819,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5820,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5821,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5822,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5824,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5825,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5826,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5827,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5828,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5829,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5830,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5831,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5832,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5834,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5835,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5836,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5837,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5838,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5840,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5841,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5842,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5843,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5845,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5846,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5847,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5848,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5849,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5851,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5852,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5853,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5854,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5855,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5856,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5857,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5858,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5859,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5861,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5862,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5863,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5864,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5865,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5866,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5867,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5868,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5869,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5870,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5872,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5873,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5874,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5875,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5876,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5877,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5878,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5879,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5880,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5882,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5884,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5885,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5886,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5888,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5889,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5890,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5891,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5892,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5894,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5895,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5896,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5897,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5898,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5899,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5901,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5902,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5903,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5904,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5905,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5906,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5908,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5909,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5910,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5911,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5912,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5914,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5915,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5916,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5917,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5919,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5920,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5921,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5922,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5923,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5924,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5925,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5926,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5927,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5929,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5930,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5931,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5932,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5933,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5934,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5935,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5937,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5938,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5939,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5940,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5941,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5942,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5944,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5945,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5946,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5947,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5949,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5950,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5951,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5952,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5953,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5954,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5955,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5956,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5957,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5958,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5959,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5961,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5962,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5963,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5965,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5966,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5967,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5968,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5969,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5971,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5972,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5973,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5975,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5976,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5977,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5978,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5979,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5981,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5982,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5983,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5984,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5985,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5987,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5988,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5989,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5990,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5992,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5993,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5994,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5053,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5054,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5067,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5075,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5076,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5079,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5088,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5098,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5110,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5126,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5140,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5146,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6551,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6580,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6596,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6604,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6614,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6639,
      "to_id": 5200,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5023,
      "to_id": 5201,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5023,
      "to_id": 5201,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5202,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5220,
      "to_id": 5202,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5202,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5203,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5203,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5203,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5203,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5204,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5220,
      "to_id": 5204,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5204,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5205,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5205,
      "to_id": 5206,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5205,
      "to_id": 5207,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5208,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5209,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5210,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5220,
      "to_id": 5210,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5210,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5211,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5211,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5211,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5219,
      "to_id": 5211,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5211,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5212,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 5212,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5212,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5213,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5213,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5213,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5213,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5214,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5214,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5214,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5214,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5215,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 5215,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5215,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5216,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5217,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5218,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5220,
      "to_id": 5218,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5218,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5219,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5220,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 5220,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5220,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5221,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5209,
      "to_id": 5221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5210,
      "to_id": 5221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5205,
      "to_id": 5222,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5223,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5224,
      "to_id": 5223,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5223,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5224,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5226,
      "to_id": 5224,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5224,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5225,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5224,
      "to_id": 5225,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5225,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5226,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5226,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5227,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5224,
      "to_id": 5227,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5026,
      "to_id": 5227,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5228,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5228,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6538,
      "to_id": 5228,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5229,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5229,
      "to_id": 5229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5246,
      "to_id": 5229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5230,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5232,
      "to_id": 5230,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5230,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5231,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6519,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6520,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6524,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6526,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6535,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6537,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6541,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6546,
      "to_id": 5231,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5232,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5231,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5235,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5236,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5237,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5239,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5240,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5242,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5243,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5244,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5246,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5248,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5262,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5263,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5264,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5266,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5267,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5268,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5269,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5270,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5271,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5028,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6339,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6345,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6347,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6348,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6350,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6351,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6359,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6361,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6367,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6369,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6372,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6373,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6374,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6519,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6531,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6539,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6541,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6542,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6543,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6545,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6547,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6548,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6549,
      "to_id": 5232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5233,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5233,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5233,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5234,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5234,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6459,
      "to_id": 5234,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6497,
      "to_id": 5234,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5235,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5236,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5237,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5237,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5243,
      "to_id": 5237,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5237,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5238,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5239,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5245,
      "to_id": 5239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5240,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5241,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5238,
      "to_id": 5241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6532,
      "to_id": 5241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5237,
      "to_id": 5242,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5237,
      "to_id": 5242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5242,
      "to_id": 5242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5243,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5241,
      "to_id": 5243,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5243,
      "to_id": 5243,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5243,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5244,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5036,
      "to_id": 5245,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6463,
      "to_id": 5245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6507,
      "to_id": 5245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6515,
      "to_id": 5245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5246,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6479,
      "to_id": 5246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6523,
      "to_id": 5246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5247,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5248,
      "to_id": 5247,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5247,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5037,
      "to_id": 5248,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 5248,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6527,
      "to_id": 5248,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5039,
      "to_id": 5249,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5027,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5030,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6336,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6381,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6482,
      "to_id": 5249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5250,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5250,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5250,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5251,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6453,
      "to_id": 5251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6465,
      "to_id": 5251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5252,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5254,
      "to_id": 5252,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5252,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5253,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5261,
      "to_id": 5253,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5253,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5254,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5261,
      "to_id": 5254,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5254,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5255,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5256,
      "to_id": 5255,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5027,
      "to_id": 5255,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5255,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6322,
      "to_id": 5255,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5256,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5254,
      "to_id": 5256,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5256,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5257,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5257,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6453,
      "to_id": 5257,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5257,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5258,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5261,
      "to_id": 5258,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5258,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5259,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5261,
      "to_id": 5259,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5259,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5260,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5261,
      "to_id": 5260,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5260,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5261,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5233,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5253,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5258,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5260,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5027,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5034,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5040,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6326,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6453,
      "to_id": 5261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5262,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 5262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6472,
      "to_id": 5262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5263,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5264,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5028,
      "to_id": 5264,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6342,
      "to_id": 5264,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6365,
      "to_id": 5264,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5265,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5266,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5267,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5028,
      "to_id": 5267,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6368,
      "to_id": 5267,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5268,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5028,
      "to_id": 5268,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6346,
      "to_id": 5268,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6368,
      "to_id": 5268,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5269,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5270,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 5271,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 5272,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5272,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5272,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5272,
      "to_id": 5273,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5274,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5274,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6564,
      "to_id": 5274,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5275,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5275,
      "to_id": 5276,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5277,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5277,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6564,
      "to_id": 5277,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 5278,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5278,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5278,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5278,
      "to_id": 5279,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5281,
      "to_id": 5280,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5044,
      "to_id": 5281,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5281,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5281,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5283,
      "to_id": 5282,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5045,
      "to_id": 5283,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5283,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5283,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5285,
      "to_id": 5284,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5047,
      "to_id": 5285,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5285,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5285,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5289,
      "to_id": 5286,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5289,
      "to_id": 5286,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5286,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5289,
      "to_id": 5287,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5287,
      "to_id": 5287,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5289,
      "to_id": 5287,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5287,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5288,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5288,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5289,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5290,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5291,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 5292,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5049,
      "to_id": 5293,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5293,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5293,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5293,
      "to_id": 5294,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5050,
      "to_id": 5295,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5295,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5295,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5051,
      "to_id": 5296,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5296,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5296,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5296,
      "to_id": 5297,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5298,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5299,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5300,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5301,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5302,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 5303,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5053,
      "to_id": 5304,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5055,
      "to_id": 5305,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5055,
      "to_id": 5306,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5307,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5308,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5309,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5310,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 5311,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5312,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5313,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5314,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5315,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 5316,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5317,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5318,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5319,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5320,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 5321,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5322,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5323,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5324,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5325,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 5326,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5327,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5328,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5329,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5330,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 5331,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5332,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5333,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5334,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5335,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5336,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5337,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5338,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5339,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5340,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5341,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5342,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5343,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5344,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 5345,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5346,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5347,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5348,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5349,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5350,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 5351,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5352,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5353,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5354,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5355,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5356,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 5357,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5358,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5359,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5360,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5361,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 5362,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5363,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5364,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5365,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5366,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 5367,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5067,
      "to_id": 5368,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5067,
      "to_id": 5369,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5067,
      "to_id": 5370,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5371,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5372,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5373,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5374,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5375,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 5376,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 5377,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 5378,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 5379,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 5380,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5381,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5382,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5383,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5384,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 5385,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5386,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5387,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5388,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5389,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 5390,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 5391,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 5392,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 5393,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 5394,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5395,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5396,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5397,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5398,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5399,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5400,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 5401,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5402,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5403,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5404,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5405,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5406,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 5407,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5075,
      "to_id": 5408,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5075,
      "to_id": 5409,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5076,
      "to_id": 5410,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5076,
      "to_id": 5411,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 5412,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 5413,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 5414,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5079,
      "to_id": 5415,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5416,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5417,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5418,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5419,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5420,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5421,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5422,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5423,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5424,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5425,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5426,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5427,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5428,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5429,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5430,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5431,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5432,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5433,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5434,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5435,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5436,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5437,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5438,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 5439,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5440,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5441,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5442,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5443,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5444,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5445,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5446,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5447,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5448,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5449,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5450,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5451,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5452,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 5453,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5454,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5455,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5456,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5457,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5458,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 5459,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5460,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5461,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5462,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5463,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5464,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 5465,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5466,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5467,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5468,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5469,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 5470,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5471,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5472,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5473,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5474,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5475,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5476,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 5477,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5478,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5479,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5480,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5481,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5482,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5483,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5484,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 5485,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5486,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5487,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5488,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5489,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 5490,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 5491,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 5492,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 5493,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 5494,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5495,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5496,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5497,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5498,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5499,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 5500,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5501,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5502,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5503,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5504,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 5505,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5506,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5507,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5508,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5509,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 5510,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5511,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5512,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5513,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5514,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5515,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5516,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5517,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 5518,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 5519,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 5520,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 5521,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 5522,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 5523,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 5524,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 5525,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 5526,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5527,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5528,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5529,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5530,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5531,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 5532,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 5533,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 5534,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 5535,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 5536,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5098,
      "to_id": 5537,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5538,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5539,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5540,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5541,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5542,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 5543,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 5544,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 5545,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 5546,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 5547,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5548,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5549,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5550,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5551,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5552,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 5553,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5554,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5555,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5556,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5557,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5558,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 5559,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5560,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5561,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5562,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5563,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 5564,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5565,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5566,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5567,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5568,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5569,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5570,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 5571,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5572,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5573,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5574,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5575,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5576,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5577,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5578,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5579,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5580,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5581,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5582,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5583,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5584,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5585,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 5586,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5587,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5588,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5589,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5590,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5591,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5592,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5593,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5594,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5595,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5596,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5597,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5598,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 5599,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5600,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5601,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5602,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5603,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 5604,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5605,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5606,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5607,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5608,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5609,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5610,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5611,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 5612,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5613,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5614,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5615,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5616,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5617,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 5618,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5619,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5620,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5621,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5622,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5623,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 5624,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5625,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5626,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5627,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5628,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 5629,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5630,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5631,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5632,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5633,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 5634,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 5635,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 5636,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 5637,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 5638,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5639,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5640,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5641,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5642,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5643,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 5644,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 5645,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 5646,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 5647,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 5648,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5649,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5650,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5651,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5652,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5653,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5654,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 5655,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5656,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5657,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5658,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5659,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5660,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 5661,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5662,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5663,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5664,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5665,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5666,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 5667,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5668,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5669,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5670,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5671,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5672,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 5673,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5674,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5675,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5676,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5677,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5678,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 5679,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5680,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5681,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5682,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5683,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 5684,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5685,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5686,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5687,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5688,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5689,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5690,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 5691,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5692,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5693,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5694,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5695,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5696,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5697,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5698,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 5699,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5700,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5701,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5702,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5703,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5704,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5705,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5706,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 5707,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5126,
      "to_id": 5708,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5709,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5710,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5711,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5712,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5713,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5714,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 5715,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5716,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5717,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5718,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5719,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 5720,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5721,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5722,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5723,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5724,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5725,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5726,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5727,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5728,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 5729,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 5730,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 5731,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 5732,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 5733,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5734,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5735,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5736,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5737,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5738,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5739,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 5740,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5741,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5742,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5743,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5744,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5745,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 5746,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 5747,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 5748,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 5749,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 5750,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5751,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5752,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5753,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5754,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5755,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 5756,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 5757,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 5758,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 5759,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5760,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5761,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5762,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5763,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5764,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 5765,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 5766,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 5767,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 5768,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 5769,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5770,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5771,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5772,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5773,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 5774,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5775,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5776,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5777,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5778,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5779,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5780,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5781,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 5782,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5140,
      "to_id": 5783,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5784,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5785,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5786,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5787,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 5788,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 5789,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 5790,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 5791,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 5792,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5793,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5794,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5795,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5796,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5797,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 5798,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5799,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5800,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5801,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5802,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5803,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 5804,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5805,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5806,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5807,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5808,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5809,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5810,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5811,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 5812,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5813,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5814,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5815,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5816,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 5817,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5818,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5819,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5820,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5821,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5822,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5823,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5824,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5825,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5826,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5827,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5828,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5829,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 5830,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5831,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5832,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5833,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5834,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5835,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5836,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 5837,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5838,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5839,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5840,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5841,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 5842,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5843,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5844,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5845,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5846,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 5847,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5848,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5849,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5850,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5851,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5852,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5853,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 5854,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 5855,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 5856,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 5857,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 5858,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5859,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5860,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5861,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5862,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 5863,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5864,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5865,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5866,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5867,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5868,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5869,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5870,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5871,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5872,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5873,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5874,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5875,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5876,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5877,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5878,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 5879,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5880,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5881,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5882,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5883,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 5884,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5885,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5886,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5887,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5888,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5889,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 5890,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5891,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5892,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5893,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5894,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5895,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5896,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 5897,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5898,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5899,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5900,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5901,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5902,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5903,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 5904,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5905,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5906,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5907,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5908,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5909,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 5910,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5911,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5912,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5913,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5914,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5915,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5916,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 5917,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 5918,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 5919,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 5920,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5921,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5922,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5923,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5924,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 5925,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5926,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5927,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5928,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5929,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5930,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5931,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 5932,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5933,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5934,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5935,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5936,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5937,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5938,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5939,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 5940,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5941,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5942,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5943,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5944,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5945,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 5946,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5947,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5948,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5949,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5950,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 5951,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5952,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5953,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5954,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5955,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5956,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 5957,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5958,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5959,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5960,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5961,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5962,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 5963,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 5964,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 5965,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 5966,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 5967,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5968,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5969,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5970,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5971,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5972,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 5973,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 5974,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 5975,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 5976,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 5977,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5978,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5979,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5980,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5981,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5982,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 5983,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5984,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5985,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5986,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5987,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5988,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5989,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 5990,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 5991,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 5992,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 5993,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 5994,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 5995,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 5995,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6661,
      "to_id": 5995,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 5996,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 5996,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 5996,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5997,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5998,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 5999,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6000,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6001,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6002,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6003,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6004,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6005,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6006,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6007,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6008,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6009,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6010,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6011,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6012,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6013,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6014,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6015,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6016,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6017,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6018,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6019,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6020,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6021,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5009,
      "to_id": 6022,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5008,
      "to_id": 6023,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5008,
      "to_id": 6024,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5008,
      "to_id": 6025,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5008,
      "to_id": 6026,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5003,
      "to_id": 6027,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5001,
      "to_id": 6028,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5001,
      "to_id": 6029,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6030,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6031,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6032,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6033,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6034,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6035,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6036,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6037,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6038,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6039,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6040,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6041,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6042,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6043,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5010,
      "to_id": 6044,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6045,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6046,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6047,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6048,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6049,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6050,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6051,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6052,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6053,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5012,
      "to_id": 6054,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6055,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6056,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6057,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6058,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6059,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6060,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6061,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6062,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6063,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6064,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6065,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6066,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6067,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6068,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6069,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6070,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6071,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6072,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6073,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6074,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6075,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6076,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6077,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6078,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6079,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6080,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6081,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6082,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6083,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6084,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6085,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6086,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6087,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6088,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6089,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6090,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6091,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6092,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6093,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6094,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6095,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6096,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6097,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6098,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6099,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6100,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6101,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6102,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6103,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6104,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6105,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6106,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6107,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6108,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6109,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6110,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6111,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6112,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6113,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6114,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6115,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6116,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6117,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6118,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6119,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6120,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6121,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6122,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6123,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6124,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6125,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6126,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6127,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6128,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6129,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6130,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6131,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6132,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6133,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6134,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6135,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6136,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6137,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6138,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6139,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6140,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6141,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6142,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6143,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6144,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6145,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6146,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6147,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6148,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6149,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6150,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6151,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6152,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6153,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6154,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6155,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6156,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6157,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6158,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6159,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6160,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6161,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6162,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6163,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6164,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6165,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6166,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6167,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6168,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6169,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6170,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6171,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6172,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6173,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6174,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6175,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6176,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6177,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6178,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6179,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5002,
      "to_id": 6180,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 6181,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 6182,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5011,
      "to_id": 6183,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5000,
      "to_id": 6184,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5000,
      "to_id": 6185,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 5000,
      "to_id": 6186,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4999,
      "to_id": 6187,
      "type": "CONTAINS_FILE",
      "properties": {}
    },
    {
      "from_id": 4997,
      "to_id": 6188,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "loguru>=0.7.3"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6189,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "pydantic-ai-slim[google,openai,vertexai]>=0.2.18"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6190,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "pydantic-settings>=2.0.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6191,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "pymgclient>=1.4.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6192,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "python-dotenv>=1.1.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6193,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "toml>=0.10.2"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6194,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-python>=0.23.6"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6195,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "tree-sitter==0.25.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6196,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "watchdog>=6.0.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6197,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "typer>=0.12.5"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6198,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "rich>=13.7.1"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6199,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "prompt-toolkit>=3.0.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6200,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "diff-match-patch>=20241021"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6201,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "click>=8.0.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6202,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "version_spec": "pytest-xdist>=3.8.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6203,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "test",
        "version_spec": "pytest>=8.4.1"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6204,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "test",
        "version_spec": "pytest-asyncio>=1.0.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6205,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "dev",
        "version_spec": "ruff>=0.5.5"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6206,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "dev",
        "version_spec": "mypy>=1.11.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6207,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "dev",
        "version_spec": "pre-commit>=4.2.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6208,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-javascript>=0.23.1"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6209,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-typescript>=0.23.2"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6210,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-rust>=0.24.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6211,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-go>=0.23.4"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6212,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-scala>=0.24.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6213,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-java>=0.23.5"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6214,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-cpp>=0.23.0"
      }
    },
    {
      "from_id": 4997,
      "to_id": 6215,
      "type": "DEPENDS_ON_EXTERNAL",
      "properties": {
        "group": "treesitter-full",
        "version_spec": "tree-sitter-lua>=0.0.19"
      }
    },
    {
      "from_id": 5014,
      "to_id": 6216,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5191,
      "to_id": 6216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5711,
      "to_id": 6216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 6216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5127,
      "to_id": 6216,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 6217,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5193,
      "to_id": 6217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5289,
      "to_id": 6217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5017,
      "to_id": 6217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5048,
      "to_id": 6217,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5018,
      "to_id": 6218,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5018,
      "to_id": 6218,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6219,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5054,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6296,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6583,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6593,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6594,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6597,
      "to_id": 6219,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6220,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6220,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6296,
      "to_id": 6220,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6221,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5191,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5298,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5299,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5301,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5302,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5303,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5304,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5307,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5309,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5310,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5311,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5312,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5314,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5315,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5316,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5317,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5319,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5320,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5321,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5322,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5324,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5325,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5326,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5327,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5329,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5330,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5331,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5332,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5333,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5334,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5335,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5336,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5338,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5339,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5340,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5342,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5343,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5344,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5345,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5346,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5347,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5349,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5350,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5351,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5352,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5353,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5354,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5355,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5356,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5357,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5358,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5359,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5360,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5361,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5362,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5363,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5365,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5366,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5367,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5371,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5372,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5374,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5375,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5376,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5378,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5379,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5380,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5381,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5382,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5383,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5384,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5385,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5386,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5388,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5389,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5390,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5392,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5393,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5394,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5395,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5396,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5398,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5399,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5400,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5401,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5402,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5403,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5405,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5406,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5407,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5409,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5411,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5412,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5413,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5414,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5415,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5416,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5417,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5418,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5419,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5420,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5421,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5422,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5423,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5424,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5425,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5426,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5427,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5428,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5429,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5430,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5431,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5432,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5433,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5434,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5435,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5436,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5437,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5438,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5439,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5440,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5441,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5442,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5443,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5444,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5445,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5447,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5448,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5449,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5450,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5451,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5452,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5453,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5454,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5455,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5457,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5458,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5459,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5460,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5461,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5463,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5464,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5465,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5466,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5468,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5469,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5470,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5471,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5472,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5474,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5475,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5476,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5477,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5478,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5479,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5480,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5482,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5483,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5484,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5485,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5486,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5488,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5489,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5490,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5492,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5493,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5494,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5495,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5496,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5498,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5499,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5500,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5501,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5502,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5503,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5504,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5505,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5506,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5508,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5509,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5510,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5511,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5512,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5513,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5515,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5516,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5517,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5518,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5519,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5520,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5521,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5522,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5523,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5524,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5525,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5526,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5527,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5528,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5530,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5531,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5532,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5533,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5534,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5535,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5536,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5537,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5538,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5539,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5541,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5542,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5543,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5545,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5546,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5547,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5548,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5549,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5550,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5551,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5552,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5553,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5554,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5555,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5557,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5558,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5559,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5560,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5562,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5563,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5564,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5565,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5566,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5568,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5569,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5570,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5571,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5572,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5573,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5574,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5575,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5576,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5577,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5580,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5581,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5582,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5583,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5584,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5585,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5586,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5587,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5588,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5589,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5590,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5591,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5593,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5594,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5595,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5596,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5597,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5598,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5599,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5600,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5602,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5603,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5604,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5605,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5606,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5607,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5609,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5610,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5611,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5612,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5613,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5614,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5617,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5618,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5619,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5620,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5622,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5623,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5624,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5625,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5627,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5628,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5629,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5630,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5632,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5633,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5634,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5636,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5638,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5639,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5640,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5642,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5643,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5644,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5646,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5647,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5648,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5649,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5650,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5652,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5653,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5654,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5655,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5656,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5657,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5659,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5660,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5661,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5662,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5663,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5665,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5666,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5667,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5668,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5669,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5671,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5672,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5673,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5674,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5675,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5677,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5678,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5679,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5680,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5682,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5683,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5684,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5685,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5686,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5688,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5689,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5690,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5691,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5692,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5693,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5694,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5696,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5697,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5698,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5699,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5700,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5701,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5702,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5704,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5705,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5706,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5707,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5708,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5716,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5718,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5719,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5720,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5721,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5722,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5723,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5725,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5726,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5727,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5728,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5729,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5731,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5732,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5733,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5734,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5735,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5737,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5738,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5739,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5740,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5741,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5742,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5744,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5745,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5746,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5748,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5749,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5750,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5751,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5752,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5754,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5755,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5756,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5758,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5759,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5760,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5761,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5763,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5764,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5765,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5767,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5768,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5769,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5770,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5772,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5773,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5774,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5775,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5776,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5777,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5779,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5780,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5781,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5782,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5783,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5784,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5786,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5788,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5790,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5791,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5792,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5793,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5794,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5796,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5797,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5798,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5799,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5800,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5802,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5803,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5804,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5805,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5806,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5807,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5808,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5809,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5810,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5811,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5812,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5813,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5814,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5815,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5816,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5817,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5818,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5819,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5820,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5821,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5822,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5824,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5825,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5826,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5827,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5828,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5829,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5830,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5831,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5832,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5834,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5835,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5836,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5837,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5838,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5840,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5841,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5842,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5843,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5845,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5846,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5847,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5848,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5849,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5851,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5852,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5853,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5854,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5855,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5856,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5857,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5858,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5859,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5861,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5862,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5863,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5864,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5865,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5866,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5867,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5868,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5869,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5870,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5872,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5873,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5874,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5875,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5876,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5877,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5878,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5879,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5880,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5882,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5884,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5885,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5886,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5888,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5889,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5890,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5891,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5892,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5894,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5895,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5896,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5897,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5898,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5899,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5901,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5902,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5903,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5904,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5905,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5906,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5908,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5909,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5910,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5911,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5912,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5914,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5915,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5916,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5917,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5919,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5920,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5921,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5922,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5923,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5924,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5925,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5926,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5927,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5929,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5930,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5931,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5932,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5933,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5934,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5935,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5937,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5938,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5939,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5940,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5941,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5942,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5944,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5945,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5946,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5947,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5949,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5950,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5951,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5952,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5953,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5954,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5955,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5956,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5957,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5958,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5959,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5961,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5962,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5963,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5965,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5966,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5967,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5968,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5969,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5971,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5972,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5973,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5975,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5976,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5977,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5978,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5979,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5981,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5982,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5983,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5984,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5985,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5987,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5988,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5989,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5990,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5992,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5993,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5994,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5053,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5054,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5062,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5075,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5076,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5079,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5088,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5098,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5110,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5126,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5140,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5141,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5143,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5146,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6580,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6588,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6596,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6604,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6614,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6621,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6630,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6639,
      "to_id": 6221,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6222,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6222,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6309,
      "to_id": 6222,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6223,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6223,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6309,
      "to_id": 6223,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6224,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5198,
      "to_id": 6224,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6224,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5024,
      "to_id": 6225,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5296,
      "to_id": 6225,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5297,
      "to_id": 6225,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5051,
      "to_id": 6225,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5024,
      "to_id": 6226,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 6226,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6564,
      "to_id": 6226,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5024,
      "to_id": 6227,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5049,
      "to_id": 6227,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6573,
      "to_id": 6227,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5027,
      "to_id": 6228,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6228,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6447,
      "to_id": 6228,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5028,
      "to_id": 6229,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5030,
      "to_id": 6229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6399,
      "to_id": 6229,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5030,
      "to_id": 6230,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6230,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6446,
      "to_id": 6230,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6231,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6232,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6296,
      "to_id": 6232,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5033,
      "to_id": 6233,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6233,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6441,
      "to_id": 6233,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 6234,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6234,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6445,
      "to_id": 6234,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5038,
      "to_id": 6235,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5032,
      "to_id": 6235,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6443,
      "to_id": 6235,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6236,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5267,
      "to_id": 6236,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6236,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6237,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5268,
      "to_id": 6237,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6237,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6238,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5271,
      "to_id": 6238,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6238,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6239,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5262,
      "to_id": 6239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5041,
      "to_id": 6239,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 6240,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 6241,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 6241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6562,
      "to_id": 6241,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 6242,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6242,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5043,
      "to_id": 6243,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6243,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6243,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5044,
      "to_id": 6244,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5044,
      "to_id": 6244,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6566,
      "to_id": 6244,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5044,
      "to_id": 6245,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6245,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5045,
      "to_id": 6246,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5045,
      "to_id": 6246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6568,
      "to_id": 6246,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5045,
      "to_id": 6247,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6247,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6247,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5047,
      "to_id": 6248,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5047,
      "to_id": 6248,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6571,
      "to_id": 6248,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5047,
      "to_id": 6249,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6249,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5049,
      "to_id": 6250,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6250,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6250,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5050,
      "to_id": 6251,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6251,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5051,
      "to_id": 6252,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5054,
      "to_id": 6253,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5062,
      "to_id": 6254,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6255,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5088,
      "to_id": 6256,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5110,
      "to_id": 6257,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5141,
      "to_id": 6258,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5143,
      "to_id": 6259,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5146,
      "to_id": 6260,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5178,
      "to_id": 6261,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5191,
      "to_id": 6261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 6261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5220,
      "to_id": 6261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 6261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6261,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 6262,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5996,
      "to_id": 6262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 6262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6660,
      "to_id": 6262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6661,
      "to_id": 6262,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5180,
      "to_id": 6263,
      "type": "DEFINES",
      "properties": {}
    },
    {
      "from_id": 5218,
      "to_id": 6263,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6263,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6216,
      "to_id": 6264,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6216,
      "to_id": 6265,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6216,
      "to_id": 6266,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6218,
      "to_id": 6267,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6218,
      "to_id": 6268,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6218,
      "to_id": 6269,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6218,
      "to_id": 6270,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6218,
      "to_id": 6271,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6272,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6272,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6594,
      "to_id": 6272,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6273,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6274,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6275,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6275,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6294,
      "to_id": 6275,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6276,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6277,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6277,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6277,
      "to_id": 6277,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6284,
      "to_id": 6277,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6278,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6279,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6279,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6593,
      "to_id": 6279,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6594,
      "to_id": 6279,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6597,
      "to_id": 6279,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6280,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6281,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6282,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6283,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6284,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6284,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6593,
      "to_id": 6284,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6597,
      "to_id": 6284,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6219,
      "to_id": 6285,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5078,
      "to_id": 6285,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6593,
      "to_id": 6285,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6286,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6287,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6288,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6288,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6301,
      "to_id": 6288,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6289,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6290,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6291,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6292,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6220,
      "to_id": 6293,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6294,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6295,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6296,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6297,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5191,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5208,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5298,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5299,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5301,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5302,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5303,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5304,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5307,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5309,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5310,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5311,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5312,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5314,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5315,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5316,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5317,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5319,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5320,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5321,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5322,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5324,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5325,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5326,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5327,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5329,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5330,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5331,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5332,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5333,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5334,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5335,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5336,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5338,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5339,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5340,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5342,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5343,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5344,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5345,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5346,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5347,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5349,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5350,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5351,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5352,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5353,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5354,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5355,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5356,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5357,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5358,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5359,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5360,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5361,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5362,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5363,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5365,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5366,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5367,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5371,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5372,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5374,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5375,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5376,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5378,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5379,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5380,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5381,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5382,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5383,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5384,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5385,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5386,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5388,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5389,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5390,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5392,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5393,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5394,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5395,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5396,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5398,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5399,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5400,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5401,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5402,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5403,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5405,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5406,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5407,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5409,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5411,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5412,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5413,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5414,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5415,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5416,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5417,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5418,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5419,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5420,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5421,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5422,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5423,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5424,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5425,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5426,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5427,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5428,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5429,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5430,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5431,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5432,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5433,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5434,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5435,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5436,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5437,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5438,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5439,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5440,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5441,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5442,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5443,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5444,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5445,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5447,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5448,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5449,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5450,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5451,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5452,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5453,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5454,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5455,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5457,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5458,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5459,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5460,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5461,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5463,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5464,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5465,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5466,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5468,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5469,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5470,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5471,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5472,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5474,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5475,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5476,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5477,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5478,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5479,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5480,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5482,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5483,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5484,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5485,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5486,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5488,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5489,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5490,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5492,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5493,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5494,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5495,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5496,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5498,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5499,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5500,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5501,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5502,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5503,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5504,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5505,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5506,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5508,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5509,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5510,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5511,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5512,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5513,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5515,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5516,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5517,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5518,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5519,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5520,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5521,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5522,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5523,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5524,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5525,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5526,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5527,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5528,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5530,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5531,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5532,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5533,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5534,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5535,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5536,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5537,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5538,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5539,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5541,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5542,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5543,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5545,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5546,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5547,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5548,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5549,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5550,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5551,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5552,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5553,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5554,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5555,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5557,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5558,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5559,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5560,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5562,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5563,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5564,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5565,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5566,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5568,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5569,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5570,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5571,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5572,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5573,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5574,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5575,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5576,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5577,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5580,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5581,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5582,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5583,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5584,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5585,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5586,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5587,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5588,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5589,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5590,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5591,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5593,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5594,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5595,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5596,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5597,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5598,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5599,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5600,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5602,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5603,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5604,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5605,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5606,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5607,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5609,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5610,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5611,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5612,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5613,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5614,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5617,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5618,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5619,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5620,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5622,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5623,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5624,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5625,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5627,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5628,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5629,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5630,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5632,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5633,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5634,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5636,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5638,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5639,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5640,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5642,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5643,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5644,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5646,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5647,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5648,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5649,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5650,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5652,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5653,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5654,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5655,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5656,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5657,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5659,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5660,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5661,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5662,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5663,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5665,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5666,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5667,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5668,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5669,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5671,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5672,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5673,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5674,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5675,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5677,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5678,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5679,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5680,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5682,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5683,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5684,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5685,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5686,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5688,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5689,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5690,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5691,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5692,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5693,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5694,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5696,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5697,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5698,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5699,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5700,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5701,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5702,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5704,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5705,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5706,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5707,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5708,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5716,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5718,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5719,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5720,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5721,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5722,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5723,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5725,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5726,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5727,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5728,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5729,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5731,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5732,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5733,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5734,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5735,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5737,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5738,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5739,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5740,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5741,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5742,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5744,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5745,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5746,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5748,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5749,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5750,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5751,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5752,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5754,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5755,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5756,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5758,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5759,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5760,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5761,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5763,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5764,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5765,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5767,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5768,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5769,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5770,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5772,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5773,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5774,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5775,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5776,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5777,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5779,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5780,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5781,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5782,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5783,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5784,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5786,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5788,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5790,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5791,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5792,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5793,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5794,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5796,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5797,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5798,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5799,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5800,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5802,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5803,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5804,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5805,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5806,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5807,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5808,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5809,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5810,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5811,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5812,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5813,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5814,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5815,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5816,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5817,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5818,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5819,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5820,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5821,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5822,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5824,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5825,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5826,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5827,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5828,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5829,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5830,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5831,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5832,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5834,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5835,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5836,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5837,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5838,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5840,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5841,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5842,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5843,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5845,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5846,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5847,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5848,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5849,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5851,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5852,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5853,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5854,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5855,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5856,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5857,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5858,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5859,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5861,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5862,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5863,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5864,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5865,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5866,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5867,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5868,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5869,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5870,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5872,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5873,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5874,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5875,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5876,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5877,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5878,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5879,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5880,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5882,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5884,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5885,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5886,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5888,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5889,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5890,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5891,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5892,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5894,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5895,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5896,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5897,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5898,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5899,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5901,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5902,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5903,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5904,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5905,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5906,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5908,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5909,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5910,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5911,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5912,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5914,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5915,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5916,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5917,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5919,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5920,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5921,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5922,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5923,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5924,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5925,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5926,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5927,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5929,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5930,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5931,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5932,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5933,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5934,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5935,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5937,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5938,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5939,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5940,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5941,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5942,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5944,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5945,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5946,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5947,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5949,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5950,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5951,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5952,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5953,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5954,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5955,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5956,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5957,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5958,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5959,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5961,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5962,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5963,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5965,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5966,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5967,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5968,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5969,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5971,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5972,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5973,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5975,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5976,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5977,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5978,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5979,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5981,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5982,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5983,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5984,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5985,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5987,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5988,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5989,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5990,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5992,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5993,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5994,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5014,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5025,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5052,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5053,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5056,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5057,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5058,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5059,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5060,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5061,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5063,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5064,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5065,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5066,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5068,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5069,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5070,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5071,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5072,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5073,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5074,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5075,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5076,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5077,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5079,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5080,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5081,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5082,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5083,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5084,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5085,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5086,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5087,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5089,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5090,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5091,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5092,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5093,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5094,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5095,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5096,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5097,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5098,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5099,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5100,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5101,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5102,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5103,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5104,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5105,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5106,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5107,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5108,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5109,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5111,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5112,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5113,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5114,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5115,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5116,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5117,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5118,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5119,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5120,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5121,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5122,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5123,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5124,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5125,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5126,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5128,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5129,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5130,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5131,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5132,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5133,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5134,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5135,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5136,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5137,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5138,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5139,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5140,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5142,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5144,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5145,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5147,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5148,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5149,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5150,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5151,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5152,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5153,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5154,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5155,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5156,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5157,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5158,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5159,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5160,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5161,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5162,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5163,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5164,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5165,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5166,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5167,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5168,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5169,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5170,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5171,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5172,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5173,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5174,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5175,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5176,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5177,
      "to_id": 6297,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6298,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6299,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6300,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5019,
      "to_id": 6300,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6299,
      "to_id": 6300,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6221,
      "to_id": 6301,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6302,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6303,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6304,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6305,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6306,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6307,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6308,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6309,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5198,
      "to_id": 6309,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 5020,
      "to_id": 6309,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6310,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6311,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6312,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6313,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6224,
      "to_id": 6314,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6225,
      "to_id": 6315,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6316,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6317,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6318,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6319,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6320,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6321,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6322,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6323,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6324,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6325,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6326,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6327,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6328,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6329,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6330,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6331,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6332,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6333,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6334,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6335,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6336,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6228,
      "to_id": 6337,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6338,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6339,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6340,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6341,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6342,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6343,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6344,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6345,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6346,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6347,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6348,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6349,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6350,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6351,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6352,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6353,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6354,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6355,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6356,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6357,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6358,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6359,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6360,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6361,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6362,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6363,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6364,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6365,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6366,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6367,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6368,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6369,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6370,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6371,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6372,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6373,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6374,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6375,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6376,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6377,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6378,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6379,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6229,
      "to_id": 6380,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6381,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6382,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6383,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6384,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6385,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6386,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6387,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6388,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6389,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6390,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6391,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6392,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6393,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6394,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6395,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6396,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6397,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6398,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6399,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6400,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6401,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6402,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6403,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6404,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6405,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6406,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6407,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6408,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6409,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6410,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6411,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6412,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6413,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6414,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6415,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6416,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6417,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6418,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6419,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6420,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6421,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6422,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6423,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6424,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6425,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6426,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6427,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6428,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6429,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6430,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6431,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6432,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6433,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6230,
      "to_id": 6434,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6231,
      "to_id": 6435,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6231,
      "to_id": 6436,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6231,
      "to_id": 6437,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6231,
      "to_id": 6438,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6231,
      "to_id": 6439,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6440,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6441,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6442,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6443,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6444,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6445,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6446,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6232,
      "to_id": 6447,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6233,
      "to_id": 6448,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6233,
      "to_id": 6449,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6233,
      "to_id": 6450,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6233,
      "to_id": 6451,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5033,
      "to_id": 6451,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6450,
      "to_id": 6451,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6452,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6453,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6454,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6455,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6456,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 6456,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6455,
      "to_id": 6456,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6456,
      "to_id": 6456,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6457,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6458,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6459,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6460,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6461,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6462,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6463,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6464,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6465,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6466,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6467,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6468,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6469,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6470,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6471,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5035,
      "to_id": 6471,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6464,
      "to_id": 6471,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6471,
      "to_id": 6471,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6472,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6473,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6474,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6475,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6476,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6477,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6478,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6479,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6480,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6481,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6482,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6483,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6484,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6485,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6486,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6487,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6488,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6489,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6490,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6491,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6492,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6493,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6494,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6495,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6496,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6497,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6498,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6499,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6500,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6501,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6502,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6503,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6504,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6505,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6506,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6507,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6508,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6509,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6510,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6511,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6512,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6513,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6514,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6515,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6516,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6517,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6234,
      "to_id": 6518,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6519,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6520,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6521,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6522,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6523,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6524,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6525,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6526,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6527,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6528,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6529,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6530,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6531,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6532,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6533,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6534,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6535,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6536,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6537,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6538,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6539,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6540,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6541,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6542,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6543,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6544,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6545,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6546,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6547,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6548,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6549,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6235,
      "to_id": 6550,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6551,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6552,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6553,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6554,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 5042,
      "to_id": 6554,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6552,
      "to_id": 6554,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6554,
      "to_id": 6554,
      "type": "CALLS",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6555,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6556,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6557,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6558,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6559,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6560,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6561,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6242,
      "to_id": 6562,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6243,
      "to_id": 6563,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6243,
      "to_id": 6564,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6245,
      "to_id": 6565,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6245,
      "to_id": 6566,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6246,
      "to_id": 6567,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6247,
      "to_id": 6568,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6247,
      "to_id": 6569,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6249,
      "to_id": 6570,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6249,
      "to_id": 6571,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6250,
      "to_id": 6572,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6250,
      "to_id": 6573,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6251,
      "to_id": 6574,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6251,
      "to_id": 6575,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6251,
      "to_id": 6576,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6577,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6578,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6579,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6580,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6581,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6582,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6583,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6253,
      "to_id": 6584,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6585,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6586,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6587,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6588,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6589,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6590,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6591,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6254,
      "to_id": 6592,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6593,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6594,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6595,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6596,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6597,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6255,
      "to_id": 6598,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6599,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6600,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6601,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6602,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6603,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6604,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6605,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6606,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6607,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6608,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6609,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6256,
      "to_id": 6610,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6611,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6612,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6613,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6614,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6615,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6616,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6617,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6257,
      "to_id": 6618,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6619,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6620,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6621,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6622,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6623,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6258,
      "to_id": 6624,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6625,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6626,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6627,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6628,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6629,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6630,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6631,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6632,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6633,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6634,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6635,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6259,
      "to_id": 6636,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6637,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6638,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6639,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6640,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6641,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6642,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6260,
      "to_id": 6643,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6644,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6645,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6646,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6647,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6648,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6649,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6650,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6651,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6652,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6653,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6654,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6655,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6656,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6657,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6658,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6261,
      "to_id": 6659,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6263,
      "to_id": 6660,
      "type": "DEFINES_METHOD",
      "properties": {}
    },
    {
      "from_id": 6263,
      "to_id": 6661,
      "type": "DEFINES_METHOD",
      "properties": {}
    }
  ],
  "metadata": {
    "total_nodes": 1665,
    "total_relationships": 4205,
    "exported_at": "2025-09-19T06:59:56.270537+00:00"
  }
}